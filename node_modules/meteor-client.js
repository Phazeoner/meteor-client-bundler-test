__meteor_runtime_config__ = Object.assign({
  "meteorEnv": {},
  "DDP_DEFAULT_CONNECTION_URL": "http://localhost:3000/"
}, window.__meteor_runtime_config__);

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var global, meteorEnv, Meteor;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/global.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Export a reliable global object for all Meteor code.
    global = this;

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/client_environment.js                                                                //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var config = __meteor_runtime_config__;
    meteorEnv = config.meteorEnv;

    /**
     * @summary The Meteor namespace
     * @namespace Meteor
     */
    Meteor = {
      /**
       * @summary Boolean variable.  True if running in production environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isProduction: meteorEnv.NODE_ENV === "production",

      /**
       * @summary Boolean variable.  True if running in development environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isDevelopment: meteorEnv.NODE_ENV !== "production",

      /**
       * @summary Boolean variable.  True if running in client environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isClient: true,

      /**
       * @summary Boolean variable.  True if running in server environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isServer: false,

      /**
       * @summary Boolean variable.  True if running in Cordova environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isCordova: false,

      /**
       * @summary Boolean variable. True if running in a "modern" JS
       *          environment, as determined by the `modern` package.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isModern: config.isModern
    };

    if (config.PUBLIC_SETTINGS) {
      /**
       * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
       * @locus Anywhere
       * @type {Object}
       */
      Meteor.settings = {
        "public": config.PUBLIC_SETTINGS
      };
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/define-package.js                                                                    //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function PackageRegistry() {
      this._promiseInfoMap = Object.create(null);
    }

    var PRp = PackageRegistry.prototype;

    // Set global.Package[name] = pkg || {}. If additional arguments are
    // supplied, their keys will be copied into pkg if not already present.
    // This method is defined on the prototype of global.Package so that it
    // will not be included in Object.keys(Package).
    PRp._define = function definePackage(name, pkg) {
      pkg = pkg || {};

      var argc = arguments.length;
      for (var i = 2; i < argc; ++i) {
        var arg = arguments[i];
        for (var s in arg) {
          if (!(s in pkg)) {
            pkg[s] = arg[s];
          }
        }
      }

      this[name] = pkg;

      var info = this._promiseInfoMap[name];
      if (info) {
        info.resolve(pkg);
      }

      return pkg;
    };

    PRp._has = function has(name) {
      return Object.prototype.hasOwnProperty.call(this, name);
    };

    // Returns a Promise that will resolve to the exports of the named
    // package, or be rejected if the package is not installed.
    PRp._promise = function promise(name) {
      var self = this;
      var info = self._promiseInfoMap[name];

      if (!info) {
        info = self._promiseInfoMap[name] = {};
        info.promise = new Promise(function (resolve, reject) {
          info.resolve = resolve;
          if (self._has(name)) {
            resolve(self[name]);
          } else {
            Meteor.startup(function () {
              if (!self._has(name)) {
                reject(new Error("Package " + name + " not installed"));
              }
            });
          }
        });
      }

      return info.promise;
    };

    // Initialize the Package namespace used by all Meteor packages.
    global.Package = new PackageRegistry();

    if (typeof exports === "object") {
      // This code is also used by meteor/tools/isobuild/bundler.js.
      exports.PackageRegistry = PackageRegistry;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/helpers.js                                                                           //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    if (Meteor.isServer) var Future = Npm.require('fibers/future');

    if (typeof __meteor_runtime_config__ === 'object' && __meteor_runtime_config__.meteorRelease) {
      /**
       * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
       * @locus Anywhere
       * @type {String}
       */
      Meteor.release = __meteor_runtime_config__.meteorRelease;
    }

    // XXX find a better home for these? Ideally they would be _.get,
    // _.ensure, _.delete..

    // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or
    // a[b][c] doesn't exist.
    //
    Meteor._get = function (obj /*, arguments */) {
      for (var i = 1; i < arguments.length; i++) {
        if (!(arguments[i] in obj)) return undefined;
        obj = obj[arguments[i]];
      }
      return obj;
    };

    // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,
    // it is created and set to {}. Either way, it is returned.
    //
    Meteor._ensure = function (obj /*, arguments */) {
      for (var i = 1; i < arguments.length; i++) {
        var key = arguments[i];
        if (!(key in obj)) obj[key] = {};
        obj = obj[key];
      }

      return obj;
    };

    // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it
    // isn't empty, then a[b] unless it isn't empty.
    //
    Meteor._delete = function (obj /*, arguments */) {
      var stack = [obj];
      var leaf = true;
      for (var i = 1; i < arguments.length - 1; i++) {
        var key = arguments[i];
        if (!(key in obj)) {
          leaf = false;
          break;
        }
        obj = obj[key];
        if (typeof obj !== "object") break;
        stack.push(obj);
      }

      for (var i = stack.length - 1; i >= 0; i--) {
        var key = arguments[i + 1];

        if (leaf) leaf = false;else for (var other in stack[i][key]) return; // not empty -- we're done

        delete stack[i][key];
      }
    };

    // wrapAsync can wrap any function that takes some number of arguments that
    // can't be undefined, followed by some optional arguments, where the callback
    // is the last optional argument.
    // e.g. fs.readFile(pathname, [callback]),
    // fs.open(pathname, flags, [mode], [callback])
    // For maximum effectiveness and least confusion, wrapAsync should be used on
    // functions where the callback is the only argument of type Function.

    /**
     * @memberOf Meteor
     * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.
     * @locus Anywhere
     * @param {Function} func A function that takes a callback as its final parameter
     * @param {Object} [context] Optional `this` object against which the original function will be invoked
     */
    Meteor.wrapAsync = function (fn, context) {
      return function () /* arguments */{
        var self = context || this;
        var newArgs = Array.prototype.slice.call(arguments);
        var callback;

        for (var i = newArgs.length - 1; i >= 0; --i) {
          var arg = newArgs[i];
          var type = typeof arg;
          if (type !== "undefined") {
            if (type === "function") {
              callback = arg;
            }
            break;
          }
        }

        if (!callback) {
          if (Meteor.isClient) {
            callback = logErr;
          } else {
            var fut = new Future();
            callback = fut.resolver();
          }
          ++i; // Insert the callback just after arg.
        }

        newArgs[i] = Meteor.bindEnvironment(callback);
        var result = fn.apply(self, newArgs);
        return fut ? fut.wait() : result;
      };
    };

    // Sets child's prototype to a new object whose prototype is parent's
    // prototype. Used as:
    //   Meteor._inherits(ClassB, ClassA).
    //   _.extend(ClassB.prototype, { ... })
    // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.
    var hasOwn = Object.prototype.hasOwnProperty;
    Meteor._inherits = function (Child, Parent) {
      // copy Parent static properties
      for (var key in Parent) {
        // make sure we only copy hasOwnProperty properties vs. prototype
        // properties
        if (hasOwn.call(Parent, key)) {
          Child[key] = Parent[key];
        }
      }

      // a middle member of prototype chain: takes the prototype from the Parent
      var Middle = function () {
        this.constructor = Child;
      };
      Middle.prototype = Parent.prototype;
      Child.prototype = new Middle();
      Child.__super__ = Parent.prototype;
      return Child;
    };

    var warnedAboutWrapAsync = false;

    /**
     * @deprecated in 0.9.3
     */
    Meteor._wrapAsync = function (fn, context) {
      if (!warnedAboutWrapAsync) {
        Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync");
        warnedAboutWrapAsync = true;
      }
      return Meteor.wrapAsync.apply(Meteor, arguments);
    };

    function logErr(err) {
      if (err) {
        return Meteor._debug("Exception in callback of async function", err);
      }
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    var global = this;

    // IE 10, Node >= 9.1

    function useSetImmediate() {
      if (!global.setImmediate) return null;else {
        var setImmediate = function (fn) {
          global.setImmediate(fn);
        };
        setImmediate.implementation = 'setImmediate';
        return setImmediate;
      }
    }

    // Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari

    function usePostMessage() {
      // The test against `importScripts` prevents this implementation
      // from being installed inside a web worker, where
      // `global.postMessage` means something completely different and
      // can't be used for this purpose.

      if (!global.postMessage || global.importScripts) {
        return null;
      }

      // Avoid synchronous post message implementations.

      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;
      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };
      global.postMessage("", "*");
      global.onmessage = oldOnMessage;

      if (!postMessageIsAsynchronous) return null;

      var funcIndex = 0;
      var funcs = {};

      // Installs an event handler on `global` for the `message` event: see
      // * https://developer.mozilla.org/en/DOM/window.postMessage
      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

      // XXX use Random.id() here?
      var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.';

      function isStringAndStartsWith(string, putativeStart) {
        return typeof string === "string" && string.substring(0, putativeStart.length) === putativeStart;
      }

      function onGlobalMessage(event) {
        // This will catch all incoming messages (even from other
        // windows!), so we need to try reasonably hard to avoid letting
        // anyone else trick us into firing off. We test the origin is
        // still this window, and that a (randomly generated)
        // unpredictable identifying prefix is present.
        if (event.source === global && isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {
          var index = event.data.substring(MESSAGE_PREFIX.length);
          try {
            if (funcs[index]) funcs[index]();
          } finally {
            delete funcs[index];
          }
        }
      }

      if (global.addEventListener) {
        global.addEventListener("message", onGlobalMessage, false);
      } else {
        global.attachEvent("onmessage", onGlobalMessage);
      }

      var setImmediate = function (fn) {
        // Make `global` post a message to itself with the handle and
        // identifying prefix, thus asynchronously invoking our
        // onGlobalMessage listener above.
        ++funcIndex;
        funcs[funcIndex] = fn;
        global.postMessage(MESSAGE_PREFIX + funcIndex, "*");
      };
      setImmediate.implementation = 'postMessage';
      return setImmediate;
    }

    function useTimeout() {
      var setImmediate = function (fn) {
        global.setTimeout(fn, 0);
      };
      setImmediate.implementation = 'setTimeout';
      return setImmediate;
    }

    Meteor._setImmediate = useSetImmediate() || usePostMessage() || useTimeout();

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/timers.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function withoutInvocation(f) {
      if (Package.ddp) {
        var DDP = Package.ddp.DDP;
        var CurrentInvocation = DDP._CurrentMethodInvocation ||
        // For backwards compatibility, as explained in this issue:
        // https://github.com/meteor/meteor/issues/8947
        DDP._CurrentInvocation;

        var invocation = CurrentInvocation.get();
        if (invocation && invocation.isSimulation) {
          throw new Error("Can't set timers inside simulations");
        }

        return function () {
          CurrentInvocation.withValue(null, f);
        };
      } else {
        return f;
      }
    }

    function bindAndCatch(context, f) {
      return Meteor.bindEnvironment(withoutInvocation(f), context);
    }

    // Meteor.setTimeout and Meteor.setInterval callbacks scheduled
    // inside a server method are not part of the method invocation and
    // should clear out the CurrentMethodInvocation environment variable.

    /**
     * @memberOf Meteor
     * @summary Call a function in the future after waiting for a specified delay.
     * @locus Anywhere
     * @param {Function} func The function to run
     * @param {Number} delay Number of milliseconds to wait before calling function
     */
    Meteor.setTimeout = function (f, duration) {
      return setTimeout(bindAndCatch("setTimeout callback", f), duration);
    };

    /**
     * @memberOf Meteor
     * @summary Call a function repeatedly, with a time delay between calls.
     * @locus Anywhere
     * @param {Function} func The function to run
     * @param {Number} delay Number of milliseconds to wait between each function call.
     */
    Meteor.setInterval = function (f, duration) {
      return setInterval(bindAndCatch("setInterval callback", f), duration);
    };

    /**
     * @memberOf Meteor
     * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.
     * @locus Anywhere
     * @param {Object} id The handle returned by `Meteor.setInterval`
     */
    Meteor.clearInterval = function (x) {
      return clearInterval(x);
    };

    /**
     * @memberOf Meteor
     * @summary Cancel a function call scheduled by `Meteor.setTimeout`.
     * @locus Anywhere
     * @param {Object} id The handle returned by `Meteor.setTimeout`
     */
    Meteor.clearTimeout = function (x) {
      return clearTimeout(x);
    };

    // XXX consider making this guarantee ordering of defer'd callbacks, like
    // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:
    //    callSomethingThatDefersSomeWork();
    //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));

    /**
     * @memberOf Meteor
     * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.
     * @locus Anywhere
     * @param {Function} func The function to run
     */
    Meteor.defer = function (f) {
      Meteor._setImmediate(bindAndCatch("defer callback", f));
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/errors.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Makes an error subclass which properly contains a stack trace in most
    // environments. constructor can set fields on `this` (and should probably set
    // `message`, which is what gets displayed at the top of a stack trace).
    //
    Meteor.makeErrorType = function (name, constructor) {
      var errorClass = function () /*arguments*/{
        // Ensure we get a proper stack trace in most Javascript environments
        if (Error.captureStackTrace) {
          // V8 environments (Chrome and Node.js)
          Error.captureStackTrace(this, errorClass);
        } else {
          // Borrow the .stack property of a native Error object.
          this.stack = new Error().stack;
        }
        // Safari magically works.

        constructor.apply(this, arguments);

        this.errorType = name;
      };

      Meteor._inherits(errorClass, Error);

      return errorClass;
    };

    // This should probably be in the livedata package, but we don't want
    // to require you to use the livedata package to get it. Eventually we
    // should probably rename it to DDP.Error and put it back in the
    // 'livedata' package (which we should rename to 'ddp' also.)
    //
    // Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object
    // containing 'error' and optionally 'reason' and 'details'.
    // The DDP client manually puts these into Meteor.Error objects. (We don't use
    // EJSON.addType here because the type is determined by location in the
    // protocol, not text on the wire.)

    /**
     * @summary This class represents a symbolic error thrown by a method.
     * @locus Anywhere
     * @class
     * @param {String} error A string code uniquely identifying this kind of error.
     * This string should be used by callers of the method to determine the
     * appropriate action to take, instead of attempting to parse the reason
     * or details fields. For example:
     *
     * ```
     * // on the server, pick a code unique to this error
     * // the reason field should be a useful debug message
     * throw new Meteor.Error("logged-out",
     *   "The user must be logged in to post a comment.");
     *
     * // on the client
     * Meteor.call("methodName", function (error) {
     *   // identify the error
     *   if (error && error.error === "logged-out") {
     *     // show a nice error message
     *     Session.set("errorMessage", "Please log in to post a comment.");
     *   }
     * });
     * ```
     *
     * For legacy reasons, some built-in Meteor functions such as `check` throw
     * errors with a number in this field.
     *
     * @param {String} [reason] Optional.  A short human-readable summary of the
     * error, like 'Not Found'.
     * @param {String} [details] Optional.  Additional information about the error,
     * like a textual stack trace.
     */
    Meteor.Error = Meteor.makeErrorType("Meteor.Error", function (error, reason, details) {
      var self = this;

      // Newer versions of DDP use this property to signify that an error
      // can be sent back and reconstructed on the calling client.
      self.isClientSafe = true;

      // String code uniquely identifying this kind of error.
      self.error = error;

      // Optional: A short human-readable summary of the error. Not
      // intended to be shown to end users, just developers. ("Not Found",
      // "Internal Server Error")
      self.reason = reason;

      // Optional: Additional information about the error, say for
      // debugging. It might be a (textual) stack trace if the server is
      // willing to provide one. The corresponding thing in HTTP would be
      // the body of a 404 or 500 response. (The difference is that we
      // never expect this to be shown to end users, only developers, so
      // it doesn't need to be pretty.)
      self.details = details;

      // This is what gets displayed at the top of a stack trace. Current
      // format is "[404]" (if no reason is set) or "File not found [404]"
      if (self.reason) self.message = self.reason + ' [' + self.error + ']';else self.message = '[' + self.error + ']';
    });

    // Meteor.Error is basically data and is sent over DDP, so you should be able to
    // properly EJSON-clone it. This is especially important because if a
    // Meteor.Error is thrown through a Future, the error, reason, and details
    // properties become non-enumerable so a standard Object clone won't preserve
    // them and they will be lost from DDP.
    Meteor.Error.prototype.clone = function () {
      var self = this;
      return new Meteor.Error(self.error, self.reason, self.details);
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/fiber_stubs_client.js                                                                //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This file is a partial analogue to fiber_helpers.js, which allows the client
    // to use a queue too, and also to call noYieldsAllowed.

    // The client has no ability to yield, so noYieldsAllowed is a noop.
    //
    Meteor._noYieldsAllowed = function (f) {
      return f();
    };

    // An even simpler queue of tasks than the fiber-enabled one.  This one just
    // runs all the tasks when you call runTask or flush, synchronously.
    //
    Meteor._SynchronousQueue = function () {
      var self = this;
      self._tasks = [];
      self._running = false;
      self._runTimeout = null;
    };

    var SQp = Meteor._SynchronousQueue.prototype;

    SQp.runTask = function (task) {
      var self = this;
      if (!self.safeToRunTask()) throw new Error("Could not synchronously run a task from a running task");
      self._tasks.push(task);
      var tasks = self._tasks;
      self._tasks = [];
      self._running = true;

      if (self._runTimeout) {
        // Since we're going to drain the queue, we can forget about the timeout
        // which tries to run it.  (But if one of our tasks queues something else,
        // the timeout will be correctly re-created.)
        clearTimeout(self._runTimeout);
        self._runTimeout = null;
      }

      try {
        while (tasks.length > 0) {
          var t = tasks.shift();
          try {
            t();
          } catch (e) {
            if (tasks.length === 0) {
              // this was the last task, that is, the one we're calling runTask
              // for.
              throw e;
            }
            Meteor._debug("Exception in queued task", e);
          }
        }
      } finally {
        self._running = false;
      }
    };

    SQp.queueTask = function (task) {
      var self = this;
      self._tasks.push(task);
      // Intentionally not using Meteor.setTimeout, because it doesn't like runing
      // in stubs for now.
      if (!self._runTimeout) {
        self._runTimeout = setTimeout(function () {
          return self.flush.apply(self, arguments);
        }, 0);
      }
    };

    SQp.flush = function () {
      var self = this;
      self.runTask(function () {});
    };

    SQp.drain = function () {
      var self = this;
      if (!self.safeToRunTask()) {
        return;
      }
      while (self._tasks.length > 0) {
        self.flush();
      }
    };

    SQp.safeToRunTask = function () {
      var self = this;
      return !self._running;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/startup_client.js                                                                    //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var callbackQueue = [];
    var isLoadingCompleted = false;
    var isReady = false;

    // Keeps track of how many events to wait for in addition to loading completing,
    // before we're considered ready.
    var readyHoldsCount = 0;

    var holdReady = function () {
      readyHoldsCount++;
    };

    var releaseReadyHold = function () {
      readyHoldsCount--;
      maybeReady();
    };

    var maybeReady = function () {
      if (isReady || !isLoadingCompleted || readyHoldsCount > 0) return;

      isReady = true;

      // Run startup callbacks
      while (callbackQueue.length) callbackQueue.shift()();

      if (Meteor.isCordova) {
        // Notify the WebAppLocalServer plugin that startup was completed successfully,
        // so we can roll back faulty versions if this doesn't happen
        WebAppLocalServer.startupDidComplete();
      }
    };

    var loadingCompleted = function () {
      if (!isLoadingCompleted) {
        isLoadingCompleted = true;
        maybeReady();
      }
    };

    if (Meteor.isCordova) {
      holdReady();
      document.addEventListener('deviceready', releaseReadyHold, false);
    }

    if (document.readyState === 'complete' || document.readyState === 'loaded') {
      // Loading has completed,
      // but allow other scripts the opportunity to hold ready
      window.setTimeout(loadingCompleted);
    } else {
      // Attach event listeners to wait for loading to complete
      if (document.addEventListener) {
        document.addEventListener('DOMContentLoaded', loadingCompleted, false);
        window.addEventListener('load', loadingCompleted, false);
      } else {
        // Use IE event model for < IE9
        document.attachEvent('onreadystatechange', function () {
          if (document.readyState === "complete") {
            loadingCompleted();
          }
        });
        window.attachEvent('load', loadingCompleted);
      }
    }

    /**
     * @summary Run code when a client or a server starts.
     * @locus Anywhere
     * @param {Function} func A function to run on startup.
     */
    Meteor.startup = function (callback) {
      // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/
      var doScroll = !document.addEventListener && document.documentElement.doScroll;

      if (!doScroll || window !== top) {
        if (isReady) callback();else callbackQueue.push(callback);
      } else {
        try {
          doScroll('left');
        } catch (error) {
          setTimeout(function () {
            Meteor.startup(callback);
          }, 50);
          return;
        };
        callback();
      }
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/debug.js                                                                             //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var suppress = 0;

    // replacement for console.log. This is a temporary API. We should
    // provide a real logging API soon (possibly just a polyfill for
    // console?)
    //
    // NOTE: this is used on the server to print the warning about
    // having autopublish enabled when you probably meant to turn it
    // off. it's not really the proper use of something called
    // _debug. the intent is for this message to go to the terminal and
    // be very visible. if you change _debug to go someplace else, etc,
    // please fix the autopublish code to do something reasonable.
    //
    Meteor._debug = function () /* arguments */{
      if (suppress) {
        suppress--;
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log !== 'undefined') {
        if (arguments.length == 0) {
          // IE Companion breaks otherwise
          // IE10 PP4 requires at least one argument
          console.log('');
        } else {
          // IE doesn't have console.log.apply, it's not a real Object.
          // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9
          // http://patik.com/blog/complete-cross-browser-console-log/
          if (typeof console.log.apply === "function") {
            // Most browsers

            // Chrome and Safari only hyperlink URLs to source files in first argument of
            // console.log, so try to call it with one argument if possible.
            // Approach taken here: If all arguments are strings, join them on space.
            // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991
            var allArgumentsOfTypeString = true;
            for (var i = 0; i < arguments.length; i++) if (typeof arguments[i] !== "string") allArgumentsOfTypeString = false;

            if (allArgumentsOfTypeString) console.log.apply(console, [Array.prototype.join.call(arguments, " ")]);else console.log.apply(console, arguments);
          } else if (typeof Function.prototype.bind === "function") {
            // IE9
            var log = Function.prototype.bind.call(console.log, console);
            log.apply(console, arguments);
          } else {
            // IE8
            Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));
          }
        }
      }
    };

    // Suppress the next 'count' Meteor._debug messsages. Use this to
    // stop tests from spamming the console.
    //
    Meteor._suppress_log = function (count) {
      suppress += count;
    };

    Meteor._suppressed_log_expected = function () {
      return suppress !== 0;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/string_utils.js                                                                      //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Like Perl's quotemeta: quotes all regexp metacharacters.
    // Code taken from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
    Meteor._escapeRegExp = function (string) {
      return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/test_environment.js                                                                  //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var TEST_METADATA_STR;
    if (Meteor.isClient) {
      TEST_METADATA_STR = meteorEnv.TEST_METADATA;
    } else {
      TEST_METADATA_STR = process.env.TEST_METADATA;
    }

    var TEST_METADATA = JSON.parse(TEST_METADATA_STR || "{}");
    var testDriverPackageName = TEST_METADATA.driverPackage;

    // Note that if we are in test-packages mode neither of these will be set,
    // but we will have a test driver package
    Meteor.isTest = !!TEST_METADATA.isTest;
    Meteor.isAppTest = !!TEST_METADATA.isAppTest;
    Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest;

    if (typeof testDriverPackageName === "string") {
      Meteor.startup(function () {
        var testDriverPackage = Package[testDriverPackageName];
        if (!testDriverPackage) {
          throw new Error("Can't find test driver package: " + testDriverPackageName);
        }

        // On the client, the test driver *must* define `runTests`
        if (Meteor.isClient) {
          if (typeof testDriverPackage.runTests !== "function") {
            throw new Error("Test driver package " + testDriverPackageName + " missing `runTests` export");
          }
          testDriverPackage.runTests();
        } else {
          // The server can optionally define `start`
          if (typeof testDriverPackage.start === "function") {
            testDriverPackage.start();
          }
        }
      });
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/dynamics_browser.js                                                                  //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Simple implementation of dynamic scoping, for use in browsers

    var nextSlot = 0;
    var currentValues = [];

    Meteor.EnvironmentVariable = function () {
      this.slot = nextSlot++;
    };

    var EVp = Meteor.EnvironmentVariable.prototype;

    EVp.get = function () {
      return currentValues[this.slot];
    };

    EVp.getOrNullIfOutsideFiber = function () {
      return this.get();
    };

    EVp.withValue = function (value, func) {
      var saved = currentValues[this.slot];
      try {
        currentValues[this.slot] = value;
        var ret = func();
      } finally {
        currentValues[this.slot] = saved;
      }
      return ret;
    };

    Meteor.bindEnvironment = function (func, onException, _this) {
      // needed in order to be able to create closures inside func and
      // have the closed variables not change back to their original
      // values
      var boundValues = currentValues.slice();

      if (!onException || typeof onException === 'string') {
        var description = onException || "callback of async function";
        onException = function (error) {
          Meteor._debug("Exception in " + description + ":", error);
        };
      }

      return function () /* arguments */{
        var savedValues = currentValues;
        try {
          currentValues = boundValues;
          var ret = func.apply(_this, arguments);
        } catch (e) {
          // note: callback-hook currently relies on the fact that if onException
          // throws in the browser, the wrapped call throws.
          onException(e);
        } finally {
          currentValues = savedValues;
        }
        return ret;
      };
    };

    Meteor._nodeCodeMustBeInFiber = function () {
      // no-op on browser
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/url_common.js                                                                        //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**
     * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.
     * @locus Anywhere
     * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".
     * @param {Object} [options]
     * @param {Boolean} options.secure Create an HTTPS URL.
     * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
     * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
     */
    Meteor.absoluteUrl = function (path, options) {
      // path is optional
      if (!options && typeof path === 'object') {
        options = path;
        path = undefined;
      }
      // merge options with defaults
      options = Object.assign({}, Meteor.absoluteUrl.defaultOptions, options || {});

      var url = options.rootUrl;
      if (!url) throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment");

      if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'
        url = 'http://' + url; // we will later fix to https if options.secure is set

      if (!url.endsWith("/")) {
        url += "/";
      }

      if (path) {
        // join url and path with a / separator
        while (path.startsWith("/")) {
          path = path.slice(1);
        }
        url += path;
      }

      // turn http to https if secure option is set, and we're not talking
      // to localhost.
      if (options.secure && /^http:/.test(url) && // url starts with 'http:'
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1
        url = url.replace(/^http:/, 'https:');

      if (options.replaceLocalhost) url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1');

      return url;
    };

    // allow later packages to override default options
    var defaultOptions = Meteor.absoluteUrl.defaultOptions = {};

    // available only in a browser environment
    var location = typeof window === "object" && window.location;

    if (typeof __meteor_runtime_config__ === "object" && __meteor_runtime_config__.ROOT_URL) {
      defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;
    } else if (location && location.protocol && location.host) {
      defaultOptions.rootUrl = location.protocol + "//" + location.host;
    }

    // Make absolute URLs use HTTPS by default if the current window.location
    // uses HTTPS. Since this is just a default, it can be overridden by
    // passing { secure: false } if necessary.
    if (location && location.protocol === "https:") {
      defaultOptions.secure = true;
    }

    Meteor._relativeToSiteRootUrl = function (link) {
      if (typeof __meteor_runtime_config__ === "object" && link.substr(0, 1) === "/") link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link;
      return link;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("meteor", {
    Meteor: Meteor,
    global: global,
    meteorEnv: meteorEnv
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("meteor-base");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var makeInstaller, meteorInstall;

  ///////////////////////////////////////////////////////////////////////////////
  //                                                                           //
  // packages/modules-runtime/.npm/package/node_modules/install/install.js     //
  // This file is in bare mode and is not in its own closure.                  //
  //                                                                           //
  ///////////////////////////////////////////////////////////////////////////////
  //
  makeInstaller = function (options) {

    options = options || {};

    // These file extensions will be appended to required module identifiers
    // if they do not exactly match an installed module.
    var defaultExtensions = options.extensions || [".js", ".json"];

    // If defined, the options.fallback function will be called when no
    // installed module is found for a required module identifier. Often
    // options.fallback will be implemented in terms of the native Node
    // require function, which has the ability to load binary modules.
    var fallback = options.fallback;

    // List of fields to look for in package.json files to determine the
    // main entry module of the package. The first field listed here whose
    // value is a string will be used to resolve the entry module.
    var mainFields = options.mainFields || (
    // If options.mainFields is absent and options.browser is truthy,
    // package resolution will prefer the "browser" field of package.json
    // files to the "main" field. Note that this only supports
    // string-valued "browser" fields for now, though in the future it
    // might make sense to support the object version, a la browserify.
    options.browser ? ["browser", "main"] : ["main"]);

    var hasOwn = {}.hasOwnProperty;
    function strictHasOwn(obj, key) {
      return isObject(obj) && isString(key) && hasOwn.call(obj, key);
    }

    // Cache for looking up File objects given absolute module identifiers.
    // Invariants:
    //   filesByModuleId[module.id] === fileAppendId(root, module.id)
    //   filesByModuleId[module.id].module === module
    var filesByModuleId = {};

    // The file object representing the root directory of the installed
    // module tree.
    var root = new File("/", new File("/.."));
    var rootRequire = makeRequire(root);

    // Merges the given tree of directories and module factory functions
    // into the tree of installed modules and returns a require function
    // that behaves as if called from a module in the root directory.
    function install(tree, options) {
      if (isObject(tree)) {
        fileMergeContents(root, tree, options);
      }
      return rootRequire;
    }

    // Replace this function to enable Module.prototype.prefetch.
    install.fetch = function (ids) {
      throw new Error("fetch not implemented");
    };

    // This constructor will be used to instantiate the module objects
    // passed to module factory functions (i.e. the third argument after
    // require and exports), and is exposed as install.Module in case the
    // caller of makeInstaller wishes to modify Module.prototype.
    function Module(id) {
      this.id = id;

      // The Node implementation of module.children unfortunately includes
      // only those child modules that were imported for the first time by
      // this parent module (i.e., child.parent === this).
      this.children = [];

      // This object is an install.js extension that includes all child
      // modules imported by this module, even if this module is not the
      // first to import them.
      this.childrenById = {};
    }

    // Used to keep module.prefetch promise resolutions well-ordered.
    var lastPrefetchPromise;

    // May be shared by multiple sequential calls to module.prefetch.
    // Initialized to {} only when necessary.
    var missing;

    Module.prototype.prefetch = function (id) {
      var _module = this;
      var parentFile = getOwn(filesByModuleId, _module.id);

      lastPrefetchPromise = lastPrefetchPromise || Promise.resolve();
      var previousPromise = lastPrefetchPromise;

      function walk(_module2) {
        var file = getOwn(filesByModuleId, _module2.id);
        if (fileIsDynamic(file) && !file.pending) {
          file.pending = true;
          missing = missing || {};

          // These are the data that will be exposed to the install.fetch
          // callback, so it's worth documenting each item with a comment.
          missing[_module2.id] = {
            // The CommonJS module object that will be exposed to this
            // dynamic module when it is evaluated. Note that install.fetch
            // could decide to populate module.exports directly, instead of
            // fetching anything. In that case, install.fetch should omit
            // this module from the tree that it produces.
            module: file.module,
            // List of module identifier strings imported by this module.
            // Note that the missing object already contains all available
            // dependencies (including transitive dependencies), so
            // install.fetch should not need to traverse these dependencies
            // in most cases; however, they may be useful for other reasons.
            // Though the strings are unique, note that two different
            // strings could resolve to the same module.
            deps: Object.keys(file.deps),
            // The options (if any) that were passed as the second argument
            // to the install(tree, options) function when this stub was
            // first registered. Typically contains options.extensions, but
            // could contain any information appropriate for the entire tree
            // as originally installed. These options will be automatically
            // inherited by the newly fetched modules, so install.fetch
            // should not need to modify them.
            options: file.options,
            // Any stub data included in the array notation from the
            // original entry for this dynamic module. Typically contains
            // "main" and/or "browser" fields for package.json files, and is
            // otherwise undefined.
            stub: file.stub
          };

          each(file.deps, function (parentId, id) {
            fileResolve(file, id);
          });

          each(_module2.childrenById, walk);
        }
      }

      return lastPrefetchPromise = new Promise(function (resolve) {
        var absChildId = _module.resolve(id);
        each(_module.childrenById, walk);
        resolve(absChildId);
      }).then(function (absChildId) {
        // Grab the current missing object and fetch its contents.
        var toBeFetched = missing;
        missing = null;

        function clearPending() {
          if (toBeFetched) {
            Object.keys(toBeFetched).forEach(function (id) {
              getOwn(filesByModuleId, id).pending = false;
            });
          }
        }

        return new Promise(function (resolve) {
          // The install.fetch function takes an object mapping missing
          // dynamic module identifiers to options objects, and should
          // return a Promise that resolves to a module tree that can be
          // installed. As an optimization, if there were no missing dynamic
          // modules, then we can skip calling install.fetch entirely.
          resolve(toBeFetched && install.fetch(toBeFetched));
        }).then(function (tree) {
          function both() {
            install(tree);
            clearPending();
            return absChildId;
          }

          // Although we want multiple install.fetch calls to run in
          // parallel, it is important that the promises returned by
          // module.prefetch are resolved in the same order as the original
          // calls to module.prefetch, because previous fetches may include
          // modules assumed to exist by more recent module.prefetch calls.
          // Whether previousPromise was resolved or rejected, carry on with
          // the installation regardless.
          return previousPromise.then(both, both);
        }, function (error) {
          // Fixes https://github.com/meteor/meteor/issues/10182.
          clearPending();
          throw error;
        });
      });
    };

    install.Module = Module;

    function getOwn(obj, key) {
      return strictHasOwn(obj, key) && obj[key];
    }

    function isObject(value) {
      return value !== null && typeof value === "object";
    }

    function isFunction(value) {
      return typeof value === "function";
    }

    function isString(value) {
      return typeof value === "string";
    }

    function makeMissingError(id) {
      return new Error("Cannot find module '" + id + "'");
    }

    Module.prototype.resolve = function (id) {
      var file = fileResolve(filesByModuleId[this.id], id);
      if (file) return file.module.id;
      var error = makeMissingError(id);
      if (fallback && isFunction(fallback.resolve)) {
        return fallback.resolve(id, this.id, error);
      }
      throw error;
    };

    Module.prototype.require = function require(id) {
      var result = fileResolve(filesByModuleId[this.id], id);
      if (result) {
        return fileEvaluate(result, this);
      }

      var error = makeMissingError(id);

      if (isFunction(fallback)) {
        return fallback(id, // The missing module identifier.
        this.id, // ID of the parent module.
        error // The error we would have thrown.
        );
      }

      throw error;
    };

    function makeRequire(file) {
      var _module3 = file.module;

      function _require(id) {
        return _module3.require(id);
      }

      _require.extensions = fileGetExtensions(file).slice(0);

      _require.resolve = function resolve(id) {
        return _module3.resolve(id);
      };

      return _require;
    }

    // File objects represent either directories or modules that have been
    // installed. When a `File` respresents a directory, its `.contents`
    // property is an object containing the names of the files (or
    // directories) that it contains. When a `File` represents a module, its
    // `.contents` property is a function that can be invoked with the
    // appropriate `(require, exports, module)` arguments to evaluate the
    // module. If the `.contents` property is a string, that string will be
    // resolved as a module identifier, and the exports of the resulting
    // module will provide the exports of the original file. The `.parent`
    // property of a File is either a directory `File` or `null`. Note that
    // a child may claim another `File` as its parent even if the parent
    // does not have an entry for that child in its `.contents` object.
    // This is important for implementing anonymous files, and preventing
    // child modules from using `../relative/identifier` syntax to examine
    // unrelated modules.
    function File(moduleId, parent) {
      var file = this;

      // Link to the parent file.
      file.parent = parent = parent || null;

      // The module object for this File, which will eventually boast an
      // .exports property when/if the file is evaluated.
      file.module = new Module(moduleId);
      filesByModuleId[moduleId] = file;

      // The .contents of the file can be either (1) an object, if the file
      // represents a directory containing other files; (2) a factory
      // function, if the file represents a module that can be imported; (3)
      // a string, if the file is an alias for another file; or (4) null, if
      // the file's contents are not (yet) available.
      file.contents = null;

      // Set of module identifiers imported by this module. Note that this
      // set is not necessarily complete, so don't rely on it unless you
      // know what you're doing.
      file.deps = {};
    }

    function fileEvaluate(file, parentModule) {
      var _module4 = file.module;
      if (!strictHasOwn(_module4, "exports")) {
        var contents = file.contents;
        if (!contents) {
          // If this file was installed with array notation, and the array
          // contained one or more objects but no functions, then the combined
          // properties of the objects are treated as a temporary stub for
          // file.module.exports. This is particularly important for partial
          // package.json modules, so that the resolution logic can know the
          // value of the "main" and/or "browser" fields, at least, even if
          // the rest of the package.json file is not (yet) available.
          if (file.stub) {
            return file.stub;
          }

          throw makeMissingError(_module4.id);
        }

        if (parentModule) {
          _module4.parent = parentModule;
          var children = parentModule.children;
          if (Array.isArray(children)) {
            children.push(_module4);
          }
        }

        contents(makeRequire(file),
        // If the file had a .stub, reuse the same object for exports.
        _module4.exports = file.stub || {}, _module4, file.module.id, file.parent.module.id);

        _module4.loaded = true;
      }

      // The module.runModuleSetters method will be deprecated in favor of
      // just module.runSetters: https://github.com/benjamn/reify/pull/160
      var runSetters = _module4.runSetters || _module4.runModuleSetters;
      if (isFunction(runSetters)) {
        runSetters.call(_module4);
      }

      return _module4.exports;
    }

    function fileIsDirectory(file) {
      return file && isObject(file.contents);
    }

    function fileIsDynamic(file) {
      return file && file.contents === null;
    }

    function fileMergeContents(file, contents, options) {
      if (Array.isArray(contents)) {
        contents.forEach(function (item) {
          if (isString(item)) {
            file.deps[item] = file.module.id;
          } else if (isFunction(item)) {
            contents = item;
          } else if (isObject(item)) {
            file.stub = file.stub || {};
            each(item, function (value, key) {
              file.stub[key] = value;
            });
          }
        });

        if (!isFunction(contents)) {
          // If the array did not contain a function, merge nothing.
          contents = null;
        }
      } else if (!isFunction(contents) && !isString(contents) && !isObject(contents)) {
        // If contents is neither an array nor a function nor a string nor
        // an object, just give up and merge nothing.
        contents = null;
      }

      if (contents) {
        file.contents = file.contents || (isObject(contents) ? {} : contents);
        if (isObject(contents) && fileIsDirectory(file)) {
          each(contents, function (value, key) {
            if (key === "..") {
              child = file.parent;
            } else {
              var child = getOwn(file.contents, key);

              if (!child) {
                child = file.contents[key] = new File(file.module.id.replace(/\/*$/, "/") + key, file);

                child.options = options;
              }
            }

            fileMergeContents(child, value, options);
          });
        }
      }
    }

    function each(obj, callback, context) {
      Object.keys(obj).forEach(function (key) {
        callback.call(this, obj[key], key);
      }, context);
    }

    function fileGetExtensions(file) {
      return file.options && file.options.extensions || defaultExtensions;
    }

    function fileAppendIdPart(file, part, extensions) {
      // Always append relative to a directory.
      while (file && !fileIsDirectory(file)) {
        file = file.parent;
      }

      if (!file || !part || part === ".") {
        return file;
      }

      if (part === "..") {
        return file.parent;
      }

      var exactChild = getOwn(file.contents, part);

      // Only consider multiple file extensions if this part is the last
      // part of a module identifier and not equal to `.` or `..`, and there
      // was no exact match or the exact match was a directory.
      if (extensions && (!exactChild || fileIsDirectory(exactChild))) {
        for (var e = 0; e < extensions.length; ++e) {
          var child = getOwn(file.contents, part + extensions[e]);
          if (child && !fileIsDirectory(child)) {
            return child;
          }
        }
      }

      return exactChild;
    }

    function fileAppendId(file, id, extensions) {
      var parts = id.split("/");

      // Use `Array.prototype.every` to terminate iteration early if
      // `fileAppendIdPart` returns a falsy value.
      parts.every(function (part, i) {
        return file = i < parts.length - 1 ? fileAppendIdPart(file, part) : fileAppendIdPart(file, part, extensions);
      });

      return file;
    }

    function recordChild(parentModule, childFile) {
      var childModule = childFile && childFile.module;
      if (parentModule && childModule) {
        parentModule.childrenById[childModule.id] = childModule;
      }
    }

    function fileResolve(file, id, parentModule, seenDirFiles) {
      var parentModule = parentModule || file.module;
      var extensions = fileGetExtensions(file);

      file =
      // Absolute module identifiers (i.e. those that begin with a `/`
      // character) are interpreted relative to the root directory, which
      // is a slight deviation from Node, which has access to the entire
      // file system.
      id.charAt(0) === "/" ? fileAppendId(root, id, extensions) :
      // Relative module identifiers are interpreted relative to the
      // current file, naturally.
      id.charAt(0) === "." ? fileAppendId(file, id, extensions) :
      // Top-level module identifiers are interpreted as referring to
      // packages in `node_modules` directories.
      nodeModulesLookup(file, id, extensions);

      // If the identifier resolves to a directory, we use the same logic as
      // Node to find an `index.js` or `package.json` file to evaluate.
      while (fileIsDirectory(file)) {
        seenDirFiles = seenDirFiles || [];

        // If the "main" field of a `package.json` file resolves to a
        // directory we've already considered, then we should not attempt to
        // read the same `package.json` file again. Using an array as a set
        // is acceptable here because the number of directories to consider
        // is rarely greater than 1 or 2. Also, using indexOf allows us to
        // store File objects instead of strings.
        if (seenDirFiles.indexOf(file) < 0) {
          seenDirFiles.push(file);

          var pkgJsonFile = fileAppendIdPart(file, "package.json"),
              main;
          var pkg = pkgJsonFile && fileEvaluate(pkgJsonFile, parentModule);
          if (pkg && mainFields.some(function (name) {
            return isString(main = pkg[name]);
          })) {
            // The "main" field of package.json does not have to begin with
            // ./ to be considered relative, so first we try simply
            // appending it to the directory path before falling back to a
            // full fileResolve, which might return a package from a
            // node_modules directory.
            var mainFile = fileAppendId(file, main, extensions) || fileResolve(file, main, parentModule, seenDirFiles);

            if (mainFile) {
              file = mainFile;
              recordChild(parentModule, pkgJsonFile);
              // The fileAppendId call above may have returned a directory,
              // so continue the loop to make sure we resolve it to a
              // non-directory file.
              continue;
            }
          }
        }

        // If we didn't find a `package.json` file, or it didn't have a
        // resolvable `.main` property, the only possibility left to
        // consider is that this directory contains an `index.js` module.
        // This assignment almost always terminates the while loop, because
        // there's very little chance `fileIsDirectory(file)` will be true
        // for `fileAppendIdPart(file, "index", extensions)`. However, in
        // principle it is remotely possible that a file called `index.js`
        // could be a directory instead of a file.
        file = fileAppendIdPart(file, "index", extensions);
      }

      if (file && isString(file.contents)) {
        file = fileResolve(file, file.contents, parentModule, seenDirFiles);
      }

      recordChild(parentModule, file);

      return file;
    };

    function nodeModulesLookup(file, id, extensions) {
      for (var resolved; file && !resolved; file = file.parent) {
        resolved = fileIsDirectory(file) && fileAppendId(file, "node_modules/" + id, extensions);
      }
      return resolved;
    }

    return install;
  };

  if (typeof exports === "object") {
    exports.makeInstaller = makeInstaller;
  }

  ///////////////////////////////////////////////////////////////////////////////


  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/client.js                                        //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    meteorInstall = makeInstaller({
      // On the client, make package resolution prefer the "browser" field of
      // package.json files to the "main" field.
      browser: true,

      fallback: function (id, parentId, error) {
        if (id && id.startsWith('meteor/')) {
          var packageName = id.split('/', 2)[1];
          throw new Error('Cannot find package "' + packageName + '". ' + 'Try "meteor add ' + packageName + '".');
        }

        throw error;
      }
    });

    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/profile.js                                       //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    if (typeof Profile === "function" && process.env.METEOR_PROFILE) {
      var Mp = meteorInstall.Module.prototype;
      Mp.require = Profile(function (id) {
        return "require(" + JSON.stringify(id) + ")";
      }, Mp.require);
    }

    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("modules-runtime", {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package['modules-runtime'].meteorInstall;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "modules": { "client.js": function (_require, _exports) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                  //
            // packages/modules/client.js                                                                       //
            //                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require("./install-packages.js");
            _require("./stubs.js");
            _require("./process.js");
            _require("./reify.js");

            _exports.addStyles = _require("./css").addStyles;

            //////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "css.js": function (_require3, _exports3) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                  //
            // packages/modules/css.js                                                                          //
            //                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var doc = document;
            var head = doc.getElementsByTagName("head").item(0);

            _exports3.addStyles = function (css) {
              var style = doc.createElement("style");

              style.setAttribute("type", "text/css");

              // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx
              var internetExplorerSheetObject = style.sheet || // Edge/IE11.
              style.styleSheet; // Older IEs.

              if (internetExplorerSheetObject) {
                internetExplorerSheetObject.cssText = css;
              } else {
                style.appendChild(doc.createTextNode(css));
              }

              return head.appendChild(style);
            };

            //////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "install-packages.js": function (_require4, _exports4, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                  //
            // packages/modules/install-packages.js                                                             //
            //                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            function install(name, mainModule) {
              var meteorDir = {};

              // Given a package name <name>, install a stub module in the
              // /node_modules/meteor directory called <name>.js, so that
              // require.resolve("meteor/<name>") will always return
              // /node_modules/meteor/<name>.js instead of something like
              // /node_modules/meteor/<name>/index.js, in the rare but possible event
              // that the package contains a file called index.js (#6590).

              if (typeof mainModule === "string") {
                // Set up an alias from /node_modules/meteor/<package>.js to the main
                // module, e.g. meteor/<package>/index.js.
                meteorDir[name + ".js"] = mainModule;
              } else {
                // back compat with old Meteor packages
                meteorDir[name + ".js"] = function (r, e, _module2) {
                  _module2.exports = Package[name];
                };
              }

              meteorInstall({
                node_modules: {
                  meteor: meteorDir
                }
              });
            }

            // This file will be modified during computeJsOutputFilesMap to include
            // install(<name>) calls for every Meteor package.

            install("meteor");
            install("meteor-base");
            install("modules-runtime");
            install("modules", "meteor/modules/client.js");
            install("modern-browsers");
            install("babel-compiler");
            install("ecmascript");
            install("ecmascript-runtime");
            install("babel-runtime", "meteor/babel-runtime/babel-runtime.js");
            install("promise", "meteor/promise/client.js");
            install("fetch", "meteor/fetch/modern.js");
            install("dynamic-import", "meteor/dynamic-import/client.js");
            install("es5-shim");
            install("ecmascript-runtime-client", "meteor/ecmascript-runtime-client/modern.js");
            install("base64", "meteor/base64/base64.js");
            install("ejson", "meteor/ejson/ejson.js");
            install("diff-sequence", "meteor/diff-sequence/diff.js");
            install("geojson-utils", "meteor/geojson-utils/main.js");
            install("id-map", "meteor/id-map/id-map.js");
            install("random");
            install("mongo-id", "meteor/mongo-id/id.js");
            install("ordered-dict", "meteor/ordered-dict/ordered_dict.js");
            install("tracker");
            install("minimongo", "meteor/minimongo/minimongo_client.js");
            install("check", "meteor/check/match.js");
            install("retry", "meteor/retry/retry.js");
            install("callback-hook", "meteor/callback-hook/hook.js");
            install("ddp-common");
            install("reload", "meteor/reload/reload.js");
            install("socket-stream-client", "meteor/socket-stream-client/browser.js");
            install("ddp-client", "meteor/ddp-client/client/client.js");
            install("ddp");
            install("ddp-server");
            install("allow-deny");
            install("mongo-dev-server");
            install("mongo");
            install("cfs:standard-packages");
            install("deps");
            install("underscore");
            install("cfs:base-package");
            install("livedata");
            install("mongo-livedata");
            install("raix:eventemitter");
            install("cfs:storage-adapter");
            install("cfs:gridfs");
            install("tmeasday:check-npm-versions", "meteor/tmeasday:check-npm-versions/check-npm-versions.js");
            install("react-meteor-data", "meteor/react-meteor-data/react-meteor-data.jsx");
            install("webapp", "meteor/webapp/webapp_client.js");
            install("hot-code-push");
            install("url", "meteor/url/url_client.js");
            install("http", "meteor/http/httpcall_client.js");
            install("cfs:data-man");
            install("cfs:file");
            install("cfs:tempstore");
            install("cfs:http-methods");
            install("cfs:http-publish");
            install("cfs:access-point");
            install("cfs:reactive-property");
            install("cfs:reactive-list");
            install("cfs:power-queue");
            install("cfs:upload-http");
            install("cfs:collection");
            install("cfs:collection-filters");
            install("cfs:worker");
            install("autoupdate", "meteor/autoupdate/autoupdate_client.js");

            //////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "process.js": function (_require5, _exports5, _module3) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                  //
            // packages/modules/process.js                                                                      //
            //                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            if (!global.process) {
              try {
                // The application can run `npm install process` to provide its own
                // process stub; otherwise this module will provide a partial stub.
                global.process = _require5("process");
              } catch (missing) {
                global.process = {};
              }
            }

            var proc = global.process;

            if (Meteor.isServer) {
              // Make require("process") work on the server in all versions of Node.
              meteorInstall({
                node_modules: {
                  "process.js": function (r, e, _module4) {
                    _module4.exports = proc;
                  }
                }
              });
            } else {
              proc.platform = "browser";
              proc.nextTick = proc.nextTick || Meteor._setImmediate;
            }

            if (typeof proc.env !== "object") {
              proc.env = {};
            }

            var hasOwn = Object.prototype.hasOwnProperty;
            for (var key in meteorEnv) {
              if (hasOwn.call(meteorEnv, key)) {
                proc.env[key] = meteorEnv[key];
              }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "reify.js": function (_require6, _exports6, _module5) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                  //
            // packages/modules/reify.js                                                                        //
            //                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require6("reify/lib/runtime").enable(_module5.constructor.prototype);

            //////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stubs.js": function (_require7) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                  //
            // packages/modules/stubs.js                                                                        //
            //                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var haveStubs = false;
            try {
              _require7.resolve("meteor-node-stubs");
              haveStubs = true;
            } catch (noStubs) {}

            if (haveStubs) {
              // When meteor-node-stubs is installed in the application's root
              // node_modules directory, requiring it here installs aliases for stubs
              // for all Node built-in modules, such as fs, util, and http.
              require("meteor-node-stubs");
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "reify": { "lib": { "runtime": { "index.js": function (_require8, _exports7, _module6) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var utils = _require8("./utils.js");
                    var Entry = _require8("./entry.js");

                    // The exports.enable method can be used to enable the Reify runtime for
                    // specific module objects, or for Module.prototype (where implemented),
                    // to make the runtime available throughout the entire module system.
                    _exports7.enable = function (mod) {
                      if (mod.link !== moduleLink) {
                        mod.link = moduleLink;
                        mod.watch = moduleWatch;
                        mod["export"] = moduleExport;
                        mod.exportDefault = moduleExportDefault;
                        mod.exportAs = moduleExportAs;
                        mod.runSetters = runSetters;

                        // Legacy shorthand for mod.exportAs("*").
                        mod.makeNsSetter = moduleMakeNsSetter;

                        return true;
                      }

                      return false;
                    };

                    // Shorthand for module.watch(require(id), setters) that accepts just a
                    // string module identifier `id` rather than the exports object for the
                    // required module. In the future, this API will replace module.watch, and
                    // will allow for creating Entry objects before module evaluation, which
                    // will solve some problems with import cycles and hoisted declarations.
                    function moduleLink(id, setters, key) {
                      return moduleWatch.call(this, this.require(id), setters, key);
                    }

                    // If key is provided, it will be used to identify the given setters so
                    // that they can be replaced if module.watch is called again with the same
                    // key. This avoids potential memory leaks from import declarations inside
                    // loops. The compiler generates these keys automatically (and
                    // deterministically) when compiling nested import declarations.
                    function moduleWatch(exported, setters, key) {
                      utils.setESModule(this.exports);
                      Entry.getOrCreate(this.exports, this);

                      if (utils.isObject(setters)) {
                        Entry.getOrCreate(exported).addSetters(this, setters, key);
                      }
                    }

                    // Register getter functions for local variables in the scope of an export
                    // statement. Pass true as the second argument to indicate that the getter
                    // functions always return the same values.
                    function moduleExport(getters, constant) {
                      utils.setESModule(this.exports);
                      var entry = Entry.getOrCreate(this.exports, this);
                      entry.addGetters(getters, constant);
                      if (this.loaded) {
                        // If the module has already been evaluated, then we need to trigger
                        // another round of entry.runSetters calls, which begins by calling
                        // entry.runModuleGetters(module).
                        entry.runSetters();
                      }
                    }

                    // Register a getter function that always returns the given value.
                    function moduleExportDefault(value) {
                      return this["export"]({
                        "default": function () {
                          return value;
                        }
                      }, true);
                    }

                    // Returns a function suitable for passing as a setter callback to
                    // module.watch or module.link. If name is an identifier, calling the
                    // function will set the export of that name to the given value. If the
                    // name is "*", all properties of the value object will be exported by
                    // name, except for "default" (use "*+" instead of "*" to include it).
                    // Discussion of why the "default" property is skipped:
                    // https://github.com/tc39/ecma262/issues/948
                    function moduleExportAs(name) {
                      var entry = this;
                      var includeDefault = name === "*+";
                      return function (value) {
                        if (name === "*" || name === "*+") {
                          Object.keys(value).forEach(function (key) {
                            if (includeDefault || key !== "default") {
                              utils.copyKey(key, entry.exports, value);
                            }
                          });
                        } else {
                          entry.exports[name] = value;
                        }
                      };
                    }

                    // Platform-specific code should find a way to call this method whenever
                    // the module system is about to return module.exports from require. This
                    // might happen more than once per module, in case of dependency cycles,
                    // so we want Module.prototype.runSetters to run each time.
                    function runSetters(valueToPassThrough) {
                      var entry = Entry.get(this.exports);
                      if (entry !== null) {
                        entry.runSetters();
                      }

                      if (this.loaded) {
                        // If this module has finished loading, then we must create an Entry
                        // object here, so that we can add this module to entry.ownerModules
                        // by passing it as the second argument to Entry.getOrCreate.
                        Entry.getOrCreate(this.exports, this);
                      }

                      // Assignments to exported local variables get wrapped with calls to
                      // module.runSetters, so module.runSetters returns the
                      // valueToPassThrough parameter to allow the value of the original
                      // expression to pass through. For example,
                      //
                      //   export var a = 1;
                      //   console.log(a += 3);
                      //
                      // becomes
                      //
                      //   module.export("a", () => a);
                      //   var a = 1;
                      //   console.log(module.runSetters(a += 3));
                      //
                      // This ensures module.runSetters runs immediately after the assignment,
                      // and does not interfere with the larger computation.
                      return valueToPassThrough;
                    }

                    // Legacy helper that returns a function that takes a namespace object and
                    // copies the properties of the namespace to module.exports, excluding any
                    // "default" property (unless includeDefault is true), which is useful for
                    // implementing `export * from "module"`.
                    //
                    // Instead of using this helper like so:
                    //
                    //   module.link(id, { "*": module.makeNsSetter() });
                    //
                    // non-legacy code should simply use a string-valued setter:
                    //
                    //   module.link(id, { "*": "*" });
                    //
                    // or, to include the "default" property:
                    //
                    //   module.link(id, { "*": "*+" });
                    //
                    // This helper may be removed in a future version of Reify.
                    function moduleMakeNsSetter(includeDefault) {
                      return this.exportAs(includeDefault ? "*+" : "*");
                    }

                    //////////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "utils.js": function (_require9, _exports8, _module7) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var useSetPrototypeOf = typeof Object.setPrototypeOf === "function";
                    var useSymbol = typeof Symbol === "function";

                    var esStrKey = "__esModule";
                    var esSymKey = useSymbol ? Symbol.for(esStrKey) : null;
                    var useToStringTag = useSymbol && typeof Symbol.toStringTag === "symbol";
                    var useGetOwnPropDesc = typeof Object.getOwnPropertyDescriptor === "function";
                    var hasOwn = Object.prototype.hasOwnProperty;

                    function copyKey(key, target, source) {
                      if (useGetOwnPropDesc) {
                        var desc = Object.getOwnPropertyDescriptor(source, key);
                        desc.configurable = true; // Allow redefinition.
                        Object.defineProperty(target, key, desc);
                      } else {
                        target[key] = source[key];
                      }
                    }

                    _exports8.copyKey = copyKey;

                    // Returns obj[key] unless that property is defined by a getter function,
                    // in which case the getter function is returned.
                    _exports8.valueOrGetter = function (obj, key) {
                      if (useGetOwnPropDesc && hasOwn.call(obj, key)) {
                        var desc = Object.getOwnPropertyDescriptor(obj, key);
                        if (typeof desc.get === "function") {
                          return desc.get;
                        }
                      }

                      return obj[key];
                    };

                    function getESModule(exported) {
                      if (isObjectLike(exported)) {
                        if (useSymbol && hasOwn.call(exported, esSymKey)) {
                          return !!exported[esSymKey];
                        }

                        if (hasOwn.call(exported, esStrKey)) {
                          return !!exported[esStrKey];
                        }
                      }

                      return false;
                    }

                    _exports8.getESModule = getESModule;

                    function setESModule(exported) {
                      if (isObjectLike(exported)) {
                        if (useSymbol) {
                          exported[esSymKey] = true;
                        } else if (!exported[esStrKey]) {
                          // Other module runtime systems may set exported.__esModule such
                          // that it can't be redefined, so we call Object.defineProperty only
                          // when exported.__esModule is not already true.
                          Object.defineProperty(exported, esStrKey, {
                            configurable: true,
                            enumerable: false,
                            value: true,
                            writable: false
                          });
                        }
                      }
                    }

                    _exports8.setESModule = setESModule;

                    function isObject(value) {
                      return typeof value === "object" && value !== null;
                    }

                    _exports8.isObject = isObject;

                    function isObjectLike(value) {
                      var type = typeof value;
                      return type === "function" || type === "object" && value !== null;
                    }

                    _exports8.isObjectLike = isObjectLike;

                    function createNamespace() {
                      var namespace = Object.create(null);

                      if (useToStringTag) {
                        Object.defineProperty(namespace, Symbol.toStringTag, {
                          value: "Module",
                          configurable: false,
                          enumerable: false,
                          writable: false
                        });
                      }

                      setESModule(namespace);

                      return namespace;
                    }

                    _exports8.createNamespace = createNamespace;

                    function setPrototypeOf(object, proto) {
                      if (useSetPrototypeOf) {
                        Object.setPrototypeOf(object, proto);
                      } else {
                        object.__proto__ = proto;
                      }
                      return object;
                    }

                    _exports8.setPrototypeOf = setPrototypeOf;

                    //////////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "entry.js": function (_require10, _exports9, _module8) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var utils = _require10("./utils.js");

                    var GETTER_ERROR = {};
                    var NAN = {};
                    var UNDEFINED = {};
                    var hasOwn = Object.prototype.hasOwnProperty;
                    var keySalt = 0;

                    function Entry(exported) {
                      // The module.exports of the module this Entry is managing.
                      this.exports = exported;
                      // Getters for local variables exported from the managed module.
                      this.getters = Object.create(null);
                      // Setters for assigning to local variables in parent modules.
                      this.setters = Object.create(null);
                      // The normalized namespace object that importers receive when they use
                      // `import * as namespace from "..."` syntax.
                      this.namespace = utils.createNamespace();
                    }

                    var Ep = utils.setPrototypeOf(Entry.prototype, null);

                    var weakEntryMap = typeof WeakMap === "function" ? new WeakMap() : new function FakeWeakMap() {
                      // A barely functional WeakMap polyfill, just in case. This
                      // implementation needs to be logically correct only in the specific
                      // ways that the Entry class uses it. It isn't even "weak" in the
                      // garbage-collection sense of the word, but that's fine.
                      var keys = [];
                      var values = [];

                      this.get = function (obj) {
                        var index = keys.indexOf(obj);
                        if (index >= 0) {
                          return values[index];
                        }
                      };

                      this.set = function (obj, value) {
                        var index = keys.indexOf(obj);
                        if (index >= 0) {
                          values[index] = value;
                        } else {
                          keys.push(obj);
                          values.push(value);
                        }
                      };
                    }();

                    Entry.get = function (exported) {
                      if (utils.isObjectLike(exported)) {
                        var entry = weakEntryMap.get(exported);
                        if (entry !== void 0) {
                          return entry;
                        }
                      }
                      return null;
                    };

                    Entry.getOrCreate = function (exported, mod) {
                      if (!utils.isObjectLike(exported)) {
                        // In case the child module modified module.exports, create a
                        // temporary Entry object so that we can call the entry.addSetters
                        // method once, which will trigger entry.runSetters(names).
                        return new Entry(exported);
                      }

                      var entry = weakEntryMap.get(exported);
                      if (entry !== void 0) {
                        return entry;
                      }

                      var entry = new Entry(exported);
                      weakEntryMap.set(exported, entry);
                      return entry;
                    };

                    function safeKeys(obj) {
                      var keys = Object.keys(obj);
                      var esModuleIndex = keys.indexOf("__esModule");
                      if (esModuleIndex >= 0) {
                        keys.splice(esModuleIndex, 1);
                      }
                      return keys;
                    }

                    Ep.addGetters = function (getters, constant) {
                      var names = safeKeys(getters);
                      var nameCount = names.length;
                      constant = !!constant;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var getter = getters[name];

                        if (typeof getter === "function" &&
                        // Should this throw if this.getters[name] exists?
                        !(name in this.getters)) {
                          this.getters[name] = getter;
                          getter.constant = constant;
                          getter.runCount = 0;
                        }
                      }
                    };

                    Ep.addSetters = function (parent, setters, key) {
                      var names = safeKeys(setters);
                      var nameCount = names.length;

                      if (!nameCount) {
                        return;
                      }

                      // If no key is provided, make a unique key. Otherwise, make sure the key is
                      // distinct from keys provided by other parent modules.
                      key = key === void 0 ? makeUniqueKey() : parent.id + ":" + key;

                      var entry = this;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var setter = normalizeSetterValue(parent, setters[name]);

                        if (typeof setter === "function") {
                          setter.parent = parent;
                          if (!(name in entry.setters)) {
                            entry.setters[name] = Object.create(null);
                          }
                          entry.setters[name][key] = setter;
                        }
                      }

                      entry.runSetters(names);
                    };

                    function normalizeSetterValue(_module9, setter) {
                      if (typeof setter === "function") {
                        return setter;
                      }

                      if (typeof setter === "string") {
                        // If the value of the setter property is a string, the setter will
                        // re-export the imported value using that string as the name of the
                        // exported value. If the string is "*", all properties of the value
                        // object will be re-exported as individual exports, except for the
                        // "default" property (use "*+" instead of "*" to include it).
                        return _module9.exportAs(setter);
                      }

                      if (Array.isArray(setter)) {
                        switch (setter.length) {
                          case 0:
                            return null;
                          case 1:
                            return normalizeSetterValue(_module9, setter[0]);
                          default:
                            var setterFns = setter.map(function (elem) {
                              return normalizeSetterValue(_module9, elem);
                            });

                            // Return a combined function that calls all of the nested setter
                            // functions with the same value.
                            return function (value) {
                              setterFns.forEach(function (fn) {
                                fn(value);
                              });
                            };
                        }
                      }

                      return null;
                    }

                    Ep.runGetters = function (names) {
                      // Before running getters, copy anything added to the exports object
                      // over to the namespace. Values returned by getters take precedence
                      // over these values, but we don't want to miss anything.
                      syncExportsToNamespace(this, names);

                      if (names === void 0 || names.indexOf("*") >= 0) {
                        names = Object.keys(this.getters);
                      }

                      var nameCount = names.length;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var value = runGetter(this, name);

                        // If the getter is run without error, update both entry.namespace and
                        // module.exports with the current value so that CommonJS require
                        // calls remain consistent with module.watch.
                        if (value !== GETTER_ERROR) {
                          this.namespace[name] = value;
                          this.exports[name] = value;
                        }
                      }
                    };

                    function syncExportsToNamespace(entry, names) {
                      var setDefault = false;

                      if (!utils.getESModule(entry.exports)) {
                        // If the module entry is managing overrides module.exports, that
                        // value should be exposed as the .default property of the namespace,
                        // unless module.exports is marked as an ECMASCript module.
                        entry.namespace.default = entry.exports;
                        setDefault = true;
                      }

                      if (!utils.isObjectLike(entry.exports)) {
                        return;
                      }

                      if (names === void 0 || names.indexOf("*") >= 0) {
                        names = Object.keys(entry.exports);
                      }

                      names.forEach(function (key) {
                        // Don't set any properties for which a getter function exists in
                        // entry.getters, don't accidentally override entry.namespace.default,
                        // and only copy own properties from entry.exports.
                        if (!hasOwn.call(entry.getters, key) && !(setDefault && key === "default") && hasOwn.call(entry.exports, key)) {
                          utils.copyKey(key, entry.namespace, entry.exports);
                        }
                      });
                    }

                    // Called whenever module.exports might have changed, to trigger any
                    // setters associated with the newly exported values. The names parameter
                    // is optional; without it, all getters and setters will run.
                    Ep.runSetters = function (names) {
                      // Make sure entry.namespace and module.exports are up to date before we
                      // call getExportByName(entry, name).
                      this.runGetters(names);

                      // Lazily-initialized object mapping parent module identifiers to parent
                      // module objects whose setters we might need to run.
                      var parents;

                      forEachSetter(this, names, function (setter, name, value) {
                        if (parents === void 0) {
                          parents = Object.create(null);
                        }
                        parents[setter.parent.id] = setter.parent;

                        // The param order for setters is `value` then `name` because the `name`
                        // param is only used by namespace exports.
                        setter(value, name);
                      });

                      if (!parents) {
                        return;
                      }

                      // If any of the setters updated the module.exports of a parent module,
                      // or updated local variables that are exported by that parent module,
                      // then we must re-run any setters registered by that parent module.
                      var parentIDs = Object.keys(parents);
                      var parentIDCount = parentIDs.length;

                      for (var i = 0; i < parentIDCount; ++i) {
                        // What happens if parents[parentIDs[id]] === module, or if
                        // longer cycles exist in the parent chain? Thanks to our setter.last
                        // bookkeeping above, the runSetters broadcast will only proceed
                        // as far as there are any actual changes to report.
                        var parent = parents[parentIDs[i]];
                        var parentEntry = Entry.get(parent.exports);
                        if (parentEntry) {
                          parentEntry.runSetters();
                        }
                      }
                    };

                    function callSetterIfNecessary(setter, name, value, callback) {
                      if (name === "__esModule") {
                        // Ignore setters asking for module.exports.__esModule.
                        return;
                      }

                      var shouldCall = false;

                      if (setter.last === void 0) {
                        setter.last = Object.create(null);
                        // Always call the setter if it has never been called before.
                        shouldCall = true;
                      }

                      function changed(name, value) {
                        var valueToCompare = value;
                        if (valueToCompare !== valueToCompare) {
                          valueToCompare = NAN;
                        } else if (valueToCompare === void 0) {
                          valueToCompare = UNDEFINED;
                        }

                        if (setter.last[name] === valueToCompare) {
                          return false;
                        }

                        setter.last[name] = valueToCompare;
                        return true;
                      }

                      if (name === "*") {
                        var keys = safeKeys(value);
                        var keyCount = keys.length;
                        for (var i = 0; i < keyCount; ++i) {
                          var key = keys[i];
                          // Evaluating value[key] is risky because the property might be
                          // defined by a getter function that logs a deprecation warning (or
                          // worse) when evaluated. For example, Node uses this trick to
                          // display a deprecation warning whenever crypto.createCredentials
                          // is accessed. Fortunately, when value[key] is defined by a getter
                          // function, it's enough to check whether the getter function itself
                          // has changed, since we are careful elsewhere to preserve getters
                          // rather than prematurely evaluating them.
                          if (changed(key, utils.valueOrGetter(value, key))) {
                            shouldCall = true;
                          }
                        }
                      } else if (changed(name, value)) {
                        shouldCall = true;
                      }

                      if (shouldCall) {
                        // Only invoke the callback if we have not called this setter
                        // (with a value of this name) before, or the current value is
                        // different from the last value we passed to this setter.
                        return callback(setter, name, value);
                      }
                    }

                    // Invoke the given callback once for every (setter, name, value) that needs to
                    // be called. Note that forEachSetter does not call any setters itself, only the
                    // given callback.
                    function forEachSetter(entry, names, callback) {
                      var needToCheckNames = true;

                      if (names === void 0) {
                        names = Object.keys(entry.setters);
                        needToCheckNames = false;
                      }

                      var nameCount = names.length;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];

                        if (needToCheckNames && !hasOwn.call(entry.setters, name)) {
                          continue;
                        }

                        var setters = entry.setters[name];
                        var keys = Object.keys(setters);
                        var keyCount = keys.length;

                        for (var j = 0; j < keyCount; ++j) {
                          var key = keys[j];
                          var value = getExportByName(entry, name);

                          callSetterIfNecessary(setters[key], name, value, callback);

                          var getter = entry.getters[name];
                          if (typeof getter === "function" &&
                          // Sometimes a getter function will throw because it's called
                          // before the variable it's supposed to return has been
                          // initialized, so we need to know that the getter function has
                          // run to completion at least once.
                          getter.runCount > 0 && getter.constant) {
                            // If we happen to know that this getter function has run
                            // successfully, and will never return a different value, then we
                            // can forget the corresponding setter, because we've already
                            // reported that constant value. Note that we can't forget the
                            // getter, because we need to remember the original value in case
                            // anyone tampers with entry.exports[name].
                            delete setters[key];
                          }
                        }
                      }
                    }

                    function getExportByName(entry, name) {
                      if (name === "*") {
                        return entry.namespace;
                      }

                      if (hasOwn.call(entry.namespace, name)) {
                        return entry.namespace[name];
                      }

                      var exported = entry.exports;

                      if (name === "default" && !(utils.getESModule(exported) && "default" in exported)) {
                        return exported;
                      }

                      if (exported == null) {
                        return;
                      }

                      return exported[name];
                    }

                    function makeUniqueKey() {
                      return Math.random().toString(36)
                      // Add an incrementing salt to help track key ordering and also
                      // absolutely guarantee we never return the same key twice.
                      .replace("0.", ++keySalt + "$");
                    }

                    function runGetter(entry, name) {
                      var getter = entry.getters[name];
                      try {
                        var result = getter();
                        ++getter.runCount;
                        return result;
                      } catch (e) {}
                      return GETTER_ERROR;
                    }

                    _module8.exports = Entry;

                    //////////////////////////////////////////////////////////////////////////////////////////////////////
                  } } } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/modules/client.js");

  /* Exports */
  Package._define("modules", _exports2, {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("modern-browsers");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("babel-compiler");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ecmascript");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ecmascript-runtime");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var meteorBabelHelpers;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "babel-runtime": { "babel-runtime.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////
            //                                                                                 //
            // packages/babel-runtime/babel-runtime.js                                         //
            //                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////
            //
            _exports.meteorBabelHelpers = _require("meteor-babel-helpers");

            try {
              var babelRuntimeVersion = require("@babel/runtime/package.json").version;
            } catch (e) {
              throw new Error(["", "The @babel/runtime npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", "", "  meteor npm install --save @babel/runtime", ""].join("\n"));
            }

            if (parseInt(babelRuntimeVersion, 10) < 7 || babelRuntimeVersion.indexOf("7.0.0-beta.") === 0 && parseInt(babelRuntimeVersion.split(".").pop(), 10) < 56) {
              console.error(["The version of @babel/runtime installed in your node_modules directory ", "(" + babelRuntimeVersion + ") is out of date. Please upgrade it by running ", "", "  meteor npm install --save @babel/runtime@latest", "", "in your application directory.", ""].join("\n"));
            }

            /////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-babel-helpers": { "package.json": function (_require3, _exports3, _module) {

                /////////////////////////////////////////////////////////////////////////////////////
                //                                                                                 //
                // node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/package.jso //
                //                                                                                 //
                /////////////////////////////////////////////////////////////////////////////////////
                //
                _module.exports = {
                  "name": "meteor-babel-helpers",
                  "version": "0.0.3",
                  "main": "index.js"
                };

                /////////////////////////////////////////////////////////////////////////////////////
              }, "index.js": function (_require4, _exports4, _module2) {

                /////////////////////////////////////////////////////////////////////////////////////
                //                                                                                 //
                // node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/index.js    //
                //                                                                                 //
                /////////////////////////////////////////////////////////////////////////////////////
                //
                function canDefineNonEnumerableProperties() {
                  var testObj = {};
                  var testPropName = "t";

                  try {
                    Object.defineProperty(testObj, testPropName, {
                      enumerable: false,
                      value: testObj
                    });

                    for (var k in testObj) {
                      if (k === testPropName) {
                        return false;
                      }
                    }
                  } catch (e) {
                    return false;
                  }

                  return testObj[testPropName] === testObj;
                }

                function sanitizeEasy(value) {
                  return value;
                }

                function sanitizeHard(obj) {
                  if (Array.isArray(obj)) {
                    var newObj = {};
                    var keys = Object.keys(obj);
                    var keyCount = keys.length;
                    for (var i = 0; i < keyCount; ++i) {
                      var key = keys[i];
                      newObj[key] = obj[key];
                    }
                    return newObj;
                  }

                  return obj;
                }

                meteorBabelHelpers = _module2.exports = {
                  // Meteor-specific runtime helper for wrapping the object of for-in
                  // loops, so that inherited Array methods defined by es5-shim can be
                  // ignored in browsers where they cannot be defined as non-enumerable.
                  sanitizeForInObject: canDefineNonEnumerableProperties() ? sanitizeEasy : sanitizeHard,

                  // Exposed so that we can test sanitizeForInObject in environments that
                  // support defining non-enumerable properties.
                  _sanitizeForInObjectHard: sanitizeHard
                };

                /////////////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/babel-runtime/babel-runtime.js");

  /* Exports */
  Package._define("babel-runtime", _exports2, {
    meteorBabelHelpers: meteorBabelHelpers
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var Promise;

  var _require = meteorInstall({ "node_modules": { "meteor": { "promise": { "modern.js": function () {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/modern.js                                              //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            // Initialize the package-scoped Promise variable with global.Promise in
            // all environments, even if it's not defined.
            Promise = global.Promise;

            /////////////////////////////////////////////////////////////////////////////
          }, "client.js": function (_require2) {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/client.js                                              //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            _require2("./extensions.js");
            _require2("meteor-promise").makeCompatible(Promise);

            /////////////////////////////////////////////////////////////////////////////
          }, "extensions.js": function () {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/extensions.js                                          //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            var proto = Promise.prototype;
            var hasOwn = Object.prototype.hasOwnProperty;

            proto.done = function (onFulfilled, onRejected) {
              var self = this;

              if (arguments.length > 0) {
                self = this.then.apply(this, arguments);
              }

              self.then(null, function (err) {
                Meteor._setImmediate(function () {
                  throw err;
                });
              });
            };

            if (!hasOwn.call(proto, "finally")) {
              proto["finally"] = function (onFinally) {
                var threw = false,
                    result;
                return this.then(function (value) {
                  result = value;
                  // Most implementations of Promise.prototype.finally call
                  // Promise.resolve(onFinally()) (or this.constructor.resolve or even
                  // this.constructor[Symbol.species].resolve, depending on how spec
                  // compliant they're trying to be), but this implementation simply
                  // relies on the standard Promise behavior of resolving any value
                  // returned from a .then callback function.
                  return onFinally();
                }, function (error) {
                  // Make the final .then callback (below) re-throw the error instead
                  // of returning it.
                  threw = true;
                  result = error;
                  return onFinally();
                }).then(function () {
                  if (threw) throw result;
                  return result;
                });
              };
            }

            /////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-promise": { "package.json": function (_require3, _exports2, _module) {

                /////////////////////////////////////////////////////////////////////////////
                //                                                                         //
                // node_modules/meteor/promise/node_modules/meteor-promise/package.json    //
                //                                                                         //
                /////////////////////////////////////////////////////////////////////////////
                //
                _module.exports = {
                  "name": "meteor-promise",
                  "version": "0.8.6",
                  "browser": "promise_client.js",
                  "main": "promise_server.js"
                };

                /////////////////////////////////////////////////////////////////////////////
              }, "promise_client.js": function (_require4, _exports3) {

                /////////////////////////////////////////////////////////////////////////////
                //                                                                         //
                // node_modules/meteor/promise/node_modules/meteor-promise/promise_client. //
                //                                                                         //
                /////////////////////////////////////////////////////////////////////////////
                //
                _exports3.makeCompatible = function (Promise) {
                  var es6PromiseThen = Promise.prototype.then;

                  Promise.prototype.then = function (onResolved, onRejected) {
                    if (typeof Meteor === "object" && typeof Meteor.bindEnvironment === "function") {
                      return es6PromiseThen.call(this, onResolved && Meteor.bindEnvironment(onResolved, raise), onRejected && Meteor.bindEnvironment(onRejected, raise));
                    }

                    return es6PromiseThen.call(this, onResolved, onRejected);
                  };
                };

                function raise(exception) {
                  throw exception;
                }

                /////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/promise/modern.js");
  var _exports = _require("/node_modules/meteor/promise/client.js");

  /* Exports */
  Package._define("promise", _exports, {
    Promise: Promise
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var fetch;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "fetch": { "modern.js": function (_require, _exports) {

            ///////////////////////////////////////////////////////////////////////
            //                                                                   //
            // packages/fetch/modern.js                                          //
            //                                                                   //
            ///////////////////////////////////////////////////////////////////////
            //
            _exports.fetch = global.fetch;
            _exports.Headers = global.Headers;
            _exports.Request = global.Request;
            _exports.Response = global.Response;

            ///////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/fetch/modern.js");

  /* Exports */
  Package._define("fetch", _exports2, {
    fetch: fetch
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;
  var fetch = Package.fetch.fetch;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "dynamic-import": { "client.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/client.js                                           //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var Module = _module.constructor;
            var cache = _require("./cache.js");
            var meteorInstall = _require("meteor/modules").meteorInstall;

            // Call module.dynamicImport(id) to fetch a module and any/all of its
            // dependencies that have not already been fetched, and evaluate them as
            // soon as they arrive. This runtime API makes it very easy to implement
            // ECMAScript dynamic import(...) syntax.
            Module.prototype.dynamicImport = function (id) {
              var module = this;
              return module.prefetch(id).then(function () {
                return getNamespace(module, id);
              });
            };

            // Called by Module.prototype.prefetch if there are any missing dynamic
            // modules that need to be fetched.
            meteorInstall.fetch = function (ids) {
              var tree = Object.create(null);
              var versions = Object.create(null);
              var dynamicVersions = _require("./dynamic-versions.js");
              var missing;

              function addSource(id, source) {
                addToTree(tree, id, makeModuleFunction(id, source, ids[id].options));
              }

              function addMissing(id) {
                addToTree(missing = missing || Object.create(null), id, 1);
              }

              Object.keys(ids).forEach(function (id) {
                var version = dynamicVersions.get(id);
                if (version) {
                  versions[id] = version;
                } else {
                  addMissing(id);
                }
              });

              return cache.checkMany(versions).then(function (sources) {
                Object.keys(sources).forEach(function (id) {
                  var source = sources[id];
                  if (source) {
                    addSource(id, source);
                  } else {
                    addMissing(id);
                  }
                });

                return missing && fetchMissing(missing).then(function (results) {
                  var versionsAndSourcesById = Object.create(null);
                  var flatResults = flattenModuleTree(results);

                  Object.keys(flatResults).forEach(function (id) {
                    var source = flatResults[id];
                    addSource(id, source);

                    var version = dynamicVersions.get(id);
                    if (version) {
                      versionsAndSourcesById[id] = {
                        version: version,
                        source: source
                      };
                    }
                  });

                  cache.setMany(versionsAndSourcesById);
                });
              }).then(function () {
                return tree;
              });
            };

            function flattenModuleTree(tree) {
              var parts = [""];
              var result = Object.create(null);

              function walk(t) {
                if (t && typeof t === "object") {
                  Object.keys(t).forEach(function (key) {
                    parts.push(key);
                    walk(t[key]);
                    parts.pop();
                  });
                } else if (typeof t === "string") {
                  result[parts.join("/")] = t;
                }
              }

              walk(tree);

              return result;
            }

            function makeModuleFunction(id, source, options) {
              // By calling (options && options.eval || eval) in a wrapper function,
              // we delay the cost of parsing and evaluating the module code until the
              // module is first imported.
              return function () {
                // If an options.eval function was provided in the second argument to
                // meteorInstall when this bundle was first installed, use that
                // function to parse and evaluate the dynamic module code in the scope
                // of the package. Otherwise fall back to indirect (global) eval.
                return (options && options.eval || eval)(
                // Wrap the function(require,exports,module){...} expression in
                // parentheses to force it to be parsed as an expression.
                "(" + source + ")\n//# sourceURL=" + id).apply(this, arguments);
              };
            }

            var secretKey = null;
            _exports.setSecretKey = function (key) {
              secretKey = key;
            };

            var fetchURL = _require("./common.js").fetchURL;

            function fetchMissing(missingTree) {
              // If the hostname of the URL returned by Meteor.absoluteUrl differs
              // from location.host, then we'll be making a cross-origin request here,
              // but that's fine because the dynamic-import server sets appropriate
              // CORS headers to enable fetching dynamic modules from any
              // origin. Browsers that check CORS do so by sending an additional
              // preflight OPTIONS request, which may add latency to the first dynamic
              // import() request, so it's a good idea for ROOT_URL to match
              // location.host if possible, though not strictly necessary.
              var url = Meteor.absoluteUrl(fetchURL);

              if (secretKey) {
                url += "key=" + secretKey;
              }

              return fetch(url, {
                method: "POST",
                body: JSON.stringify(missingTree)
              }).then(function (res) {
                if (!res.ok) throw res;
                return res.json();
              });
            }

            function addToTree(tree, id, value) {
              var parts = id.split("/");
              var lastIndex = parts.length - 1;
              parts.forEach(function (part, i) {
                if (part) {
                  tree = tree[part] = tree[part] || (i < lastIndex ? Object.create(null) : value);
                }
              });
            }

            function getNamespace(_module2, id) {
              var namespace;

              _module2.link(id, {
                "*": function (ns) {
                  namespace = ns;
                }
              });

              // This helps with Babel interop, since we're not just returning the
              // module.exports object.
              Object.defineProperty(namespace, "__esModule", {
                value: true,
                enumerable: false
              });

              return namespace;
            }

            /////////////////////////////////////////////////////////////////////////////////
          }, "cache.js": function (_require3, _exports3, _module3) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/cache.js                                            //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var dbPromise;

            var canUseCache =
            // The server doesn't benefit from dynamic module fetching, and almost
            // certainly doesn't support IndexedDB.
            Meteor.isClient &&
            // Cordova bundles all modules into the monolithic initial bundle, so
            // the dynamic module cache won't be necessary.
            !Meteor.isCordova &&
            // Caching can be confusing in development, and is designed to be a
            // transparent optimization for production performance.
            Meteor.isProduction;

            function getIDB() {
              if (typeof indexedDB !== "undefined") return indexedDB;
              if (typeof webkitIndexedDB !== "undefined") return webkitIndexedDB;
              if (typeof mozIndexedDB !== "undefined") return mozIndexedDB;
              if (typeof OIndexedDB !== "undefined") return OIndexedDB;
              if (typeof msIndexedDB !== "undefined") return msIndexedDB;
            }

            function withDB(callback) {
              dbPromise = dbPromise || new Promise(function (resolve, reject) {
                var idb = getIDB();
                if (!idb) {
                  throw new Error("IndexedDB not available");
                }

                // Incrementing the version number causes all existing object stores
                // to be deleted and recreates those specified by objectStoreMap.
                var request = idb.open("MeteorDynamicImportCache", 2);

                request.onupgradeneeded = function (event) {
                  var db = event.target.result;

                  // It's fine to delete existing object stores since onupgradeneeded
                  // is only called when we change the DB version number, and the data
                  // we're storing is disposable/reconstructible.
                  Array.from(db.objectStoreNames).forEach(db.deleteObjectStore, db);

                  Object.keys(objectStoreMap).forEach(function (name) {
                    db.createObjectStore(name, objectStoreMap[name]);
                  });
                };

                request.onerror = makeOnError(reject, "indexedDB.open");
                request.onsuccess = function (event) {
                  resolve(event.target.result);
                };
              });

              return dbPromise.then(callback, function (error) {
                return callback(null);
              });
            }

            var objectStoreMap = {
              sourcesByVersion: { keyPath: "version" }
            };

            function makeOnError(reject, source) {
              return function (event) {
                reject(new Error("IndexedDB failure in " + source + " " + JSON.stringify(event.target)));

                // Returning true from an onerror callback function prevents an
                // InvalidStateError in Firefox during Private Browsing. Silencing
                // that error is safe because we handle the error more gracefully by
                // passing it to the Promise reject function above.
                // https://github.com/meteor/meteor/issues/8697
                return true;
              };
            }

            var checkCount = 0;

            _exports3.checkMany = function (versions) {
              var ids = Object.keys(versions);
              var sourcesById = Object.create(null);

              // Initialize sourcesById with null values to indicate all sources are
              // missing (unless replaced with actual sources below).
              ids.forEach(function (id) {
                sourcesById[id] = null;
              });

              if (!canUseCache) {
                return Promise.resolve(sourcesById);
              }

              return withDB(function (db) {
                if (!db) {
                  // We thought we could used IndexedDB, but something went wrong
                  // while opening the database, so err on the side of safety.
                  return sourcesById;
                }

                var txn = db.transaction(["sourcesByVersion"], "readonly");

                var sourcesByVersion = txn.objectStore("sourcesByVersion");

                ++checkCount;

                function finish() {
                  --checkCount;
                  return sourcesById;
                }

                return Promise.all(ids.map(function (id) {
                  return new Promise(function (resolve, reject) {
                    var version = versions[id];
                    if (version) {
                      var sourceRequest = sourcesByVersion.get(version);
                      sourceRequest.onerror = makeOnError(reject, "sourcesByVersion.get");
                      sourceRequest.onsuccess = function (event) {
                        var result = event.target.result;
                        if (result) {
                          sourcesById[id] = result.source;
                        }
                        resolve();
                      };
                    } else resolve();
                  });
                })).then(finish, finish);
              });
            };

            var pendingVersionsAndSourcesById = Object.create(null);

            _exports3.setMany = function (versionsAndSourcesById) {
              if (canUseCache) {
                Object.assign(pendingVersionsAndSourcesById, versionsAndSourcesById);

                // Delay the call to flushSetMany so that it doesn't contribute to the
                // amount of time it takes to call module.dynamicImport.
                if (!flushSetMany.timer) {
                  flushSetMany.timer = setTimeout(flushSetMany, 100);
                }
              }
            };

            function flushSetMany() {
              if (checkCount > 0) {
                // If checkMany is currently underway, postpone the flush until later,
                // since updating the cache is less important than reading from it.
                return flushSetMany.timer = setTimeout(flushSetMany, 100);
              }

              flushSetMany.timer = null;

              var versionsAndSourcesById = pendingVersionsAndSourcesById;
              pendingVersionsAndSourcesById = Object.create(null);

              return withDB(function (db) {
                if (!db) {
                  // We thought we could used IndexedDB, but something went wrong
                  // while opening the database, so err on the side of safety.
                  return;
                }

                var setTxn = db.transaction(["sourcesByVersion"], "readwrite");

                var sourcesByVersion = setTxn.objectStore("sourcesByVersion");

                return Promise.all(Object.keys(versionsAndSourcesById).map(function (id) {
                  var info = versionsAndSourcesById[id];
                  return new Promise(function (resolve, reject) {
                    var request = sourcesByVersion.put({
                      version: info.version,
                      source: info.source
                    });
                    request.onerror = makeOnError(reject, "sourcesByVersion.put");
                    request.onsuccess = resolve;
                  });
                }));
              });
            }

            /////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require4, _exports4) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/common.js                                           //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            _exports4.fetchURL = "/__meteor__/dynamic-import/fetch";

            /////////////////////////////////////////////////////////////////////////////////
          }, "dynamic-versions.js": function (_require5, _exports5, _module4) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/dynamic-versions.js                                 //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            // This magic double-underscored identifier gets replaced in
            // tools/isobuild/bundler.js with a tree of hashes of all dynamic
            // modules, for use in client.js and cache.js.
            var versions = {};

            _exports5.get = function (id) {
              var tree = versions;
              var version = null;

              id.split("/").some(function (part) {
                if (part) {
                  // If the tree contains identifiers for Meteor packages with colons
                  // in their names, the colons should not have been replaced by
                  // underscores, but there's a bug that results in that behavior, so
                  // for now it seems safest to be tolerant of underscores here.
                  // https://github.com/meteor/meteor/pull/9103
                  tree = tree[part] || tree[part.replace(":", "_")];
                }

                if (!tree) {
                  // Terminate the search without reassigning version.
                  return true;
                }

                if (typeof tree === "string") {
                  version = tree;
                  return true;
                }
              });

              return version;
            };

            function getFlatModuleArray(tree) {
              var parts = [""];
              var result = [];

              function walk(t) {
                if (t && typeof t === "object") {
                  Object.keys(t).forEach(function (key) {
                    parts.push(key);
                    walk(t[key]);
                    parts.pop();
                  });
                } else if (typeof t === "string") {
                  result.push(parts.join("/"));
                }
              }

              walk(tree);

              return result;
            }

            // If Package.appcache is loaded, preload additional modules after the
            // core bundle has been loaded.
            function precacheOnLoad(event) {
              // Check inside onload to make sure Package.appcache has had a chance to
              // become available.
              if (!Package.appcache) {
                return;
              }

              // Prefetch in chunks to reduce overhead. If we call module.prefetch(id)
              // multiple times in the same tick of the event loop, all those modules
              // will be fetched in one HTTP POST request.
              function prefetchInChunks(modules, amount) {
                Promise.all(modules.splice(0, amount).map(function (id) {
                  return _module4.prefetch(id);
                })).then(function () {
                  if (modules.length > 0) {
                    setTimeout(function () {
                      prefetchInChunks(modules, amount);
                    }, 0);
                  }
                });
              }

              // Get a flat array of modules and start prefetching.
              prefetchInChunks(getFlatModuleArray(versions), 50);
            }

            // Use window.onload to only prefetch after the main bundle has loaded.
            if (global.addEventListener) {
              global.addEventListener('load', precacheOnLoad, false);
            } else if (global.attachEvent) {
              global.attachEvent('onload', precacheOnLoad);
            }

            /////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/dynamic-import/client.js");

  /* Exports */
  Package._define("dynamic-import", _exports2);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("es5-shim");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var __g, __e;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ecmascript-runtime-client": { "modern.js": function (_require) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/ecmascript-runtime-client/modern.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            try {
              _require("core-js/modules/es7.object.get-own-property-descriptors");
            } catch (e) {
              throw new Error(["The core-js npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", "", "  meteor npm install --save core-js", ""].join("\n"));
            }

            _require("core-js/modules/es6.object.is");
            _require("core-js/modules/es6.function.name");
            _require("core-js/modules/es6.number.is-finite");
            _require("core-js/modules/es6.number.is-nan");
            _require("core-js/modules/es7.array.flatten");
            _require("core-js/modules/es7.array.flat-map");
            _require("core-js/modules/es7.object.values");
            _require("core-js/modules/es7.object.entries");
            _require("core-js/modules/es7.string.pad-start");
            _require("core-js/modules/es7.string.pad-end");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "core-js": { "modules": { "es7.object.get-own-property-descriptors.js": function (_require3) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es7.object.get-own-property-descriptors. //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-object-getownpropertydescriptors
                  var $export = _require3('./_export');
                  var ownKeys = _require3('./_own-keys');
                  var toIObject = _require3('./_to-iobject');
                  var gOPD = _require3('./_object-gopd');
                  var createProperty = _require3('./_create-property');

                  $export($export.S, 'Object', {
                    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                      var O = toIObject(object);
                      var getDesc = gOPD.f;
                      var keys = ownKeys(O);
                      var result = {};
                      var i = 0;
                      var key, desc;
                      while (keys.length > i) {
                        desc = getDesc(O, key = keys[i++]);
                        if (desc !== undefined) createProperty(result, key, desc);
                      }
                      return result;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_export.js": function (_require4, _exports3, _module) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_export.js                               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require4('./_global');
                  var core = _require4('./_core');
                  var hide = _require4('./_hide');
                  var redefine = _require4('./_redefine');
                  var ctx = _require4('./_ctx');
                  var PROTOTYPE = 'prototype';

                  var $export = function (type, name, source) {
                    var IS_FORCED = type & $export.F;
                    var IS_GLOBAL = type & $export.G;
                    var IS_STATIC = type & $export.S;
                    var IS_PROTO = type & $export.P;
                    var IS_BIND = type & $export.B;
                    var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
                    var _exports2 = IS_GLOBAL ? core : core[name] || (core[name] = {});
                    var expProto = _exports2[PROTOTYPE] || (_exports2[PROTOTYPE] = {});
                    var key, own, out, exp;
                    if (IS_GLOBAL) source = name;
                    for (key in source) {
                      // contains in native
                      own = !IS_FORCED && target && target[key] !== undefined;
                      // export native or passed
                      out = (own ? target : source)[key];
                      // bind timers to global for call from export context
                      exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                      // extend global
                      if (target) redefine(target, key, out, type & $export.U);
                      // export
                      if (_exports2[key] != out) hide(_exports2, key, exp);
                      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
                    }
                  };
                  global.core = core;
                  // type bitmap
                  $export.F = 1; // forced
                  $export.G = 2; // global
                  $export.S = 4; // static
                  $export.P = 8; // proto
                  $export.B = 16; // bind
                  $export.W = 32; // wrap
                  $export.U = 64; // safe
                  $export.R = 128; // real proto method for `library`
                  _module.exports = $export;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_global.js": function (_require5, _exports4, _module2) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_global.js                               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                  var global = _module2.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
                  // eslint-disable-next-line no-new-func
                  : Function('return this')();
                  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_core.js": function (_require6, _exports5, _module3) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_core.js                                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var core = _module3.exports = { version: '2.5.7' };
                  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_hide.js": function (_require7, _exports6, _module4) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_hide.js                                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var dP = _require7('./_object-dp');
                  var createDesc = _require7('./_property-desc');
                  _module4.exports = _require7('./_descriptors') ? function (object, key, value) {
                    return dP.f(object, key, createDesc(1, value));
                  } : function (object, key, value) {
                    object[key] = value;
                    return object;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-dp.js": function (_require8, _exports7) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-dp.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var anObject = _require8('./_an-object');
                  var IE8_DOM_DEFINE = _require8('./_ie8-dom-define');
                  var toPrimitive = _require8('./_to-primitive');
                  var dP = Object.defineProperty;

                  _exports7.f = _require8('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                    anObject(O);
                    P = toPrimitive(P, true);
                    anObject(Attributes);
                    if (IE8_DOM_DEFINE) try {
                      return dP(O, P, Attributes);
                    } catch (e) {/* empty */}
                    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
                    if ('value' in Attributes) O[P] = Attributes.value;
                    return O;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_an-object.js": function (_require9, _exports8, _module5) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_an-object.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require9('./_is-object');
                  _module5.exports = function (it) {
                    if (!isObject(it)) throw TypeError(it + ' is not an object!');
                    return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_is-object.js": function (_require10, _exports9, _module6) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_is-object.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module6.exports = function (it) {
                    return typeof it === 'object' ? it !== null : typeof it === 'function';
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_ie8-dom-define.js": function (_require11, _exports10, _module7) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_ie8-dom-define.js                       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module7.exports = !_require11('./_descriptors') && !_require11('./_fails')(function () {
                    return Object.defineProperty(_require11('./_dom-create')('div'), 'a', { get: function () {
                        return 7;
                      } }).a != 7;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_descriptors.js": function (_require12, _exports11, _module8) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_descriptors.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // Thank's IE8 for his funny defineProperty
                  _module8.exports = !_require12('./_fails')(function () {
                    return Object.defineProperty({}, 'a', { get: function () {
                        return 7;
                      } }).a != 7;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_fails.js": function (_require13, _exports12, _module9) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_fails.js                                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module9.exports = function (exec) {
                    try {
                      return !!exec();
                    } catch (e) {
                      return true;
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_dom-create.js": function (_require14, _exports13, _module10) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_dom-create.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require14('./_is-object');
                  var document = _require14('./_global').document;
                  // typeof document.createElement is 'object' in old IE
                  var is = isObject(document) && isObject(document.createElement);
                  _module10.exports = function (it) {
                    return is ? document.createElement(it) : {};
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-primitive.js": function (_require15, _exports14, _module11) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-primitive.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.1.1 ToPrimitive(input [, PreferredType])
                  var isObject = _require15('./_is-object');
                  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
                  // and the second argument - flag - preferred type is a string
                  _module11.exports = function (it, S) {
                    if (!isObject(it)) return it;
                    var fn, val;
                    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
                    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                    throw TypeError("Can't convert object to primitive value");
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_property-desc.js": function (_require16, _exports15, _module12) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_property-desc.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module12.exports = function (bitmap, value) {
                    return {
                      enumerable: !(bitmap & 1),
                      configurable: !(bitmap & 2),
                      writable: !(bitmap & 4),
                      value: value
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_redefine.js": function (_require17, _exports16, _module13) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_redefine.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require17('./_global');
                  var hide = _require17('./_hide');
                  var has = _require17('./_has');
                  var SRC = _require17('./_uid')('src');
                  var TO_STRING = 'toString';
                  var $toString = Function[TO_STRING];
                  var TPL = ('' + $toString).split(TO_STRING);

                  _require17('./_core').inspectSource = function (it) {
                    return $toString.call(it);
                  };

                  (_module13.exports = function (O, key, val, safe) {
                    var isFunction = typeof val == 'function';
                    if (isFunction) has(val, 'name') || hide(val, 'name', key);
                    if (O[key] === val) return;
                    if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
                    if (O === global) {
                      O[key] = val;
                    } else if (!safe) {
                      delete O[key];
                      hide(O, key, val);
                    } else if (O[key]) {
                      O[key] = val;
                    } else {
                      hide(O, key, val);
                    }
                    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
                  })(Function.prototype, TO_STRING, function toString() {
                    return typeof this == 'function' && this[SRC] || $toString.call(this);
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_has.js": function (_require18, _exports17, _module14) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_has.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var hasOwnProperty = {}.hasOwnProperty;
                  _module14.exports = function (it, key) {
                    return hasOwnProperty.call(it, key);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_uid.js": function (_require19, _exports18, _module15) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_uid.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var id = 0;
                  var px = Math.random();
                  _module15.exports = function (key) {
                    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_ctx.js": function (_require20, _exports19, _module16) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_ctx.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // optional / simple context binding
                  var aFunction = _require20('./_a-function');
                  _module16.exports = function (fn, that, length) {
                    aFunction(fn);
                    if (that === undefined) return fn;
                    switch (length) {
                      case 1:
                        return function (a) {
                          return fn.call(that, a);
                        };
                      case 2:
                        return function (a, b) {
                          return fn.call(that, a, b);
                        };
                      case 3:
                        return function (a, b, c) {
                          return fn.call(that, a, b, c);
                        };
                    }
                    return function () /* ...args */{
                      return fn.apply(that, arguments);
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_a-function.js": function (_require21, _exports20, _module17) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_a-function.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module17.exports = function (it) {
                    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
                    return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_own-keys.js": function (_require22, _exports21, _module18) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_own-keys.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // all object keys, includes non-enumerable and symbols
                  var gOPN = _require22('./_object-gopn');
                  var gOPS = _require22('./_object-gops');
                  var anObject = _require22('./_an-object');
                  var Reflect = _require22('./_global').Reflect;
                  _module18.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
                    var keys = gOPN.f(anObject(it));
                    var getSymbols = gOPS.f;
                    return getSymbols ? keys.concat(getSymbols(it)) : keys;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-gopn.js": function (_require23, _exports22) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-gopn.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
                  var $keys = _require23('./_object-keys-internal');
                  var hiddenKeys = _require23('./_enum-bug-keys').concat('length', 'prototype');

                  _exports22.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                    return $keys(O, hiddenKeys);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-keys-internal.js": function (_require24, _exports23, _module19) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-keys-internal.js                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var has = _require24('./_has');
                  var toIObject = _require24('./_to-iobject');
                  var arrayIndexOf = _require24('./_array-includes')(false);
                  var IE_PROTO = _require24('./_shared-key')('IE_PROTO');

                  _module19.exports = function (object, names) {
                    var O = toIObject(object);
                    var i = 0;
                    var result = [];
                    var key;
                    for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
                    // Don't enum bug & hidden keys
                    while (names.length > i) if (has(O, key = names[i++])) {
                      ~arrayIndexOf(result, key) || result.push(key);
                    }
                    return result;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-iobject.js": function (_require25, _exports24, _module20) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-iobject.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // to indexed object, toObject with fallback for non-array-like ES3 strings
                  var IObject = _require25('./_iobject');
                  var defined = _require25('./_defined');
                  _module20.exports = function (it) {
                    return IObject(defined(it));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_iobject.js": function (_require26, _exports25, _module21) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_iobject.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // fallback for non-array-like ES3 and non-enumerable old V8 strings
                  var cof = _require26('./_cof');
                  // eslint-disable-next-line no-prototype-builtins
                  _module21.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
                    return cof(it) == 'String' ? it.split('') : Object(it);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_cof.js": function (_require27, _exports26, _module22) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_cof.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toString = {}.toString;

                  _module22.exports = function (it) {
                    return toString.call(it).slice(8, -1);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_defined.js": function (_require28, _exports27, _module23) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_defined.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.2.1 RequireObjectCoercible(argument)
                  _module23.exports = function (it) {
                    if (it == undefined) throw TypeError("Can't call method on  " + it);
                    return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_array-includes.js": function (_require29, _exports28, _module24) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_array-includes.js                       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // false -> Array#indexOf
                  // true  -> Array#includes
                  var toIObject = _require29('./_to-iobject');
                  var toLength = _require29('./_to-length');
                  var toAbsoluteIndex = _require29('./_to-absolute-index');
                  _module24.exports = function (IS_INCLUDES) {
                    return function ($this, el, fromIndex) {
                      var O = toIObject($this);
                      var length = toLength(O.length);
                      var index = toAbsoluteIndex(fromIndex, length);
                      var value;
                      // Array#includes uses SameValueZero equality algorithm
                      // eslint-disable-next-line no-self-compare
                      if (IS_INCLUDES && el != el) while (length > index) {
                        value = O[index++];
                        // eslint-disable-next-line no-self-compare
                        if (value != value) return true;
                        // Array#indexOf ignores holes, Array#includes - not
                      } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                        if (O[index] === el) return IS_INCLUDES || index || 0;
                      }return !IS_INCLUDES && -1;
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-length.js": function (_require30, _exports29, _module25) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-length.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.1.15 ToLength
                  var toInteger = _require30('./_to-integer');
                  var min = Math.min;
                  _module25.exports = function (it) {
                    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-integer.js": function (_require31, _exports30, _module26) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-integer.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.1.4 ToInteger
                  var ceil = Math.ceil;
                  var floor = Math.floor;
                  _module26.exports = function (it) {
                    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-absolute-index.js": function (_require32, _exports31, _module27) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-absolute-index.js                    //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toInteger = _require32('./_to-integer');
                  var max = Math.max;
                  var min = Math.min;
                  _module27.exports = function (index, length) {
                    index = toInteger(index);
                    return index < 0 ? max(index + length, 0) : min(index, length);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_shared-key.js": function (_require33, _exports32, _module28) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_shared-key.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var shared = _require33('./_shared')('keys');
                  var uid = _require33('./_uid');
                  _module28.exports = function (key) {
                    return shared[key] || (shared[key] = uid(key));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_shared.js": function (_require34, _exports33, _module29) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_shared.js                               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var core = _require34('./_core');
                  var global = _require34('./_global');
                  var SHARED = '__core-js_shared__';
                  var store = global[SHARED] || (global[SHARED] = {});

                  (_module29.exports = function (key, value) {
                    return store[key] || (store[key] = value !== undefined ? value : {});
                  })('versions', []).push({
                    version: core.version,
                    mode: _require34('./_library') ? 'pure' : 'global',
                    copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_library.js": function (_require35, _exports34, _module30) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_library.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module30.exports = false;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_enum-bug-keys.js": function (_require36, _exports35, _module31) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_enum-bug-keys.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // IE 8- don't enum bug keys
                  _module31.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-gops.js": function (_require37, _exports36) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-gops.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _exports36.f = Object.getOwnPropertySymbols;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-gopd.js": function (_require38, _exports37) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-gopd.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var pIE = _require38('./_object-pie');
                  var createDesc = _require38('./_property-desc');
                  var toIObject = _require38('./_to-iobject');
                  var toPrimitive = _require38('./_to-primitive');
                  var has = _require38('./_has');
                  var IE8_DOM_DEFINE = _require38('./_ie8-dom-define');
                  var gOPD = Object.getOwnPropertyDescriptor;

                  _exports37.f = _require38('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
                    O = toIObject(O);
                    P = toPrimitive(P, true);
                    if (IE8_DOM_DEFINE) try {
                      return gOPD(O, P);
                    } catch (e) {/* empty */}
                    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-pie.js": function (_require39, _exports38) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-pie.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _exports38.f = {}.propertyIsEnumerable;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_create-property.js": function (_require40, _exports39, _module32) {
                  var $defineProperty = _require40('./_object-dp');
                  var createDesc = _require40('./_property-desc');

                  _module32.exports = function (object, index, value) {
                    if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es6.object.is.js": function (_require41) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es6.object.is.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 19.1.3.10 Object.is(value1, value2)
                  var $export = _require41('./_export');
                  $export($export.S, 'Object', { is: _require41('./_same-value') });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_same-value.js": function (_require42, _exports40, _module33) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_same-value.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.2.9 SameValue(x, y)
                  _module33.exports = Object.is || function is(x, y) {
                    // eslint-disable-next-line no-self-compare
                    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es6.function.name.js": function (_require43) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es6.function.name.js                     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var dP = _require43('./_object-dp').f;
                  var FProto = Function.prototype;
                  var nameRE = /^\s*function ([^ (]*)/;
                  var NAME = 'name';

                  // 19.2.4.2 name
                  NAME in FProto || _require43('./_descriptors') && dP(FProto, NAME, {
                    configurable: true,
                    get: function () {
                      try {
                        return ('' + this).match(nameRE)[1];
                      } catch (e) {
                        return '';
                      }
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es6.number.is-finite.js": function (_require44) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es6.number.is-finite.js                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 20.1.2.2 Number.isFinite(number)
                  var $export = _require44('./_export');
                  var _isFinite = _require44('./_global').isFinite;

                  $export($export.S, 'Number', {
                    isFinite: function isFinite(it) {
                      return typeof it == 'number' && _isFinite(it);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es6.number.is-nan.js": function (_require45) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es6.number.is-nan.js                     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 20.1.2.4 Number.isNaN(number)
                  var $export = _require45('./_export');

                  $export($export.S, 'Number', {
                    isNaN: function isNaN(number) {
                      // eslint-disable-next-line no-self-compare
                      return number != number;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.array.flatten.js": function (_require46) {
                  // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
                  var $export = _require46('./_export');
                  var flattenIntoArray = _require46('./_flatten-into-array');
                  var toObject = _require46('./_to-object');
                  var toLength = _require46('./_to-length');
                  var toInteger = _require46('./_to-integer');
                  var arraySpeciesCreate = _require46('./_array-species-create');

                  $export($export.P, 'Array', {
                    flatten: function flatten() /* depthArg = 1 */{
                      var depthArg = arguments[0];
                      var O = toObject(this);
                      var sourceLen = toLength(O.length);
                      var A = arraySpeciesCreate(O, 0);
                      flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                      return A;
                    }
                  });

                  _require46('./_add-to-unscopables')('flatten');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_flatten-into-array.js": function (_require47, _exports41, _module34) {
                  // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
                  var isArray = _require47('./_is-array');
                  var isObject = _require47('./_is-object');
                  var toLength = _require47('./_to-length');
                  var ctx = _require47('./_ctx');
                  var IS_CONCAT_SPREADABLE = _require47('./_wks')('isConcatSpreadable');

                  function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
                    var targetIndex = start;
                    var sourceIndex = 0;
                    var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
                    var element, spreadable;

                    while (sourceIndex < sourceLen) {
                      if (sourceIndex in source) {
                        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

                        spreadable = false;
                        if (isObject(element)) {
                          spreadable = element[IS_CONCAT_SPREADABLE];
                          spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
                        }

                        if (spreadable && depth > 0) {
                          targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                        } else {
                          if (targetIndex >= 0x1fffffffffffff) throw TypeError();
                          target[targetIndex] = element;
                        }

                        targetIndex++;
                      }
                      sourceIndex++;
                    }
                    return targetIndex;
                  }

                  _module34.exports = flattenIntoArray;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_is-array.js": function (_require48, _exports42, _module35) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_is-array.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.2.2 IsArray(argument)
                  var cof = _require48('./_cof');
                  _module35.exports = Array.isArray || function isArray(arg) {
                    return cof(arg) == 'Array';
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_wks.js": function (_require49, _exports43, _module36) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_wks.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var store = _require49('./_shared')('wks');
                  var uid = _require49('./_uid');
                  var Symbol = _require49('./_global').Symbol;
                  var USE_SYMBOL = typeof Symbol == 'function';

                  var $exports = _module36.exports = function (name) {
                    return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
                  };

                  $exports.store = store;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-object.js": function (_require50, _exports44, _module37) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-object.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.1.13 ToObject(argument)
                  var defined = _require50('./_defined');
                  _module37.exports = function (it) {
                    return Object(defined(it));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_array-species-create.js": function (_require51, _exports45, _module38) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_array-species-create.js                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
                  var speciesConstructor = _require51('./_array-species-constructor');

                  _module38.exports = function (original, length) {
                    return new (speciesConstructor(original))(length);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_array-species-constructor.js": function (_require52, _exports46, _module39) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_array-species-constructor.js            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require52('./_is-object');
                  var isArray = _require52('./_is-array');
                  var SPECIES = _require52('./_wks')('species');

                  _module39.exports = function (original) {
                    var C;
                    if (isArray(original)) {
                      C = original.constructor;
                      // cross-realm fallback
                      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
                      if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null) C = undefined;
                      }
                    }return C === undefined ? Array : C;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_add-to-unscopables.js": function (_require53, _exports47, _module40) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_add-to-unscopables.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 22.1.3.31 Array.prototype[@@unscopables]
                  var UNSCOPABLES = _require53('./_wks')('unscopables');
                  var ArrayProto = Array.prototype;
                  if (ArrayProto[UNSCOPABLES] == undefined) _require53('./_hide')(ArrayProto, UNSCOPABLES, {});
                  _module40.exports = function (key) {
                    ArrayProto[UNSCOPABLES][key] = true;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.array.flat-map.js": function (_require54) {
                  // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
                  var $export = _require54('./_export');
                  var flattenIntoArray = _require54('./_flatten-into-array');
                  var toObject = _require54('./_to-object');
                  var toLength = _require54('./_to-length');
                  var aFunction = _require54('./_a-function');
                  var arraySpeciesCreate = _require54('./_array-species-create');

                  $export($export.P, 'Array', {
                    flatMap: function flatMap(callbackfn /* , thisArg */) {
                      var O = toObject(this);
                      var sourceLen, A;
                      aFunction(callbackfn);
                      sourceLen = toLength(O.length);
                      A = arraySpeciesCreate(O, 0);
                      flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
                      return A;
                    }
                  });

                  _require54('./_add-to-unscopables')('flatMap');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.object.values.js": function (_require55) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es7.object.values.js                     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-object-values-entries
                  var $export = _require55('./_export');
                  var $values = _require55('./_object-to-array')(false);

                  $export($export.S, 'Object', {
                    values: function values(it) {
                      return $values(it);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-to-array.js": function (_require56, _exports48, _module41) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-to-array.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var getKeys = _require56('./_object-keys');
                  var toIObject = _require56('./_to-iobject');
                  var isEnum = _require56('./_object-pie').f;
                  _module41.exports = function (isEntries) {
                    return function (it) {
                      var O = toIObject(it);
                      var keys = getKeys(O);
                      var length = keys.length;
                      var i = 0;
                      var result = [];
                      var key;
                      while (length > i) if (isEnum.call(O, key = keys[i++])) {
                        result.push(isEntries ? [key, O[key]] : O[key]);
                      }return result;
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-keys.js": function (_require57, _exports49, _module42) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-keys.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
                  var $keys = _require57('./_object-keys-internal');
                  var enumBugKeys = _require57('./_enum-bug-keys');

                  _module42.exports = Object.keys || function keys(O) {
                    return $keys(O, enumBugKeys);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.object.entries.js": function (_require58) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es7.object.entries.js                    //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-object-values-entries
                  var $export = _require58('./_export');
                  var $entries = _require58('./_object-to-array')(true);

                  $export($export.S, 'Object', {
                    entries: function entries(it) {
                      return $entries(it);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.string.pad-start.js": function (_require59) {
                  // https://github.com/tc39/proposal-string-pad-start-end
                  var $export = _require59('./_export');
                  var $pad = _require59('./_string-pad');
                  var userAgent = _require59('./_user-agent');

                  // https://github.com/zloirock/core-js/issues/280
                  $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
                    padStart: function padStart(maxLength /* , fillString = ' ' */) {
                      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_string-pad.js": function (_require60, _exports50, _module43) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_string-pad.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-string-pad-start-end
                  var toLength = _require60('./_to-length');
                  var repeat = _require60('./_string-repeat');
                  var defined = _require60('./_defined');

                  _module43.exports = function (that, maxLength, fillString, left) {
                    var S = String(defined(that));
                    var stringLength = S.length;
                    var fillStr = fillString === undefined ? ' ' : String(fillString);
                    var intMaxLength = toLength(maxLength);
                    if (intMaxLength <= stringLength || fillStr == '') return S;
                    var fillLen = intMaxLength - stringLength;
                    var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
                    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
                    return left ? stringFiller + S : S + stringFiller;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_string-repeat.js": function (_require61, _exports51, _module44) {
                  var toInteger = _require61('./_to-integer');
                  var defined = _require61('./_defined');

                  _module44.exports = function repeat(count) {
                    var str = String(defined(this));
                    var res = '';
                    var n = toInteger(count);
                    if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
                    for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
                    return res;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_user-agent.js": function (_require62, _exports52, _module45) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_user-agent.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require62('./_global');
                  var navigator = global.navigator;

                  _module45.exports = navigator && navigator.userAgent || '';

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.string.pad-end.js": function (_require63) {
                  // https://github.com/tc39/proposal-string-pad-start-end
                  var $export = _require63('./_export');
                  var $pad = _require63('./_string-pad');
                  var userAgent = _require63('./_user-agent');

                  // https://github.com/zloirock/core-js/issues/280
                  $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
                    padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
                      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports = _require2("/node_modules/meteor/ecmascript-runtime-client/modern.js");

  /* Exports */
  Package._define("ecmascript-runtime-client", _exports);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Base64;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "base64": { "base64.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                        //
            // packages/base64/base64.js                                                              //
            //                                                                                        //
            ////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Base64: () => Base64
            });
            // Base 64 encoding
            const BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            const BASE_64_VALS = Object.create(null);

            const getChar = val => BASE_64_CHARS.charAt(val);

            const getVal = ch => ch === '=' ? -1 : BASE_64_VALS[ch];

            for (let i = 0; i < BASE_64_CHARS.length; i++) {
              BASE_64_VALS[getChar(i)] = i;
            }

            ;

            const encode = array => {
              if (typeof array === "string") {
                const str = array;
                array = newBinary(str.length);

                for (let i = 0; i < str.length; i++) {
                  const ch = str.charCodeAt(i);

                  if (ch > 0xFF) {
                    throw new Error("Not ascii. Base64.encode can only take ascii strings.");
                  }

                  array[i] = ch;
                }
              }

              const answer = [];
              let a = null;
              let b = null;
              let c = null;
              let d = null;
              array.forEach((elm, i) => {
                switch (i % 3) {
                  case 0:
                    a = elm >> 2 & 0x3F;
                    b = (elm & 0x03) << 4;
                    break;

                  case 1:
                    b = b | elm >> 4 & 0xF;
                    c = (elm & 0xF) << 2;
                    break;

                  case 2:
                    c = c | elm >> 6 & 0x03;
                    d = elm & 0x3F;
                    answer.push(getChar(a));
                    answer.push(getChar(b));
                    answer.push(getChar(c));
                    answer.push(getChar(d));
                    a = null;
                    b = null;
                    c = null;
                    d = null;
                    break;
                }
              });

              if (a != null) {
                answer.push(getChar(a));
                answer.push(getChar(b));

                if (c == null) {
                  answer.push('=');
                } else {
                  answer.push(getChar(c));
                }

                if (d == null) {
                  answer.push('=');
                }
              }

              return answer.join("");
            }; // XXX This is a weird place for this to live, but it's used both by
            // this package and 'ejson', and we can't put it in 'ejson' without
            // introducing a circular dependency. It should probably be in its own
            // package or as a helper in a package that both 'base64' and 'ejson'
            // use.


            const newBinary = len => {
              if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {
                const ret = [];

                for (let i = 0; i < len; i++) {
                  ret.push(0);
                }

                ret.$Uint8ArrayPolyfill = true;
                return ret;
              }

              return new Uint8Array(new ArrayBuffer(len));
            };

            const decode = str => {
              let len = Math.floor(str.length * 3 / 4);

              if (str.charAt(str.length - 1) == '=') {
                len--;

                if (str.charAt(str.length - 2) == '=') {
                  len--;
                }
              }

              const arr = newBinary(len);
              let one = null;
              let two = null;
              let three = null;
              let j = 0;

              for (let i = 0; i < str.length; i++) {
                const c = str.charAt(i);
                const v = getVal(c);

                switch (i % 4) {
                  case 0:
                    if (v < 0) {
                      throw new Error('invalid base64 string');
                    }

                    one = v << 2;
                    break;

                  case 1:
                    if (v < 0) {
                      throw new Error('invalid base64 string');
                    }

                    one = one | v >> 4;
                    arr[j++] = one;
                    two = (v & 0x0F) << 4;
                    break;

                  case 2:
                    if (v >= 0) {
                      two = two | v >> 2;
                      arr[j++] = two;
                      three = (v & 0x03) << 6;
                    }

                    break;

                  case 3:
                    if (v >= 0) {
                      arr[j++] = three | v;
                    }

                    break;
                }
              }

              return arr;
            };

            const Base64 = {
              encode,
              decode,
              newBinary
            };
            ////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/base64/base64.js");

  /* Exports */
  Package._define("base64", _exports2, {
    Base64: Base64
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Base64 = Package.base64.Base64;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var v, EJSON;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ejson": { "ejson.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/ejson.js                                                                                     //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              EJSON: () => EJSON
            });

            /**
             * @namespace
             * @summary Namespace for EJSON functions
             */
            const EJSON = {}; // Custom type interface definition

            /**
             * @class CustomType
             * @instanceName customType
             * @memberOf EJSON
             * @summary The interface that a class must satisfy to be able to become an
             * EJSON custom type via EJSON.addType.
             */

            /**
             * @function typeName
             * @memberOf EJSON.CustomType
             * @summary Return the tag used to identify this type.  This must match the
             *          tag used to register this type with
             *          [`EJSON.addType`](#ejson_add_type).
             * @locus Anywhere
             * @instance
             */

            /**
             * @function toJSONValue
             * @memberOf EJSON.CustomType
             * @summary Serialize this instance into a JSON-compatible value.
             * @locus Anywhere
             * @instance
             */

            /**
             * @function clone
             * @memberOf EJSON.CustomType
             * @summary Return a value `r` such that `this.equals(r)` is true, and
             *          modifications to `r` do not affect `this` and vice versa.
             * @locus Anywhere
             * @instance
             */

            /**
             * @function equals
             * @memberOf EJSON.CustomType
             * @summary Return `true` if `other` has a value equal to `this`; `false`
             *          otherwise.
             * @locus Anywhere
             * @param {Object} other Another object to compare this to.
             * @instance
             */

            const customTypes = {};

            const hasOwn = (obj, prop) => ({}).hasOwnProperty.call(obj, prop);

            const isArguments = obj => obj != null && hasOwn(obj, 'callee');

            const isInfOrNan = obj => Number.isNaN(obj) || obj === Infinity || obj === -Infinity; // Add a custom type, using a method of your choice to get to and
            // from a basic JSON-able representation.  The factory argument
            // is a function of JSON-able --> your object
            // The type you add must have:
            // - A toJSONValue() method, so that Meteor can serialize it
            // - a typeName() method, to show how to look it up in our type table.
            // It is okay if these methods are monkey-patched on.
            // EJSON.clone will use toJSONValue and the given factory to produce
            // a clone, but you may specify a method clone() that will be
            // used instead.
            // Similarly, EJSON.equals will use toJSONValue to make comparisons,
            // but you may provide a method equals() instead.

            /**
             * @summary Add a custom datatype to EJSON.
             * @locus Anywhere
             * @param {String} name A tag for your custom type; must be unique among
             *                      custom data types defined in your project, and must
             *                      match the result of your type's `typeName` method.
             * @param {Function} factory A function that deserializes a JSON-compatible
             *                           value into an instance of your type.  This should
             *                           match the serialization performed by your
             *                           type's `toJSONValue` method.
             */

            EJSON.addType = (name, factory) => {
              if (hasOwn(customTypes, name)) {
                throw new Error("Type ".concat(name, " already present"));
              }

              customTypes[name] = factory;
            };

            const builtinConverters = [{
              // Date
              matchJSONValue(obj) {
                return hasOwn(obj, '$date') && Object.keys(obj).length === 1;
              },

              matchObject(obj) {
                return obj instanceof Date;
              },

              toJSONValue(obj) {
                return {
                  $date: obj.getTime()
                };
              },

              fromJSONValue(obj) {
                return new Date(obj.$date);
              }

            }, {
              // RegExp
              matchJSONValue(obj) {
                return hasOwn(obj, '$regexp') && hasOwn(obj, '$flags') && Object.keys(obj).length === 2;
              },

              matchObject(obj) {
                return obj instanceof RegExp;
              },

              toJSONValue(regexp) {
                return {
                  $regexp: regexp.source,
                  $flags: regexp.flags
                };
              },

              fromJSONValue(obj) {
                // Replaces duplicate / invalid flags.
                return new RegExp(obj.$regexp, obj.$flags // Cut off flags at 50 chars to avoid abusing RegExp for DOS.
                .slice(0, 50).replace(/[^gimuy]/g, '').replace(/(.)(?=.*\1)/g, ''));
              }

            }, {
              // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'
              // which we match.)
              matchJSONValue(obj) {
                return hasOwn(obj, '$InfNaN') && Object.keys(obj).length === 1;
              },

              matchObject: isInfOrNan,

              toJSONValue(obj) {
                let sign;

                if (Number.isNaN(obj)) {
                  sign = 0;
                } else if (obj === Infinity) {
                  sign = 1;
                } else {
                  sign = -1;
                }

                return {
                  $InfNaN: sign
                };
              },

              fromJSONValue(obj) {
                return obj.$InfNaN / 0;
              }

            }, {
              // Binary
              matchJSONValue(obj) {
                return hasOwn(obj, '$binary') && Object.keys(obj).length === 1;
              },

              matchObject(obj) {
                return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && hasOwn(obj, '$Uint8ArrayPolyfill');
              },

              toJSONValue(obj) {
                return {
                  $binary: Base64.encode(obj)
                };
              },

              fromJSONValue(obj) {
                return Base64.decode(obj.$binary);
              }

            }, {
              // Escaping one level
              matchJSONValue(obj) {
                return hasOwn(obj, '$escape') && Object.keys(obj).length === 1;
              },

              matchObject(obj) {
                let match = false;

                if (obj) {
                  const keyCount = Object.keys(obj).length;

                  if (keyCount === 1 || keyCount === 2) {
                    match = builtinConverters.some(converter => converter.matchJSONValue(obj));
                  }
                }

                return match;
              },

              toJSONValue(obj) {
                const newObj = {};
                Object.keys(obj).forEach(key => {
                  newObj[key] = EJSON.toJSONValue(obj[key]);
                });
                return {
                  $escape: newObj
                };
              },

              fromJSONValue(obj) {
                const newObj = {};
                Object.keys(obj.$escape).forEach(key => {
                  newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);
                });
                return newObj;
              }

            }, {
              // Custom
              matchJSONValue(obj) {
                return hasOwn(obj, '$type') && hasOwn(obj, '$value') && Object.keys(obj).length === 2;
              },

              matchObject(obj) {
                return EJSON._isCustomType(obj);
              },

              toJSONValue(obj) {
                const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());

                return {
                  $type: obj.typeName(),
                  $value: jsonValue
                };
              },

              fromJSONValue(obj) {
                const typeName = obj.$type;

                if (!hasOwn(customTypes, typeName)) {
                  throw new Error("Custom EJSON type ".concat(typeName, " is not defined"));
                }

                const converter = customTypes[typeName];
                return Meteor._noYieldsAllowed(() => converter(obj.$value));
              }

            }];

            EJSON._isCustomType = obj => obj && typeof obj.toJSONValue === 'function' && typeof obj.typeName === 'function' && hasOwn(customTypes, obj.typeName());

            EJSON._getTypes = () => customTypes;

            EJSON._getConverters = () => builtinConverters; // Either return the JSON-compatible version of the argument, or undefined (if
            // the item isn't itself replaceable, but maybe some fields in it are)


            const toJSONValueHelper = item => {
              for (let i = 0; i < builtinConverters.length; i++) {
                const converter = builtinConverters[i];

                if (converter.matchObject(item)) {
                  return converter.toJSONValue(item);
                }
              }

              return undefined;
            }; // for both arrays and objects, in-place modification.


            const adjustTypesToJSONValue = obj => {
              // Is it an atom that we need to adjust?
              if (obj === null) {
                return null;
              }

              const maybeChanged = toJSONValueHelper(obj);

              if (maybeChanged !== undefined) {
                return maybeChanged;
              } // Other atoms are unchanged.


              if (typeof obj !== 'object') {
                return obj;
              } // Iterate over array or object structure.


              Object.keys(obj).forEach(key => {
                const value = obj[key];

                if (typeof value !== 'object' && value !== undefined && !isInfOrNan(value)) {
                  return; // continue
                }

                const changed = toJSONValueHelper(value);

                if (changed) {
                  obj[key] = changed;
                  return; // on to the next key
                } // if we get here, value is an object but not adjustable
                // at this level.  recurse.


                adjustTypesToJSONValue(value);
              });
              return obj;
            };

            EJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;
            /**
             * @summary Serialize an EJSON-compatible value into its plain JSON
             *          representation.
             * @locus Anywhere
             * @param {EJSON} val A value to serialize to plain JSON.
             */

            EJSON.toJSONValue = item => {
              const changed = toJSONValueHelper(item);

              if (changed !== undefined) {
                return changed;
              }

              let newItem = item;

              if (typeof item === 'object') {
                newItem = EJSON.clone(item);
                adjustTypesToJSONValue(newItem);
              }

              return newItem;
            }; // Either return the argument changed to have the non-json
            // rep of itself (the Object version) or the argument itself.
            // DOES NOT RECURSE.  For actually getting the fully-changed value, use
            // EJSON.fromJSONValue


            const fromJSONValueHelper = value => {
              if (typeof value === 'object' && value !== null) {
                const keys = Object.keys(value);

                if (keys.length <= 2 && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {
                  for (let i = 0; i < builtinConverters.length; i++) {
                    const converter = builtinConverters[i];

                    if (converter.matchJSONValue(value)) {
                      return converter.fromJSONValue(value);
                    }
                  }
                }
              }

              return value;
            }; // for both arrays and objects. Tries its best to just
            // use the object you hand it, but may return something
            // different if the object you hand it itself needs changing.


            const adjustTypesFromJSONValue = obj => {
              if (obj === null) {
                return null;
              }

              const maybeChanged = fromJSONValueHelper(obj);

              if (maybeChanged !== obj) {
                return maybeChanged;
              } // Other atoms are unchanged.


              if (typeof obj !== 'object') {
                return obj;
              }

              Object.keys(obj).forEach(key => {
                const value = obj[key];

                if (typeof value === 'object') {
                  const changed = fromJSONValueHelper(value);

                  if (value !== changed) {
                    obj[key] = changed;
                    return;
                  } // if we get here, value is an object but not adjustable
                  // at this level.  recurse.


                  adjustTypesFromJSONValue(value);
                }
              });
              return obj;
            };

            EJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;
            /**
             * @summary Deserialize an EJSON value from its plain JSON representation.
             * @locus Anywhere
             * @param {JSONCompatible} val A value to deserialize into EJSON.
             */

            EJSON.fromJSONValue = item => {
              let changed = fromJSONValueHelper(item);

              if (changed === item && typeof item === 'object') {
                changed = EJSON.clone(item);
                adjustTypesFromJSONValue(changed);
              }

              return changed;
            };
            /**
             * @summary Serialize a value to a string. For EJSON values, the serialization
             *          fully represents the value. For non-EJSON values, serializes the
             *          same way as `JSON.stringify`.
             * @locus Anywhere
             * @param {EJSON} val A value to stringify.
             * @param {Object} [options]
             * @param {Boolean | Integer | String} options.indent Indents objects and
             * arrays for easy readability.  When `true`, indents by 2 spaces; when an
             * integer, indents by that number of spaces; and when a string, uses the
             * string as the indentation pattern.
             * @param {Boolean} options.canonical When `true`, stringifies keys in an
             *                                    object in sorted order.
             */

            EJSON.stringify = (item, options) => {
              let serialized;
              const json = EJSON.toJSONValue(item);

              if (options && (options.canonical || options.indent)) {
                let canonicalStringify;
                _module.link("./stringify", {
                  default(v) {
                    canonicalStringify = v;
                  }

                }, 0);
                serialized = canonicalStringify(json, options);
              } else {
                serialized = JSON.stringify(json);
              }

              return serialized;
            };
            /**
             * @summary Parse a string into an EJSON value. Throws an error if the string
             *          is not valid EJSON.
             * @locus Anywhere
             * @param {String} str A string to parse into an EJSON value.
             */

            EJSON.parse = item => {
              if (typeof item !== 'string') {
                throw new Error('EJSON.parse argument should be a string');
              }

              return EJSON.fromJSONValue(JSON.parse(item));
            };
            /**
             * @summary Returns true if `x` is a buffer of binary data, as returned from
             *          [`EJSON.newBinary`](#ejson_new_binary).
             * @param {Object} x The variable to check.
             * @locus Anywhere
             */

            EJSON.isBinary = obj => {
              return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill);
            };
            /**
             * @summary Return true if `a` and `b` are equal to each other.  Return false
             *          otherwise.  Uses the `equals` method on `a` if present, otherwise
             *          performs a deep comparison.
             * @locus Anywhere
             * @param {EJSON} a
             * @param {EJSON} b
             * @param {Object} [options]
             * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,
             * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`
             * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The
             * default is `false`.
             */

            EJSON.equals = (a, b, options) => {
              let i;
              const keyOrderSensitive = !!(options && options.keyOrderSensitive);

              if (a === b) {
                return true;
              } // This differs from the IEEE spec for NaN equality, b/c we don't want
              // anything ever with a NaN to be poisoned from becoming equal to anything.


              if (Number.isNaN(a) && Number.isNaN(b)) {
                return true;
              } // if either one is falsy, they'd have to be === to be equal


              if (!a || !b) {
                return false;
              }

              if (!(typeof a === 'object' && typeof b === 'object')) {
                return false;
              }

              if (a instanceof Date && b instanceof Date) {
                return a.valueOf() === b.valueOf();
              }

              if (EJSON.isBinary(a) && EJSON.isBinary(b)) {
                if (a.length !== b.length) {
                  return false;
                }

                for (i = 0; i < a.length; i++) {
                  if (a[i] !== b[i]) {
                    return false;
                  }
                }

                return true;
              }

              if (typeof a.equals === 'function') {
                return a.equals(b, options);
              }

              if (typeof b.equals === 'function') {
                return b.equals(a, options);
              }

              if (a instanceof Array) {
                if (!(b instanceof Array)) {
                  return false;
                }

                if (a.length !== b.length) {
                  return false;
                }

                for (i = 0; i < a.length; i++) {
                  if (!EJSON.equals(a[i], b[i], options)) {
                    return false;
                  }
                }

                return true;
              } // fallback for custom types that don't implement their own equals


              switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {
                case 1:
                  return false;

                case 2:
                  return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));

                default: // Do nothing

              } // fall back to structural equality of objects


              let ret;
              const aKeys = Object.keys(a);
              const bKeys = Object.keys(b);

              if (keyOrderSensitive) {
                i = 0;
                ret = aKeys.every(key => {
                  if (i >= bKeys.length) {
                    return false;
                  }

                  if (key !== bKeys[i]) {
                    return false;
                  }

                  if (!EJSON.equals(a[key], b[bKeys[i]], options)) {
                    return false;
                  }

                  i++;
                  return true;
                });
              } else {
                i = 0;
                ret = aKeys.every(key => {
                  if (!hasOwn(b, key)) {
                    return false;
                  }

                  if (!EJSON.equals(a[key], b[key], options)) {
                    return false;
                  }

                  i++;
                  return true;
                });
              }

              return ret && i === bKeys.length;
            };
            /**
             * @summary Return a deep copy of `val`.
             * @locus Anywhere
             * @param {EJSON} val A value to copy.
             */

            EJSON.clone = v => {
              let ret;

              if (typeof v !== 'object') {
                return v;
              }

              if (v === null) {
                return null; // null has typeof "object"
              }

              if (v instanceof Date) {
                return new Date(v.getTime());
              } // RegExps are not really EJSON elements (eg we don't define a serialization
              // for them), but they're immutable anyway, so we can support them in clone.


              if (v instanceof RegExp) {
                return v;
              }

              if (EJSON.isBinary(v)) {
                ret = EJSON.newBinary(v.length);

                for (let i = 0; i < v.length; i++) {
                  ret[i] = v[i];
                }

                return ret;
              }

              if (Array.isArray(v)) {
                return v.map(value => EJSON.clone(value));
              }

              if (isArguments(v)) {
                return Array.from(v).map(value => EJSON.clone(value));
              } // handle general user-defined typed Objects if they have a clone method


              if (typeof v.clone === 'function') {
                return v.clone();
              } // handle other custom types


              if (EJSON._isCustomType(v)) {
                return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);
              } // handle other objects


              ret = {};
              Object.keys(v).forEach(key => {
                ret[key] = EJSON.clone(v[key]);
              });
              return ret;
            };
            /**
             * @summary Allocate a new buffer of binary data that EJSON can serialize.
             * @locus Anywhere
             * @param {Number} size The number of bytes of binary data to allocate.
             */
            // EJSON.newBinary is the public documented API for this functionality,
            // but the implementation is in the 'base64' package to avoid
            // introducing a circular dependency. (If the implementation were here,
            // then 'base64' would have to use EJSON.newBinary, and 'ejson' would
            // also have to use 'base64'.)


            EJSON.newBinary = Base64.newBinary;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stringify.js": function (_require3, _exports3, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/stringify.js                                                                                 //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Based on json2.js from https://github.com/douglascrockford/JSON-js
            //
            //    json2.js
            //    2012-10-08
            //
            //    Public Domain.
            //
            //    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
            function quote(string) {
              return JSON.stringify(string);
            }

            const str = (key, holder, singleIndent, outerIndent, canonical) => {
              const value = holder[key]; // What happens next depends on the value's type.

              switch (typeof value) {
                case 'string':
                  return quote(value);

                case 'number':
                  // JSON numbers must be finite. Encode non-finite numbers as null.
                  return isFinite(value) ? String(value) : 'null';

                case 'boolean':
                  return String(value);
                // If the type is 'object', we might be dealing with an object or an array or
                // null.

                case 'object':
                  // Due to a specification blunder in ECMAScript, typeof null is 'object',
                  // so watch out for that case.
                  if (!value) {
                    return 'null';
                  } // Make an array to hold the partial results of stringifying this object
                  // value.


                  const innerIndent = outerIndent + singleIndent;
                  const partial = []; // Is the value an array?

                  if (Array.isArray(value) || {}.hasOwnProperty.call(value, 'callee')) {
                    // The value is an array. Stringify every element. Use null as a
                    // placeholder for non-JSON values.
                    const length = value.length;

                    for (let i = 0; i < length; i += 1) {
                      partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';
                    } // Join all of the elements together, separated with commas, and wrap
                    // them in brackets.


                    let v;

                    if (partial.length === 0) {
                      v = '[]';
                    } else if (innerIndent) {
                      v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']';
                    } else {
                      v = '[' + partial.join(',') + ']';
                    }

                    return v;
                  } // Iterate through all of the keys in the object.


                  let keys = Object.keys(value);

                  if (canonical) {
                    keys = keys.sort();
                  }

                  keys.forEach(k => {
                    v = str(k, value, singleIndent, innerIndent, canonical);

                    if (v) {
                      partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);
                    }
                  }); // Join all of the member texts together, separated with commas,
                  // and wrap them in braces.

                  if (partial.length === 0) {
                    v = '{}';
                  } else if (innerIndent) {
                    v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';
                  } else {
                    v = '{' + partial.join(',') + '}';
                  }

                  return v;

                default: // Do nothing

              }
            }; // If the JSON object does not yet have a stringify method, give it one.


            const canonicalStringify = (value, options) => {
              // Make a fake root object containing our value under the key of ''.
              // Return the result of stringifying the value.
              const allOptions = Object.assign({
                indent: '',
                canonical: false
              }, options);

              if (allOptions.indent === true) {
                allOptions.indent = '  ';
              } else if (typeof allOptions.indent === 'number') {
                let newIndent = '';

                for (let i = 0; i < allOptions.indent; i++) {
                  newIndent += ' ';
                }

                allOptions.indent = newIndent;
              }

              return str('', {
                '': value
              }, allOptions.indent, '', allOptions.canonical);
            };

            _module2.exportDefault(canonicalStringify);
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ejson/ejson.js");

  /* Exports */
  Package._define("ejson", _exports2, {
    EJSON: EJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var DiffSequence;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "diff-sequence": { "diff.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                 //
            // packages/diff-sequence/diff.js                                                                  //
            //                                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              DiffSequence: () => DiffSequence
            });
            const DiffSequence = {};
            const hasOwn = Object.prototype.hasOwnProperty;

            function isObjEmpty(obj) {
              for (let key in Object(obj)) {
                if (hasOwn.call(obj, key)) {
                  return false;
                }
              }

              return true;
            } // ordered: bool.
            // old_results and new_results: collections of documents.
            //    if ordered, they are arrays.
            //    if unordered, they are IdMaps


            DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {
              if (ordered) DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);else DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);
            };

            DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {
              options = options || {};
              var projectionFn = options.projectionFn || EJSON.clone;

              if (observer.movedBefore) {
                throw new Error("_diffQueryUnordered called with a movedBefore observer!");
              }

              newResults.forEach(function (newDoc, id) {
                var oldDoc = oldResults.get(id);

                if (oldDoc) {
                  if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {
                    var projectedNew = projectionFn(newDoc);
                    var projectedOld = projectionFn(oldDoc);
                    var changedFields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                    if (!isObjEmpty(changedFields)) {
                      observer.changed(id, changedFields);
                    }
                  }
                } else if (observer.added) {
                  var fields = projectionFn(newDoc);
                  delete fields._id;
                  observer.added(newDoc._id, fields);
                }
              });

              if (observer.removed) {
                oldResults.forEach(function (oldDoc, id) {
                  if (!newResults.has(id)) observer.removed(id);
                });
              }
            };

            DiffSequence.diffQueryOrderedChanges = function (old_results, new_results, observer, options) {
              options = options || {};
              var projectionFn = options.projectionFn || EJSON.clone;
              var new_presence_of_id = {};
              new_results.forEach(function (doc) {
                if (new_presence_of_id[doc._id]) Meteor._debug("Duplicate _id in new_results");
                new_presence_of_id[doc._id] = true;
              });
              var old_index_of_id = {};
              old_results.forEach(function (doc, i) {
                if (doc._id in old_index_of_id) Meteor._debug("Duplicate _id in old_results");
                old_index_of_id[doc._id] = i;
              }); // ALGORITHM:
              //
              // To determine which docs should be considered "moved" (and which
              // merely change position because of other docs moving) we run
              // a "longest common subsequence" (LCS) algorithm.  The LCS of the
              // old doc IDs and the new doc IDs gives the docs that should NOT be
              // considered moved.
              // To actually call the appropriate callbacks to get from the old state to the
              // new state:
              // First, we call removed() on all the items that only appear in the old
              // state.
              // Then, once we have the items that should not move, we walk through the new
              // results array group-by-group, where a "group" is a set of items that have
              // moved, anchored on the end by an item that should not move.  One by one, we
              // move each of those elements into place "before" the anchoring end-of-group
              // item, and fire changed events on them if necessary.  Then we fire a changed
              // event on the anchor, and move on to the next group.  There is always at
              // least one group; the last group is anchored by a virtual "null" id at the
              // end.
              // Asymptotically: O(N k) where k is number of ops, or potentially
              // O(N log N) if inner loop of LCS were made to be binary search.
              //////// LCS (longest common sequence, with respect to _id)
              // (see Wikipedia article on Longest Increasing Subsequence,
              // where the LIS is taken of the sequence of old indices of the
              // docs in new_results)
              //
              // unmoved: the output of the algorithm; members of the LCS,
              // in the form of indices into new_results

              var unmoved = []; // max_seq_len: length of LCS found so far

              var max_seq_len = 0; // seq_ends[i]: the index into new_results of the last doc in a
              // common subsequence of length of i+1 <= max_seq_len

              var N = new_results.length;
              var seq_ends = new Array(N); // ptrs:  the common subsequence ending with new_results[n] extends
              // a common subsequence ending with new_results[ptr[n]], unless
              // ptr[n] is -1.

              var ptrs = new Array(N); // virtual sequence of old indices of new results

              var old_idx_seq = function (i_new) {
                return old_index_of_id[new_results[i_new]._id];
              }; // for each item in new_results, use it to extend a common subsequence
              // of length j <= max_seq_len


              for (var i = 0; i < N; i++) {
                if (old_index_of_id[new_results[i]._id] !== undefined) {
                  var j = max_seq_len; // this inner loop would traditionally be a binary search,
                  // but scanning backwards we will likely find a subseq to extend
                  // pretty soon, bounded for example by the total number of ops.
                  // If this were to be changed to a binary search, we'd still want
                  // to scan backwards a bit as an optimization.

                  while (j > 0) {
                    if (old_idx_seq(seq_ends[j - 1]) < old_idx_seq(i)) break;
                    j--;
                  }

                  ptrs[i] = j === 0 ? -1 : seq_ends[j - 1];
                  seq_ends[j] = i;
                  if (j + 1 > max_seq_len) max_seq_len = j + 1;
                }
              } // pull out the LCS/LIS into unmoved


              var idx = max_seq_len === 0 ? -1 : seq_ends[max_seq_len - 1];

              while (idx >= 0) {
                unmoved.push(idx);
                idx = ptrs[idx];
              } // the unmoved item list is built backwards, so fix that


              unmoved.reverse(); // the last group is always anchored by the end of the result list, which is
              // an id of "null"

              unmoved.push(new_results.length);
              old_results.forEach(function (doc) {
                if (!new_presence_of_id[doc._id]) observer.removed && observer.removed(doc._id);
              }); // for each group of things in the new_results that is anchored by an unmoved
              // element, iterate through the things before it.

              var startOfGroup = 0;
              unmoved.forEach(function (endOfGroup) {
                var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;
                var oldDoc, newDoc, fields, projectedNew, projectedOld;

                for (var i = startOfGroup; i < endOfGroup; i++) {
                  newDoc = new_results[i];

                  if (!hasOwn.call(old_index_of_id, newDoc._id)) {
                    fields = projectionFn(newDoc);
                    delete fields._id;
                    observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
                    observer.added && observer.added(newDoc._id, fields);
                  } else {
                    // moved
                    oldDoc = old_results[old_index_of_id[newDoc._id]];
                    projectedNew = projectionFn(newDoc);
                    projectedOld = projectionFn(oldDoc);
                    fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                    if (!isObjEmpty(fields)) {
                      observer.changed && observer.changed(newDoc._id, fields);
                    }

                    observer.movedBefore && observer.movedBefore(newDoc._id, groupId);
                  }
                }

                if (groupId) {
                  newDoc = new_results[endOfGroup];
                  oldDoc = old_results[old_index_of_id[newDoc._id]];
                  projectedNew = projectionFn(newDoc);
                  projectedOld = projectionFn(oldDoc);
                  fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                  if (!isObjEmpty(fields)) {
                    observer.changed && observer.changed(newDoc._id, fields);
                  }
                }

                startOfGroup = endOfGroup + 1;
              });
            }; // General helper for diff-ing two objects.
            // callbacks is an object like so:
            // { leftOnly: function (key, leftValue) {...},
            //   rightOnly: function (key, rightValue) {...},
            //   both: function (key, leftValue, rightValue) {...},
            // }


            DiffSequence.diffObjects = function (left, right, callbacks) {
              Object.keys(left).forEach(key => {
                const leftValue = left[key];

                if (hasOwn.call(right, key)) {
                  callbacks.both && callbacks.both(key, leftValue, right[key]);
                } else {
                  callbacks.leftOnly && callbacks.leftOnly(key, leftValue);
                }
              });

              if (callbacks.rightOnly) {
                Object.keys(right).forEach(key => {
                  const rightValue = right[key];

                  if (!hasOwn.call(left, key)) {
                    callbacks.rightOnly(key, rightValue);
                  }
                });
              }
            };

            DiffSequence.diffMaps = function (left, right, callbacks) {
              left.forEach(function (leftValue, key) {
                if (right.has(key)) {
                  callbacks.both && callbacks.both(key, leftValue, right.get(key));
                } else {
                  callbacks.leftOnly && callbacks.leftOnly(key, leftValue);
                }
              });

              if (callbacks.rightOnly) {
                right.forEach(function (rightValue, key) {
                  if (!left.has(key)) {
                    callbacks.rightOnly(key, rightValue);
                  }
                });
              }
            };

            DiffSequence.makeChangedFields = function (newDoc, oldDoc) {
              var fields = {};
              DiffSequence.diffObjects(oldDoc, newDoc, {
                leftOnly: function (key, value) {
                  fields[key] = undefined;
                },
                rightOnly: function (key, value) {
                  fields[key] = value;
                },
                both: function (key, leftValue, rightValue) {
                  if (!EJSON.equals(leftValue, rightValue)) fields[key] = rightValue;
                }
              });
              return fields;
            };

            DiffSequence.applyChanges = function (doc, changeFields) {
              Object.keys(changeFields).forEach(key => {
                const value = changeFields[key];

                if (typeof value === "undefined") {
                  delete doc[key];
                } else {
                  doc[key] = value;
                }
              });
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/diff-sequence/diff.js");

  /* Exports */
  Package._define("diff-sequence", _exports2, {
    DiffSequence: DiffSequence
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var GeoJSON;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "geojson-utils": { "main.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/main.js                                                                          //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports.GeoJSON = _require("./geojson-utils.js");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "geojson-utils.js": function (_require2, _exports2, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/geojson-utils.js                                                                 //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            (function () {
              var gju = {};

              // Export the geojson object for **CommonJS**
              if (typeof _module !== 'undefined' && _module.exports) {
                _module.exports = gju;
              }

              // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js
              gju.lineStringsIntersect = function (l1, l2) {
                var intersects = [];
                for (var i = 0; i <= l1.coordinates.length - 2; ++i) {
                  for (var j = 0; j <= l2.coordinates.length - 2; ++j) {
                    var a1 = {
                      x: l1.coordinates[i][1],
                      y: l1.coordinates[i][0]
                    },
                        a2 = {
                      x: l1.coordinates[i + 1][1],
                      y: l1.coordinates[i + 1][0]
                    },
                        b1 = {
                      x: l2.coordinates[j][1],
                      y: l2.coordinates[j][0]
                    },
                        b2 = {
                      x: l2.coordinates[j + 1][1],
                      y: l2.coordinates[j + 1][0]
                    },
                        ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
                        ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
                        u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
                    if (u_b != 0) {
                      var ua = ua_t / u_b,
                          ub = ub_t / u_b;
                      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
                        intersects.push({
                          'type': 'Point',
                          'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]
                        });
                      }
                    }
                  }
                }
                if (intersects.length == 0) intersects = false;
                return intersects;
              };

              // Bounding Box

              function boundingBoxAroundPolyCoords(coords) {
                var xAll = [],
                    yAll = [];

                for (var i = 0; i < coords[0].length; i++) {
                  xAll.push(coords[0][i][1]);
                  yAll.push(coords[0][i][0]);
                }

                xAll = xAll.sort(function (a, b) {
                  return a - b;
                });
                yAll = yAll.sort(function (a, b) {
                  return a - b;
                });

                return [[xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]]];
              }

              gju.pointInBoundingBox = function (point, bounds) {
                return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]);
              };

              // Point in Polygon
              // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices

              function pnpoly(x, y, coords) {
                var vert = [[0, 0]];

                for (var i = 0; i < coords.length; i++) {
                  for (var j = 0; j < coords[i].length; j++) {
                    vert.push(coords[i][j]);
                  }
                  vert.push([0, 0]);
                }

                var inside = false;
                for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {
                  if (vert[i][0] > y != vert[j][0] > y && x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1]) inside = !inside;
                }

                return inside;
              }

              gju.pointInPolygon = function (p, poly) {
                var coords = poly.type == "Polygon" ? [poly.coordinates] : poly.coordinates;

                var insideBox = false;
                for (var i = 0; i < coords.length; i++) {
                  if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true;
                }
                if (!insideBox) return false;

                var insidePoly = false;
                for (var i = 0; i < coords.length; i++) {
                  if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true;
                }

                return insidePoly;
              };

              gju.numberToRadius = function (number) {
                return number * Math.PI / 180;
              };

              gju.numberToDegree = function (number) {
                return number * 180 / Math.PI;
              };

              // written with help from @tautologe
              gju.drawCircle = function (radiusInMeters, centerPoint, steps) {
                var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],
                    dist = radiusInMeters / 1000 / 6371,

                // convert meters to radiant
                radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],
                    steps = steps || 15,

                // 15 sided circle
                poly = [[center[0], center[1]]];
                for (var i = 0; i < steps; i++) {
                  var brng = 2 * Math.PI * i / steps;
                  var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist) + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));
                  var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]), Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));
                  poly[i] = [];
                  poly[i][1] = gju.numberToDegree(lat);
                  poly[i][0] = gju.numberToDegree(lng);
                }
                return {
                  "type": "Polygon",
                  "coordinates": [poly]
                };
              };

              // assumes rectangle starts at lower left point
              gju.rectangleCentroid = function (rectangle) {
                var bbox = rectangle.coordinates[0];
                var xmin = bbox[0][0],
                    ymin = bbox[0][1],
                    xmax = bbox[2][0],
                    ymax = bbox[2][1];
                var xwidth = xmax - xmin;
                var ywidth = ymax - ymin;
                return {
                  'type': 'Point',
                  'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]
                };
              };

              // from http://www.movable-type.co.uk/scripts/latlong.html
              gju.pointDistance = function (pt1, pt2) {
                var lon1 = pt1.coordinates[0],
                    lat1 = pt1.coordinates[1],
                    lon2 = pt2.coordinates[0],
                    lat2 = pt2.coordinates[1],
                    dLat = gju.numberToRadius(lat2 - lat1),
                    dLon = gju.numberToRadius(lon2 - lon1),
                    a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1)) * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),
                    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                // Earth radius is 6371 km
                return 6371 * c * 1000; // returns meters
              },

              // checks if geometry lies entirely within a circle
              // works with Point, LineString, Polygon
              gju.geometryWithinRadius = function (geometry, center, radius) {
                if (geometry.type == 'Point') {
                  return gju.pointDistance(geometry, center) <= radius;
                } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {
                  var point = {};
                  var coordinates;
                  if (geometry.type == 'Polygon') {
                    // it's enough to check the exterior ring of the Polygon
                    coordinates = geometry.coordinates[0];
                  } else {
                    coordinates = geometry.coordinates;
                  }
                  for (var i in coordinates) {
                    point.coordinates = coordinates[i];
                    if (gju.pointDistance(point, center) > radius) {
                      return false;
                    }
                  }
                }
                return true;
              };

              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
              gju.area = function (polygon) {
                var area = 0;
                // TODO: polygon holes at coordinates[1]
                var points = polygon.coordinates[0];
                var j = points.length - 1;
                var p1, p2;

                for (var i = 0; i < points.length; j = i++) {
                  var p1 = {
                    x: points[i][1],
                    y: points[i][0]
                  };
                  var p2 = {
                    x: points[j][1],
                    y: points[j][0]
                  };
                  area += p1.x * p2.y;
                  area -= p1.y * p2.x;
                }

                area /= 2;
                return area;
              },

              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
              gju.centroid = function (polygon) {
                var f,
                    x = 0,
                    y = 0;
                // TODO: polygon holes at coordinates[1]
                var points = polygon.coordinates[0];
                var j = points.length - 1;
                var p1, p2;

                for (var i = 0; i < points.length; j = i++) {
                  var p1 = {
                    x: points[i][1],
                    y: points[i][0]
                  };
                  var p2 = {
                    x: points[j][1],
                    y: points[j][0]
                  };
                  f = p1.x * p2.y - p2.x * p1.y;
                  x += (p1.x + p2.x) * f;
                  y += (p1.y + p2.y) * f;
                }

                f = gju.area(polygon) * 6;
                return {
                  'type': 'Point',
                  'coordinates': [y / f, x / f]
                };
              }, gju.simplify = function (source, kink) {
                /* source[] array of geojson points */
                /* kink	in metres, kinks above this depth kept  */
                /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
                kink = kink || 20;
                source = source.map(function (o) {
                  return {
                    lng: o.coordinates[0],
                    lat: o.coordinates[1]
                  };
                });

                var n_source, n_stack, n_dest, start, end, i, sig;
                var dev_sqr, max_dev_sqr, band_sqr;
                var x12, y12, d12, x13, y13, d13, x23, y23, d23;
                var F = Math.PI / 180.0 * 0.5;
                var index = new Array(); /* aray of indexes of source points to include in the reduced line */
                var sig_start = new Array(); /* indices of start & end of working section */
                var sig_end = new Array();

                /* check for simple cases */

                if (source.length < 3) return source; /* one or two points */

                /* more complex case. initialize stack */

                n_source = source.length;
                band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */
                band_sqr *= band_sqr;
                n_dest = 0;
                sig_start[0] = 0;
                sig_end[0] = n_source - 1;
                n_stack = 1;

                /* while the stack is not empty  ... */
                while (n_stack > 0) {

                  /* ... pop the top-most entries off the stacks */

                  start = sig_start[n_stack - 1];
                  end = sig_end[n_stack - 1];
                  n_stack--;

                  if (end - start > 1) {
                    /* any intermediate points ? */

                    /* ... yes, so find most deviant intermediate point to
                    either side of line joining start & end points */

                    x12 = source[end].lng() - source[start].lng();
                    y12 = source[end].lat() - source[start].lat();
                    if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);
                    x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */
                    d12 = x12 * x12 + y12 * y12;

                    for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {

                      x13 = source[i].lng() - source[start].lng();
                      y13 = source[i].lat() - source[start].lat();
                      if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);
                      x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));
                      d13 = x13 * x13 + y13 * y13;

                      x23 = source[i].lng() - source[end].lng();
                      y23 = source[i].lat() - source[end].lat();
                      if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);
                      x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));
                      d23 = x23 * x23 + y23 * y23;

                      if (d13 >= d12 + d23) dev_sqr = d23;else if (d23 >= d12 + d13) dev_sqr = d13;else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle
                      if (dev_sqr > max_dev_sqr) {
                        sig = i;
                        max_dev_sqr = dev_sqr;
                      }
                    }

                    if (max_dev_sqr < band_sqr) {
                      /* is there a sig. intermediate point ? */
                      /* ... no, so transfer current start point */
                      index[n_dest] = start;
                      n_dest++;
                    } else {
                      /* ... yes, so push two sub-sections on stack for further processing */
                      n_stack++;
                      sig_start[n_stack - 1] = sig;
                      sig_end[n_stack - 1] = end;
                      n_stack++;
                      sig_start[n_stack - 1] = start;
                      sig_end[n_stack - 1] = sig;
                    }
                  } else {
                    /* ... no intermediate points, so transfer current start point */
                    index[n_dest] = start;
                    n_dest++;
                  }
                }

                /* transfer last point */
                index[n_dest] = n_source - 1;
                n_dest++;

                /* make return array */
                var r = new Array();
                for (var i = 0; i < n_dest; i++) r.push(source[index[i]]);

                return r.map(function (o) {
                  return {
                    type: "Point",
                    coordinates: [o.lng, o.lat]
                  };
                });
              };

              // http://www.movable-type.co.uk/scripts/latlong.html#destPoint
              gju.destinationPoint = function (pt, brng, dist) {
                dist = dist / 6371; // convert dist to angular distance in radians
                brng = gju.numberToRadius(brng);

                var lat1 = gju.numberToRadius(pt.coordinates[0]);
                var lon1 = gju.numberToRadius(pt.coordinates[1]);

                var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));
                var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2));
                lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // normalise to -180..+180º

                return {
                  'type': 'Point',
                  'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)]
                };
              };
            })();

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/geojson-utils/main.js");

  /* Exports */
  Package._define("geojson-utils", _exports3, {
    GeoJSON: GeoJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var IdMap;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "id-map": { "id-map.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                        //
            // packages/id-map/id-map.js                                                              //
            //                                                                                        //
            ////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              IdMap: () => IdMap
            });
            const hasOwn = Object.prototype.hasOwnProperty;

            class IdMap {
              constructor(idStringify, idParse) {
                this.clear();
                this._idStringify = idStringify || JSON.stringify;
                this._idParse = idParse || JSON.parse;
              } // Some of these methods are designed to match methods on OrderedDict, since
              // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
              // (Conceivably, this should be replaced with "UnorderedDict" with a specific
              // set of methods that overlap between the two.)


              get(id) {
                var key = this._idStringify(id);

                return this._map[key];
              }

              set(id, value) {
                var key = this._idStringify(id);

                this._map[key] = value;
              }

              remove(id) {
                var key = this._idStringify(id);

                delete this._map[key];
              }

              has(id) {
                var key = this._idStringify(id);

                return hasOwn.call(this._map, key);
              }

              empty() {
                for (let key in this._map) {
                  return false;
                }

                return true;
              }

              clear() {
                this._map = Object.create(null);
              } // Iterates over the items in the map. Return `false` to break the loop.


              forEach(iterator) {
                // don't use _.each, because we can't break out of it.
                var keys = Object.keys(this._map);

                for (var i = 0; i < keys.length; i++) {
                  var breakIfFalse = iterator.call(null, this._map[keys[i]], this._idParse(keys[i]));

                  if (breakIfFalse === false) {
                    return;
                  }
                }
              }

              size() {
                return Object.keys(this._map).length;
              }

              setDefault(id, def) {
                var key = this._idStringify(id);

                if (hasOwn.call(this._map, key)) {
                  return this._map[key];
                }

                this._map[key] = def;
                return def;
              } // Assumes that values are EJSON-cloneable, and that we don't need to clone
              // IDs (ie, that nobody is going to mutate an ObjectId).


              clone() {
                var clone = new IdMap(this._idStringify, this._idParse);
                this.forEach(function (value, id) {
                  clone.set(id, EJSON.clone(value));
                });
                return clone;
              }

            }
            ////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/id-map/id-map.js");

  /* Exports */
  Package._define("id-map", _exports2, {
    IdMap: IdMap
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Random;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "random": { "random.js": function (_require) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/random/random.js                                                                                     //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,
            // window.crypto.getRandomValues() in the browser) when available. If these
            // PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically
            // strong, and we seed it with various sources such as the date, Math.random,
            // and window size on the client.  When using crypto.getRandomValues(), our
            // primitive is hexString(), from which we construct fraction(). When using
            // window.crypto.getRandomValues() or alea, the primitive is fraction and we use
            // that to construct hex string.
            if (Meteor.isServer) var nodeCrypto = Npm.require('crypto'); // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript
            // for a full discussion and Alea implementation.

            var Alea = function () {
              function Mash() {
                var n = 0xefc8249d;

                var mash = function (data) {
                  data = data.toString();

                  for (var i = 0; i < data.length; i++) {
                    n += data.charCodeAt(i);
                    var h = 0.02519603282416938 * n;
                    n = h >>> 0;
                    h -= n;
                    h *= n;
                    n = h >>> 0;
                    h -= n;
                    n += h * 0x100000000; // 2^32
                  }

                  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
                };

                mash.version = 'Mash 0.9';
                return mash;
              }

              return function (args) {
                var s0 = 0;
                var s1 = 0;
                var s2 = 0;
                var c = 1;

                if (args.length == 0) {
                  args = [+new Date()];
                }

                var mash = Mash();
                s0 = mash(' ');
                s1 = mash(' ');
                s2 = mash(' ');

                for (var i = 0; i < args.length; i++) {
                  s0 -= mash(args[i]);

                  if (s0 < 0) {
                    s0 += 1;
                  }

                  s1 -= mash(args[i]);

                  if (s1 < 0) {
                    s1 += 1;
                  }

                  s2 -= mash(args[i]);

                  if (s2 < 0) {
                    s2 += 1;
                  }
                }

                mash = null;

                var random = function () {
                  var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32

                  s0 = s1;
                  s1 = s2;
                  return s2 = t - (c = t | 0);
                };

                random.uint32 = function () {
                  return random() * 0x100000000; // 2^32
                };

                random.fract53 = function () {
                  return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
                };

                random.version = 'Alea 0.9';
                random.args = args;
                return random;
              }(Array.prototype.slice.call(arguments));
            };

            var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz";
            var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789-_"; // `type` is one of `RandomGenerator.Type` as defined below.
            //
            // options:
            // - seeds: (required, only for RandomGenerator.Type.ALEA) an array
            //   whose items will be `toString`ed and used as the seed to the Alea
            //   algorithm

            var RandomGenerator = function (type, options) {
              var self = this;
              self.type = type;

              if (!RandomGenerator.Type[type]) {
                throw new Error("Unknown random generator type: " + type);
              }

              if (type === RandomGenerator.Type.ALEA) {
                if (!options.seeds) {
                  throw new Error("No seeds were provided for Alea PRNG");
                }

                self.alea = Alea.apply(null, options.seeds);
              }
            }; // Types of PRNGs supported by the `RandomGenerator` class


            RandomGenerator.Type = {
              // Use Node's built-in `crypto.getRandomBytes` (cryptographically
              // secure but not seedable, runs only on the server). Reverts to
              // `crypto.getPseudoRandomBytes` in the extremely uncommon case that
              // there isn't enough entropy yet
              NODE_CRYPTO: "NODE_CRYPTO",
              // Use non-IE browser's built-in `window.crypto.getRandomValues`
              // (cryptographically secure but not seedable, runs only in the
              // browser).
              BROWSER_CRYPTO: "BROWSER_CRYPTO",
              // Use the *fast*, seedaable and not cryptographically secure
              // Alea algorithm
              ALEA: "ALEA"
            };
            /**
             * @name Random.fraction
             * @summary Return a number between 0 and 1, like `Math.random`.
             * @locus Anywhere
             */

            RandomGenerator.prototype.fraction = function () {
              var self = this;

              if (self.type === RandomGenerator.Type.ALEA) {
                return self.alea();
              } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {
                var numerator = parseInt(self.hexString(8), 16);
                return numerator * 2.3283064365386963e-10; // 2^-32
              } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {
                var array = new Uint32Array(1);
                window.crypto.getRandomValues(array);
                return array[0] * 2.3283064365386963e-10; // 2^-32
              } else {
                throw new Error('Unknown random generator type: ' + self.type);
              }
            };
            /**
             * @name Random.hexString
             * @summary Return a random string of `n` hexadecimal digits.
             * @locus Anywhere
             * @param {Number} n Length of the string
             */

            RandomGenerator.prototype.hexString = function (digits) {
              var self = this;

              if (self.type === RandomGenerator.Type.NODE_CRYPTO) {
                var numBytes = Math.ceil(digits / 2);
                var bytes; // Try to get cryptographically strong randomness. Fall back to
                // non-cryptographically strong if not available.

                try {
                  bytes = nodeCrypto.randomBytes(numBytes);
                } catch (e) {
                  // XXX should re-throw any error except insufficient entropy
                  bytes = nodeCrypto.pseudoRandomBytes(numBytes);
                }

                var result = bytes.toString("hex"); // If the number of digits is odd, we'll have generated an extra 4 bits
                // of randomness, so we need to trim the last digit.

                return result.substring(0, digits);
              } else {
                return this._randomString(digits, "0123456789abcdef");
              }
            };

            RandomGenerator.prototype._randomString = function (charsCount, alphabet) {
              var self = this;
              var digits = [];

              for (var i = 0; i < charsCount; i++) {
                digits[i] = self.choice(alphabet);
              }

              return digits.join("");
            };
            /**
             * @name Random.id
             * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is
             * likely to be unique in the whole world.
             * @locus Anywhere
             * @param {Number} [n] Optional length of the identifier in characters
             *   (defaults to 17)
             */

            RandomGenerator.prototype.id = function (charsCount) {
              var self = this; // 17 characters is around 96 bits of entropy, which is the amount of
              // state in the Alea PRNG.

              if (charsCount === undefined) charsCount = 17;
              return self._randomString(charsCount, UNMISTAKABLE_CHARS);
            };
            /**
             * @name Random.secret
             * @summary Return a random string of printable characters with 6 bits of
             * entropy per character. Use `Random.secret` for security-critical secrets
             * that are intended for machine, rather than human, consumption.
             * @locus Anywhere
             * @param {Number} [n] Optional length of the secret string (defaults to 43
             *   characters, or 256 bits of entropy)
             */

            RandomGenerator.prototype.secret = function (charsCount) {
              var self = this; // Default to 256 bits of entropy, or 43 characters at 6 bits per
              // character.

              if (charsCount === undefined) charsCount = 43;
              return self._randomString(charsCount, BASE64_CHARS);
            };
            /**
             * @name Random.choice
             * @summary Return a random element of the given array or string.
             * @locus Anywhere
             * @param {Array|String} arrayOrString Array or string to choose from
             */

            RandomGenerator.prototype.choice = function (arrayOrString) {
              var index = Math.floor(this.fraction() * arrayOrString.length);
              if (typeof arrayOrString === "string") return arrayOrString.substr(index, 1);else return arrayOrString[index];
            }; // instantiate RNG.  Heuristically collect entropy from various sources when a
            // cryptographic PRNG isn't available.
            // client sources


            var height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
            var width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
            var agent = typeof navigator !== 'undefined' && navigator.userAgent || "";

            function createAleaGeneratorWithGeneratedSeed() {
              return new RandomGenerator(RandomGenerator.Type.ALEA, {
                seeds: [new Date(), height, width, agent, Math.random()]
              });
            }

            ;

            if (Meteor.isServer) {
              Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);
            } else {
              if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) {
                Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);
              } else {
                // On IE 10 and below, there's no browser crypto API
                // available. Fall back to Alea
                //
                // XXX looks like at the moment, we use Alea in IE 11 as well,
                // which has `window.msCrypto` instead of `window.crypto`.
                Random = createAleaGeneratorWithGeneratedSeed();
              }
            } // Create a non-cryptographically secure PRNG with a given seed (using
            // the Alea algorithm)


            Random.createWithSeeds = function () {
              for (var _len = arguments.length, seeds = new Array(_len), _key = 0; _key < _len; _key++) {
                seeds[_key] = arguments[_key];
              }

              if (seeds.length === 0) {
                throw new Error("No seeds were provided");
              }

              return new RandomGenerator(RandomGenerator.Type.ALEA, {
                seeds: seeds
              });
            }; // Used like `Random`, but much faster and not cryptographically
            // secure


            Random.insecure = createAleaGeneratorWithGeneratedSeed();
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/random/random.js");

  /* Exports */
  Package._define("random", {
    Random: Random
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var IdMap = Package['id-map'].IdMap;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var hexString, MongoID;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "mongo-id": { "id.js": function (_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                           //
            // packages/mongo-id/id.js                                                                   //
            //                                                                                           //
            ///////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              MongoID: () => MongoID
            });
            let EJSON;
            _module.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 0);
            let Random;
            _module.link("meteor/random", {
              Random(v) {
                Random = v;
              }

            }, 1);
            const MongoID = {};

            MongoID._looksLikeObjectID = str => str.length === 24 && str.match(/^[0-9a-f]*$/);

            MongoID.ObjectID = class ObjectID {
              constructor(hexString) {
                //random-based impl of Mongo ObjectID
                if (hexString) {
                  hexString = hexString.toLowerCase();

                  if (!MongoID._looksLikeObjectID(hexString)) {
                    throw new Error('Invalid hexadecimal string for creating an ObjectID');
                  } // meant to work with _.isEqual(), which relies on structural equality


                  this._str = hexString;
                } else {
                  this._str = Random.hexString(24);
                }
              }

              equals(other) {
                return other instanceof MongoID.ObjectID && this.valueOf() === other.valueOf();
              }

              toString() {
                return "ObjectID(\"".concat(this._str, "\")");
              }

              clone() {
                return new MongoID.ObjectID(this._str);
              }

              typeName() {
                return 'oid';
              }

              getTimestamp() {
                return Number.parseInt(this._str.substr(0, 8), 16);
              }

              valueOf() {
                return this._str;
              }

              toJSONValue() {
                return this.valueOf();
              }

              toHexString() {
                return this.valueOf();
              }

            };
            EJSON.addType('oid', str => new MongoID.ObjectID(str));

            MongoID.idStringify = id => {
              if (id instanceof MongoID.ObjectID) {
                return id.valueOf();
              } else if (typeof id === 'string') {
                if (id === '') {
                  return id;
                } else if (id.startsWith('-') || // escape previously dashed strings
                id.startsWith('~') || // escape escaped numbers, true, false
                MongoID._looksLikeObjectID(id) || // escape object-id-form strings
                id.startsWith('{')) {
                  // escape object-form strings, for maybe implementing later
                  return "-".concat(id);
                } else {
                  return id; // other strings go through unchanged.
                }
              } else if (id === undefined) {
                return '-';
              } else if (typeof id === 'object' && id !== null) {
                throw new Error('Meteor does not currently support objects other than ObjectID as ids');
              } else {
                // Numbers, true, false, null
                return "~".concat(JSON.stringify(id));
              }
            };

            MongoID.idParse = id => {
              if (id === '') {
                return id;
              } else if (id === '-') {
                return undefined;
              } else if (id.startsWith('-')) {
                return id.substr(1);
              } else if (id.startsWith('~')) {
                return JSON.parse(id.substr(1));
              } else if (MongoID._looksLikeObjectID(id)) {
                return new MongoID.ObjectID(id);
              } else {
                return id;
              }
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/mongo-id/id.js");

  /* Exports */
  Package._define("mongo-id", _exports2, {
    MongoID: MongoID
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var OrderedDict;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ordered-dict": { "ordered_dict.js": function (_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                      //
            // packages/ordered-dict/ordered_dict.js                                                                //
            //                                                                                                      //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              OrderedDict: () => OrderedDict
            });

            // This file defines an ordered dictionary abstraction that is useful for
            // maintaining a dataset backed by observeChanges.  It supports ordering items
            // by specifying the item they now come before.
            // The implementation is a dictionary that contains nodes of a doubly-linked
            // list as its values.
            // constructs a new element struct
            // next and prev are whole elements, not keys.
            function element(key, value, next, prev) {
              return {
                key: key,
                value: value,
                next: next,
                prev: prev
              };
            }

            class OrderedDict {
              constructor() {
                this._dict = Object.create(null);
                this._first = null;
                this._last = null;
                this._size = 0;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                if (typeof args[0] === 'function') {
                  this._stringify = args.shift();
                } else {
                  this._stringify = function (x) {
                    return x;
                  };
                }

                args.forEach(kv => this.putBefore(kv[0], kv[1], null));
              } // the "prefix keys with a space" thing comes from here
              // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649


              _k(key) {
                return " " + this._stringify(key);
              }

              empty() {
                return !this._first;
              }

              size() {
                return this._size;
              }

              _linkEltIn(elt) {
                if (!elt.next) {
                  elt.prev = this._last;
                  if (this._last) this._last.next = elt;
                  this._last = elt;
                } else {
                  elt.prev = elt.next.prev;
                  elt.next.prev = elt;
                  if (elt.prev) elt.prev.next = elt;
                }

                if (this._first === null || this._first === elt.next) this._first = elt;
              }

              _linkEltOut(elt) {
                if (elt.next) elt.next.prev = elt.prev;
                if (elt.prev) elt.prev.next = elt.next;
                if (elt === this._last) this._last = elt.prev;
                if (elt === this._first) this._first = elt.next;
              }

              putBefore(key, item, before) {
                if (this._dict[this._k(key)]) throw new Error("Item " + key + " already present in OrderedDict");
                var elt = before ? element(key, item, this._dict[this._k(before)]) : element(key, item, null);
                if (typeof elt.next === "undefined") throw new Error("could not find item to put this one before");

                this._linkEltIn(elt);

                this._dict[this._k(key)] = elt;
                this._size++;
              }

              append(key, item) {
                this.putBefore(key, item, null);
              }

              remove(key) {
                var elt = this._dict[this._k(key)];

                if (typeof elt === "undefined") throw new Error("Item " + key + " not present in OrderedDict");

                this._linkEltOut(elt);

                this._size--;
                delete this._dict[this._k(key)];
                return elt.value;
              }

              get(key) {
                if (this.has(key)) {
                  return this._dict[this._k(key)].value;
                }
              }

              has(key) {
                return Object.prototype.hasOwnProperty.call(this._dict, this._k(key));
              } // Iterate through the items in this dictionary in order, calling
              // iter(value, key, index) on each one.
              // Stops whenever iter returns OrderedDict.BREAK, or after the last element.


              forEach(iter) {
                let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var i = 0;
                var elt = this._first;

                while (elt !== null) {
                  var b = iter.call(context, elt.value, elt.key, i);
                  if (b === OrderedDict.BREAK) return;
                  elt = elt.next;
                  i++;
                }
              }

              first() {
                if (this.empty()) {
                  return;
                }

                return this._first.key;
              }

              firstValue() {
                if (this.empty()) {
                  return;
                }

                return this._first.value;
              }

              last() {
                if (this.empty()) {
                  return;
                }

                return this._last.key;
              }

              lastValue() {
                if (this.empty()) {
                  return;
                }

                return this._last.value;
              }

              prev(key) {
                if (this.has(key)) {
                  var elt = this._dict[this._k(key)];

                  if (elt.prev) return elt.prev.key;
                }

                return null;
              }

              next(key) {
                if (this.has(key)) {
                  var elt = this._dict[this._k(key)];

                  if (elt.next) return elt.next.key;
                }

                return null;
              }

              moveBefore(key, before) {
                var elt = this._dict[this._k(key)];

                var eltBefore = before ? this._dict[this._k(before)] : null;

                if (typeof elt === "undefined") {
                  throw new Error("Item to move is not present");
                }

                if (typeof eltBefore === "undefined") {
                  throw new Error("Could not find element to move this one before");
                }

                if (eltBefore === elt.next) // no moving necessary
                  return; // remove from its old place

                this._linkEltOut(elt); // patch into its new place


                elt.next = eltBefore;

                this._linkEltIn(elt);
              } // Linear, sadly.


              indexOf(key) {
                var ret = null;
                this.forEach((v, k, i) => {
                  if (this._k(k) === this._k(key)) {
                    ret = i;
                    return OrderedDict.BREAK;
                  }

                  return;
                });
                return ret;
              }

              _checkRep() {
                Object.keys(this._dict).forEach(k => {
                  const v = this._dict[k];

                  if (v.next === v) {
                    throw new Error("Next is a loop");
                  }

                  if (v.prev === v) {
                    throw new Error("Prev is a loop");
                  }
                });
              }

            }

            OrderedDict.BREAK = {
              "break": true
            };
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ordered-dict/ordered_dict.js");

  /* Exports */
  Package._define("ordered-dict", _exports2, {
    OrderedDict: OrderedDict
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Tracker, Deps, computation;

  var _require = meteorInstall({ "node_modules": { "meteor": { "tracker": { "tracker.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/tracker/tracker.js                                                                                        //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /////////////////////////////////////////////////////
            // Package docs at http://docs.meteor.com/#tracker //
            /////////////////////////////////////////////////////

            /**
             * @namespace Tracker
             * @summary The namespace for Tracker-related methods.
             */
            Tracker = {};
            /**
             * @namespace Deps
             * @deprecated
             */

            Deps = Tracker; // http://docs.meteor.com/#tracker_active

            /**
             * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
             * @locus Client
             * @type {Boolean}
             */

            Tracker.active = false; // http://docs.meteor.com/#tracker_currentcomputation

            /**
             * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
             * @locus Client
             * @type {Tracker.Computation}
             */

            Tracker.currentComputation = null;

            function setCurrentComputation(c) {
              Tracker.currentComputation = c;
              Tracker.active = !!c;
            }

            function _debugFunc() {
              // We want this code to work without Meteor, and also without
              // "console" (which is technically non-standard and may be missing
              // on some browser we come across, like it was on IE 7).
              //
              // Lazy evaluation because `Meteor` does not exist right away.(??)
              return typeof Meteor !== "undefined" ? Meteor._debug : typeof console !== "undefined" && console.error ? function () {
                console.error.apply(console, arguments);
              } : function () {};
            }

            function _maybeSuppressMoreLogs(messagesLength) {
              // Sometimes when running tests, we intentionally suppress logs on expected
              // printed errors. Since the current implementation of _throwOrLog can log
              // multiple separate log messages, suppress all of them if at least one suppress
              // is expected as we still want them to count as one.
              if (typeof Meteor !== "undefined") {
                if (Meteor._suppressed_log_expected()) {
                  Meteor._suppress_log(messagesLength - 1);
                }
              }
            }

            function _throwOrLog(from, e) {
              if (throwFirstError) {
                throw e;
              } else {
                var printArgs = ["Exception from Tracker " + from + " function:"];

                if (e.stack && e.message && e.name) {
                  var idx = e.stack.indexOf(e.message);

                  if (idx < 0 || idx > e.name.length + 2) {
                    // check for "Error: "
                    // message is not part of the stack
                    var message = e.name + ": " + e.message;
                    printArgs.push(message);
                  }
                }

                printArgs.push(e.stack);

                _maybeSuppressMoreLogs(printArgs.length);

                for (var i = 0; i < printArgs.length; i++) {
                  _debugFunc()(printArgs[i]);
                }
              }
            } // Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`
            // block if we are running on the server. On the client, returns the
            // original function (since `Meteor._noYieldsAllowed` is a
            // no-op). This has the benefit of not adding an unnecessary stack
            // frame on the client.


            function withNoYieldsAllowed(f) {
              if (typeof Meteor === 'undefined' || Meteor.isClient) {
                return f;
              } else {
                return function () {
                  var args = arguments;

                  Meteor._noYieldsAllowed(function () {
                    f.apply(null, args);
                  });
                };
              }
            }

            var nextId = 1; // computations whose callbacks we should call at flush time

            var pendingComputations = []; // `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now

            var willFlush = false; // `true` if we are in Tracker.flush now

            var inFlush = false; // `true` if we are computing a computation now, either first time
            // or recompute.  This matches Tracker.active unless we are inside
            // Tracker.nonreactive, which nullfies currentComputation even though
            // an enclosing computation may still be running.

            var inCompute = false; // `true` if the `_throwFirstError` option was passed in to the call
            // to Tracker.flush that we are in. When set, throw rather than log the
            // first error encountered while flushing. Before throwing the error,
            // finish flushing (from a finally block), logging any subsequent
            // errors.

            var throwFirstError = false;
            var afterFlushCallbacks = [];

            function requireFlush() {
              if (!willFlush) {
                // We want this code to work without Meteor, see debugFunc above
                if (typeof Meteor !== "undefined") Meteor._setImmediate(Tracker._runFlush);else setTimeout(Tracker._runFlush, 0);
                willFlush = true;
              }
            } // Tracker.Computation constructor is visible but private
            // (throws an error if you try to call it)


            var constructingComputation = false; //
            // http://docs.meteor.com/#tracker_computation

            /**
             * @summary A Computation object represents code that is repeatedly rerun
             * in response to
             * reactive data changes. Computations don't have return values; they just
             * perform actions, such as rerendering a template on the screen. Computations
             * are created using Tracker.autorun. Use stop to prevent further rerunning of a
             * computation.
             * @instancename computation
             */

            Tracker.Computation = class Computation {
              constructor(f, parent, onError) {
                if (!constructingComputation) throw new Error("Tracker.Computation constructor is private; use Tracker.autorun");
                constructingComputation = false; // http://docs.meteor.com/#computation_stopped

                /**
                 * @summary True if this computation has been stopped.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  stopped
                 */

                this.stopped = false; // http://docs.meteor.com/#computation_invalidated

                /**
                 * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  invalidated
                 * @type {Boolean}
                 */

                this.invalidated = false; // http://docs.meteor.com/#computation_firstrun

                /**
                 * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  firstRun
                 * @type {Boolean}
                 */

                this.firstRun = true;
                this._id = nextId++;
                this._onInvalidateCallbacks = [];
                this._onStopCallbacks = []; // the plan is at some point to use the parent relation
                // to constrain the order that computations are processed

                this._parent = parent;
                this._func = f;
                this._onError = onError;
                this._recomputing = false;
                var errored = true;

                try {
                  this._compute();

                  errored = false;
                } finally {
                  this.firstRun = false;
                  if (errored) this.stop();
                }
              } // http://docs.meteor.com/#computation_oninvalidate

              /**
               * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
               * @locus Client
               * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
               */

              onInvalidate(f) {
                if (typeof f !== 'function') throw new Error("onInvalidate requires a function");

                if (this.invalidated) {
                  Tracker.nonreactive(() => {
                    withNoYieldsAllowed(f)(this);
                  });
                } else {
                  this._onInvalidateCallbacks.push(f);
                }
              }
              /**
               * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
               * @locus Client
               * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
               */

              onStop(f) {
                if (typeof f !== 'function') throw new Error("onStop requires a function");

                if (this.stopped) {
                  Tracker.nonreactive(() => {
                    withNoYieldsAllowed(f)(this);
                  });
                } else {
                  this._onStopCallbacks.push(f);
                }
              } // http://docs.meteor.com/#computation_invalidate

              /**
               * @summary Invalidates this computation so that it will be rerun.
               * @locus Client
               */

              invalidate() {
                if (!this.invalidated) {
                  // if we're currently in _recompute(), don't enqueue
                  // ourselves, since we'll rerun immediately anyway.
                  if (!this._recomputing && !this.stopped) {
                    requireFlush();
                    pendingComputations.push(this);
                  }

                  this.invalidated = true; // callbacks can't add callbacks, because
                  // this.invalidated === true.

                  for (var i = 0, f; f = this._onInvalidateCallbacks[i]; i++) {
                    Tracker.nonreactive(() => {
                      withNoYieldsAllowed(f)(this);
                    });
                  }

                  this._onInvalidateCallbacks = [];
                }
              } // http://docs.meteor.com/#computation_stop

              /**
               * @summary Prevents this computation from rerunning.
               * @locus Client
               */

              stop() {
                if (!this.stopped) {
                  this.stopped = true;
                  this.invalidate();

                  for (var i = 0, f; f = this._onStopCallbacks[i]; i++) {
                    Tracker.nonreactive(() => {
                      withNoYieldsAllowed(f)(this);
                    });
                  }

                  this._onStopCallbacks = [];
                }
              }

              _compute() {
                this.invalidated = false;
                var previous = Tracker.currentComputation;
                setCurrentComputation(this);
                var previousInCompute = inCompute;
                inCompute = true;

                try {
                  withNoYieldsAllowed(this._func)(this);
                } finally {
                  setCurrentComputation(previous);
                  inCompute = previousInCompute;
                }
              }

              _needsRecompute() {
                return this.invalidated && !this.stopped;
              }

              _recompute() {
                this._recomputing = true;

                try {
                  if (this._needsRecompute()) {
                    try {
                      this._compute();
                    } catch (e) {
                      if (this._onError) {
                        this._onError(e);
                      } else {
                        _throwOrLog("recompute", e);
                      }
                    }
                  }
                } finally {
                  this._recomputing = false;
                }
              }
              /**
               * @summary Process the reactive updates for this computation immediately
               * and ensure that the computation is rerun. The computation is rerun only
               * if it is invalidated.
               * @locus Client
               */

              flush() {
                if (this._recomputing) return;

                this._recompute();
              }
              /**
               * @summary Causes the function inside this computation to run and
               * synchronously process all reactive updtes.
               * @locus Client
               */

              run() {
                this.invalidate();
                this.flush();
              }

            }; //
            // http://docs.meteor.com/#tracker_dependency

            /**
             * @summary A Dependency represents an atomic unit of reactive data that a
             * computation might depend on. Reactive data sources such as Session or
             * Minimongo internally create different Dependency objects for different
             * pieces of data, each of which may be depended on by multiple computations.
             * When the data changes, the computations are invalidated.
             * @class
             * @instanceName dependency
             */

            Tracker.Dependency = class Dependency {
              constructor() {
                this._dependentsById = Object.create(null);
              } // http://docs.meteor.com/#dependency_depend
              //
              // Adds `computation` to this set if it is not already
              // present.  Returns true if `computation` is a new member of the set.
              // If no argument, defaults to currentComputation, or does nothing
              // if there is no currentComputation.

              /**
               * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.
                Returns true if the computation is a new dependent of `dependency` rather than an existing one.
               * @locus Client
               * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
               * @returns {Boolean}
               */

              depend(computation) {
                if (!computation) {
                  if (!Tracker.active) return false;
                  computation = Tracker.currentComputation;
                }

                var id = computation._id;

                if (!(id in this._dependentsById)) {
                  this._dependentsById[id] = computation;
                  computation.onInvalidate(() => {
                    delete this._dependentsById[id];
                  });
                  return true;
                }

                return false;
              } // http://docs.meteor.com/#dependency_changed

              /**
               * @summary Invalidate all dependent computations immediately and remove them as dependents.
               * @locus Client
               */

              changed() {
                for (var id in this._dependentsById) this._dependentsById[id].invalidate();
              } // http://docs.meteor.com/#dependency_hasdependents

              /**
               * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
               * @locus Client
               * @returns {Boolean}
               */

              hasDependents() {
                for (var id in this._dependentsById) return true;

                return false;
              }

            }; // http://docs.meteor.com/#tracker_flush

            /**
             * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.
             * @locus Client
             */

            Tracker.flush = function (options) {
              Tracker._runFlush({
                finishSynchronously: true,
                throwFirstError: options && options._throwFirstError
              });
            };
            /**
             * @summary True if we are computing a computation now, either first time or recompute.  This matches Tracker.active unless we are inside Tracker.nonreactive, which nullfies currentComputation even though an enclosing computation may still be running.
             * @locus Client
             * @returns {Boolean}
             */

            Tracker.inFlush = function () {
              return inFlush;
            }; // Run all pending computations and afterFlush callbacks.  If we were not called
            // directly via Tracker.flush, this may return before they're all done to allow
            // the event loop to run a little before continuing.


            Tracker._runFlush = function (options) {
              // XXX What part of the comment below is still true? (We no longer
              // have Spark)
              //
              // Nested flush could plausibly happen if, say, a flush causes
              // DOM mutation, which causes a "blur" event, which runs an
              // app event handler that calls Tracker.flush.  At the moment
              // Spark blocks event handlers during DOM mutation anyway,
              // because the LiveRange tree isn't valid.  And we don't have
              // any useful notion of a nested flush.
              //
              // https://app.asana.com/0/159908330244/385138233856
              if (Tracker.inFlush()) throw new Error("Can't call Tracker.flush while flushing");
              if (inCompute) throw new Error("Can't flush inside Tracker.autorun");
              options = options || {};
              inFlush = true;
              willFlush = true;
              throwFirstError = !!options.throwFirstError;
              var recomputedCount = 0;
              var finishedTry = false;

              try {
                while (pendingComputations.length || afterFlushCallbacks.length) {
                  // recompute all pending computations
                  while (pendingComputations.length) {
                    var comp = pendingComputations.shift();

                    comp._recompute();

                    if (comp._needsRecompute()) {
                      pendingComputations.unshift(comp);
                    }

                    if (!options.finishSynchronously && ++recomputedCount > 1000) {
                      finishedTry = true;
                      return;
                    }
                  }

                  if (afterFlushCallbacks.length) {
                    // call one afterFlush callback, which may
                    // invalidate more computations
                    var func = afterFlushCallbacks.shift();

                    try {
                      func();
                    } catch (e) {
                      _throwOrLog("afterFlush", e);
                    }
                  }
                }

                finishedTry = true;
              } finally {
                if (!finishedTry) {
                  // we're erroring due to throwFirstError being true.
                  inFlush = false; // needed before calling `Tracker.flush()` again
                  // finish flushing

                  Tracker._runFlush({
                    finishSynchronously: options.finishSynchronously,
                    throwFirstError: false
                  });
                }

                willFlush = false;
                inFlush = false;

                if (pendingComputations.length || afterFlushCallbacks.length) {
                  // We're yielding because we ran a bunch of computations and we aren't
                  // required to finish synchronously, so we'd like to give the event loop a
                  // chance. We should flush again soon.
                  if (options.finishSynchronously) {
                    throw new Error("still have more to do?"); // shouldn't happen
                  }

                  setTimeout(requireFlush, 10);
                }
              }
            }; // http://docs.meteor.com/#tracker_autorun
            //
            // Run f(). Record its dependencies. Rerun it whenever the
            // dependencies change.
            //
            // Returns a new Computation, which is also passed to f.
            //
            // Links the computation to the current computation
            // so that it is stopped if the current computation is invalidated.

            /**
             * @callback Tracker.ComputationFunction
             * @param {Tracker.Computation}
             */

            /**
             * @summary Run a function now and rerun it later whenever its dependencies
             * change. Returns a Computation object that can be used to stop or observe the
             * rerunning.
             * @locus Client
             * @param {Tracker.ComputationFunction} runFunc The function to run. It receives
             * one argument: the Computation object that will be returned.
             * @param {Object} [options]
             * @param {Function} options.onError Optional. The function to run when an error
             * happens in the Computation. The only argument it receives is the Error
             * thrown. Defaults to the error being logged to the console.
             * @returns {Tracker.Computation}
             */

            Tracker.autorun = function (f, options) {
              if (typeof f !== 'function') throw new Error('Tracker.autorun requires a function argument');
              options = options || {};
              constructingComputation = true;
              var c = new Tracker.Computation(f, Tracker.currentComputation, options.onError);
              if (Tracker.active) Tracker.onInvalidate(function () {
                c.stop();
              });
              return c;
            }; // http://docs.meteor.com/#tracker_nonreactive
            //
            // Run `f` with no current computation, returning the return value
            // of `f`.  Used to turn off reactivity for the duration of `f`,
            // so that reactive data sources accessed by `f` will not result in any
            // computations being invalidated.

            /**
             * @summary Run a function without tracking dependencies.
             * @locus Client
             * @param {Function} func A function to call immediately.
             */

            Tracker.nonreactive = function (f) {
              var previous = Tracker.currentComputation;
              setCurrentComputation(null);

              try {
                return f();
              } finally {
                setCurrentComputation(previous);
              }
            }; // http://docs.meteor.com/#tracker_oninvalidate

            /**
             * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
             * @locus Client
             * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
             */

            Tracker.onInvalidate = function (f) {
              if (!Tracker.active) throw new Error("Tracker.onInvalidate requires a currentComputation");
              Tracker.currentComputation.onInvalidate(f);
            }; // http://docs.meteor.com/#tracker_afterflush

            /**
             * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
             * @locus Client
             * @param {Function} callback A function to call at flush time.
             */

            Tracker.afterFlush = function (f) {
              afterFlushCallbacks.push(f);
              requireFlush();
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/tracker/tracker.js");

  /* Exports */
  Package._define("tracker", {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var EJSON = Package.ejson.EJSON;
  var GeoJSON = Package['geojson-utils'].GeoJSON;
  var IdMap = Package['id-map'].IdMap;
  var MongoID = Package['mongo-id'].MongoID;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var Random = Package.random.Random;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var operand, selectorValue, MinimongoTest, MinimongoError, selector, doc, callback, options, oldResults, a, b, LocalCollection, Minimongo;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "minimongo": { "minimongo_client.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_client.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.link("./minimongo_common.js");
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require2, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/common.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              hasOwn: () => hasOwn,
              ELEMENT_OPERATORS: () => ELEMENT_OPERATORS,
              compileDocumentSelector: () => compileDocumentSelector,
              equalityElementMatcher: () => equalityElementMatcher,
              expandArraysInBranches: () => expandArraysInBranches,
              isIndexable: () => isIndexable,
              isNumericKey: () => isNumericKey,
              isOperatorObject: () => isOperatorObject,
              makeLookupFunction: () => makeLookupFunction,
              nothingMatcher: () => nothingMatcher,
              pathsToTree: () => pathsToTree,
              populateDocumentWithQueryFields: () => populateDocumentWithQueryFields,
              projectionDetails: () => projectionDetails,
              regexpElementMatcher: () => regexpElementMatcher
            });
            let LocalCollection;
            _module2.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            const hasOwn = Object.prototype.hasOwnProperty;
            const ELEMENT_OPERATORS = {
              $lt: makeInequality(cmpValue => cmpValue < 0),
              $gt: makeInequality(cmpValue => cmpValue > 0),
              $lte: makeInequality(cmpValue => cmpValue <= 0),
              $gte: makeInequality(cmpValue => cmpValue >= 0),
              $mod: {
                compileElementSelector(operand) {
                  if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {
                    throw Error('argument to $mod must be an array of two numbers');
                  } // XXX could require to be ints or round or something


                  const divisor = operand[0];
                  const remainder = operand[1];
                  return value => typeof value === 'number' && value % divisor === remainder;
                }

              },
              $in: {
                compileElementSelector(operand) {
                  if (!Array.isArray(operand)) {
                    throw Error('$in needs an array');
                  }

                  const elementMatchers = operand.map(option => {
                    if (option instanceof RegExp) {
                      return regexpElementMatcher(option);
                    }

                    if (isOperatorObject(option)) {
                      throw Error('cannot nest $ under $in');
                    }

                    return equalityElementMatcher(option);
                  });
                  return value => {
                    // Allow {a: {$in: [null]}} to match when 'a' does not exist.
                    if (value === undefined) {
                      value = null;
                    }

                    return elementMatchers.some(matcher => matcher(value));
                  };
                }

              },
              $size: {
                // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we
                // don't want to consider the element [5,5] in the leaf array [[5,5]] as a
                // possible value.
                dontExpandLeafArrays: true,

                compileElementSelector(operand) {
                  if (typeof operand === 'string') {
                    // Don't ask me why, but by experimentation, this seems to be what Mongo
                    // does.
                    operand = 0;
                  } else if (typeof operand !== 'number') {
                    throw Error('$size needs a number');
                  }

                  return value => Array.isArray(value) && value.length === operand;
                }

              },
              $type: {
                // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should
                // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:
                // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but
                // should *not* include it itself.
                dontIncludeLeafArrays: true,

                compileElementSelector(operand) {
                  if (typeof operand === 'string') {
                    const operandAliasMap = {
                      'double': 1,
                      'string': 2,
                      'object': 3,
                      'array': 4,
                      'binData': 5,
                      'undefined': 6,
                      'objectId': 7,
                      'bool': 8,
                      'date': 9,
                      'null': 10,
                      'regex': 11,
                      'dbPointer': 12,
                      'javascript': 13,
                      'symbol': 14,
                      'javascriptWithScope': 15,
                      'int': 16,
                      'timestamp': 17,
                      'long': 18,
                      'decimal': 19,
                      'minKey': -1,
                      'maxKey': 127
                    };

                    if (!hasOwn.call(operandAliasMap, operand)) {
                      throw Error("unknown string alias for $type: ".concat(operand));
                    }

                    operand = operandAliasMap[operand];
                  } else if (typeof operand === 'number') {
                    if (operand === 0 || operand < -1 || operand > 19 && operand !== 127) {
                      throw Error("Invalid numerical $type code: ".concat(operand));
                    }
                  } else {
                    throw Error('argument to $type is not a number or a string');
                  }

                  return value => value !== undefined && LocalCollection._f._type(value) === operand;
                }

              },
              $bitsAllSet: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAllSet');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);
                  };
                }

              },
              $bitsAnySet: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAnySet');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);
                  };
                }

              },
              $bitsAllClear: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAllClear');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));
                  };
                }

              },
              $bitsAnyClear: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAnyClear');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);
                  };
                }

              },
              $regex: {
                compileElementSelector(operand, valueSelector) {
                  if (!(typeof operand === 'string' || operand instanceof RegExp)) {
                    throw Error('$regex has to be a string or RegExp');
                  }

                  let regexp;

                  if (valueSelector.$options !== undefined) {
                    // Options passed in $options (even the empty string) always overrides
                    // options in the RegExp object itself.
                    // Be clear that we only support the JS-supported options, not extended
                    // ones (eg, Mongo supports x and s). Ideally we would implement x and s
                    // by transforming the regexp, but not today...
                    if (/[^gim]/.test(valueSelector.$options)) {
                      throw new Error('Only the i, m, and g regexp options are supported');
                    }

                    const source = operand instanceof RegExp ? operand.source : operand;
                    regexp = new RegExp(source, valueSelector.$options);
                  } else if (operand instanceof RegExp) {
                    regexp = operand;
                  } else {
                    regexp = new RegExp(operand);
                  }

                  return regexpElementMatcher(regexp);
                }

              },
              $elemMatch: {
                dontExpandLeafArrays: true,

                compileElementSelector(operand, valueSelector, matcher) {
                  if (!LocalCollection._isPlainObject(operand)) {
                    throw Error('$elemMatch need an object');
                  }

                  const isDocMatcher = !isOperatorObject(Object.keys(operand).filter(key => !hasOwn.call(LOGICAL_OPERATORS, key)).reduce((a, b) => Object.assign(a, {
                    [b]: operand[b]
                  }), {}), true);
                  let subMatcher;

                  if (isDocMatcher) {
                    // This is NOT the same as compileValueSelector(operand), and not just
                    // because of the slightly different calling convention.
                    // {$elemMatch: {x: 3}} means "an element has a field x:3", not
                    // "consists only of a field x:3". Also, regexps and sub-$ are allowed.
                    subMatcher = compileDocumentSelector(operand, matcher, {
                      inElemMatch: true
                    });
                  } else {
                    subMatcher = compileValueSelector(operand, matcher);
                  }

                  return value => {
                    if (!Array.isArray(value)) {
                      return false;
                    }

                    for (let i = 0; i < value.length; ++i) {
                      const arrayElement = value[i];
                      let arg;

                      if (isDocMatcher) {
                        // We can only match {$elemMatch: {b: 3}} against objects.
                        // (We can also match against arrays, if there's numeric indices,
                        // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)
                        if (!isIndexable(arrayElement)) {
                          return false;
                        }

                        arg = arrayElement;
                      } else {
                        // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches
                        // {a: [8]} but not {a: [[8]]}
                        arg = [{
                          value: arrayElement,
                          dontIterate: true
                        }];
                      } // XXX support $near in $elemMatch by propagating $distance?


                      if (subMatcher(arg).result) {
                        return i; // specially understood to mean "use as arrayIndices"
                      }
                    }

                    return false;
                  };
                }

              }
            };
            // Operators that appear at the top level of a document selector.
            const LOGICAL_OPERATORS = {
              $and(subSelector, matcher, inElemMatch) {
                return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));
              },

              $or(subSelector, matcher, inElemMatch) {
                const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*
                // any arrayIndices it returns.

                if (matchers.length === 1) {
                  return matchers[0];
                }

                return doc => {
                  const result = matchers.some(fn => fn(doc).result); // $or does NOT set arrayIndices when it has multiple
                  // sub-expressions. (Tested against MongoDB.)

                  return {
                    result
                  };
                };
              },

              $nor(subSelector, matcher, inElemMatch) {
                const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);
                return doc => {
                  const result = matchers.every(fn => !fn(doc).result); // Never set arrayIndices, because we only match if nothing in particular
                  // 'matched' (and because this is consistent with MongoDB).

                  return {
                    result
                  };
                };
              },

              $where(selectorValue, matcher) {
                // Record that *any* path may be used.
                matcher._recordPathUsed('');

                matcher._hasWhere = true;

                if (!(selectorValue instanceof Function)) {
                  // XXX MongoDB seems to have more complex logic to decide where or or not
                  // to add 'return'; not sure exactly what it is.
                  selectorValue = Function('obj', "return ".concat(selectorValue));
                } // We make the document available as both `this` and `obj`.
                // // XXX not sure what we should do if this throws


                return doc => ({
                  result: selectorValue.call(doc, doc)
                });
              },

              // This is just used as a comment in the query (in MongoDB, it also ends up in
              // query logs); it has no effect on the actual selection.
              $comment() {
                return () => ({
                  result: true
                });
              }

            }; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a
            // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as
            // "match each branched value independently and combine with
            // convertElementMatcherToBranchedMatcher".

            const VALUE_OPERATORS = {
              $eq(operand) {
                return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));
              },

              $not(operand, valueSelector, matcher) {
                return invertBranchedMatcher(compileValueSelector(operand, matcher));
              },

              $ne(operand) {
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));
              },

              $nin(operand) {
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));
              },

              $exists(operand) {
                const exists = convertElementMatcherToBranchedMatcher(value => value !== undefined);
                return operand ? exists : invertBranchedMatcher(exists);
              },

              // $options just provides options for $regex; its logic is inside $regex
              $options(operand, valueSelector) {
                if (!hasOwn.call(valueSelector, '$regex')) {
                  throw Error('$options needs a $regex');
                }

                return everythingMatcher;
              },

              // $maxDistance is basically an argument to $near
              $maxDistance(operand, valueSelector) {
                if (!valueSelector.$near) {
                  throw Error('$maxDistance needs a $near');
                }

                return everythingMatcher;
              },

              $all(operand, valueSelector, matcher) {
                if (!Array.isArray(operand)) {
                  throw Error('$all requires array');
                } // Not sure why, but this seems to be what MongoDB does.


                if (operand.length === 0) {
                  return nothingMatcher;
                }

                const branchedMatchers = operand.map(criterion => {
                  // XXX handle $all/$elemMatch combination
                  if (isOperatorObject(criterion)) {
                    throw Error('no $ expressions in $all');
                  } // This is always a regexp or equality selector.


                  return compileValueSelector(criterion, matcher);
                }); // andBranchedMatchers does NOT require all selectors to return true on the
                // SAME branch.

                return andBranchedMatchers(branchedMatchers);
              },

              $near(operand, valueSelector, matcher, isRoot) {
                if (!isRoot) {
                  throw Error('$near can\'t be inside another $ operator');
                }

                matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and
                // GeoJSON. They use different distance metrics, too. GeoJSON queries are
                // marked with a $geometry property, though legacy coordinates can be
                // matched using $geometry.

                let maxDistance, point, distance;

                if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {
                  // GeoJSON "2dsphere" mode.
                  maxDistance = operand.$maxDistance;
                  point = operand.$geometry;

                  distance = value => {
                    // XXX: for now, we don't calculate the actual distance between, say,
                    // polygon and circle. If people care about this use-case it will get
                    // a priority.
                    if (!value) {
                      return null;
                    }

                    if (!value.type) {
                      return GeoJSON.pointDistance(point, {
                        type: 'Point',
                        coordinates: pointToArray(value)
                      });
                    }

                    if (value.type === 'Point') {
                      return GeoJSON.pointDistance(point, value);
                    }

                    return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;
                  };
                } else {
                  maxDistance = valueSelector.$maxDistance;

                  if (!isIndexable(operand)) {
                    throw Error('$near argument must be coordinate pair or GeoJSON');
                  }

                  point = pointToArray(operand);

                  distance = value => {
                    if (!isIndexable(value)) {
                      return null;
                    }

                    return distanceCoordinatePairs(point, value);
                  };
                }

                return branchedValues => {
                  // There might be multiple points in the document that match the given
                  // field. Only one of them needs to be within $maxDistance, but we need to
                  // evaluate all of them and use the nearest one for the implicit sort
                  // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)
                  //
                  // Note: This differs from MongoDB's implementation, where a document will
                  // actually show up *multiple times* in the result set, with one entry for
                  // each within-$maxDistance branching point.
                  const result = {
                    result: false
                  };
                  expandArraysInBranches(branchedValues).every(branch => {
                    // if operation is an update, don't skip branches, just return the first
                    // one (#3599)
                    let curDistance;

                    if (!matcher._isUpdate) {
                      if (!(typeof branch.value === 'object')) {
                        return true;
                      }

                      curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.

                      if (curDistance === null || curDistance > maxDistance) {
                        return true;
                      } // Skip anything that's a tie.


                      if (result.distance !== undefined && result.distance <= curDistance) {
                        return true;
                      }
                    }

                    result.result = true;
                    result.distance = curDistance;

                    if (branch.arrayIndices) {
                      result.arrayIndices = branch.arrayIndices;
                    } else {
                      delete result.arrayIndices;
                    }

                    return !matcher._isUpdate;
                  });
                  return result;
                };
              }

            }; // NB: We are cheating and using this function to implement 'AND' for both
            // 'document matchers' and 'branched matchers'. They both return result objects
            // but the argument is different: for the former it's a whole doc, whereas for
            // the latter it's an array of 'branched values'.

            function andSomeMatchers(subMatchers) {
              if (subMatchers.length === 0) {
                return everythingMatcher;
              }

              if (subMatchers.length === 1) {
                return subMatchers[0];
              }

              return docOrBranches => {
                const match = {};
                match.result = subMatchers.every(fn => {
                  const subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has
                  // one. Yes, this means that if there are multiple $near fields in a
                  // query, something arbitrary happens; this appears to be consistent with
                  // Mongo.

                  if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {
                    match.distance = subResult.distance;
                  } // Similarly, propagate arrayIndices from sub-matchers... but to match
                  // MongoDB behavior, this time the *last* sub-matcher with arrayIndices
                  // wins.


                  if (subResult.result && subResult.arrayIndices) {
                    match.arrayIndices = subResult.arrayIndices;
                  }

                  return subResult.result;
                }); // If we didn't actually match, forget any extra metadata we came up with.

                if (!match.result) {
                  delete match.distance;
                  delete match.arrayIndices;
                }

                return match;
              };
            }

            const andDocumentMatchers = andSomeMatchers;
            const andBranchedMatchers = andSomeMatchers;

            function compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {
              if (!Array.isArray(selectors) || selectors.length === 0) {
                throw Error('$and/$or/$nor must be nonempty array');
              }

              return selectors.map(subSelector => {
                if (!LocalCollection._isPlainObject(subSelector)) {
                  throw Error('$or/$and/$nor entries need to be full objects');
                }

                return compileDocumentSelector(subSelector, matcher, {
                  inElemMatch
                });
              });
            } // Takes in a selector that could match a full document (eg, the original
            // selector). Returns a function mapping document->result object.
            //
            // matcher is the Matcher object we are compiling.
            //
            // If this is the root document selector (ie, not wrapped in $and or the like),
            // then isRoot is true. (This is used by $near.)


            function compileDocumentSelector(docSelector, matcher) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              const docMatchers = Object.keys(docSelector).map(key => {
                const subSelector = docSelector[key];

                if (key.substr(0, 1) === '$') {
                  // Outer operators are either logical operators (they recurse back into
                  // this function), or $where.
                  if (!hasOwn.call(LOGICAL_OPERATORS, key)) {
                    throw new Error("Unrecognized logical operator: ".concat(key));
                  }

                  matcher._isSimple = false;
                  return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);
                } // Record this path, but only if we aren't in an elemMatcher, since in an
                // elemMatch this is a path inside an object in an array, not in the doc
                // root.


                if (!options.inElemMatch) {
                  matcher._recordPathUsed(key);
                } // Don't add a matcher if subSelector is a function -- this is to match
                // the behavior of Meteor on the server (inherited from the node mongodb
                // driver), which is to ignore any part of a selector which is a function.


                if (typeof subSelector === 'function') {
                  return undefined;
                }

                const lookUpByIndex = makeLookupFunction(key);
                const valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);
                return doc => valueMatcher(lookUpByIndex(doc));
              }).filter(Boolean);
              return andDocumentMatchers(docMatchers);
            }

            // Takes in a selector that could match a key-indexed value in a document; eg,
            // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to
            // indicate equality).  Returns a branched matcher: a function mapping
            // [branched value]->result object.
            function compileValueSelector(valueSelector, matcher, isRoot) {
              if (valueSelector instanceof RegExp) {
                matcher._isSimple = false;
                return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));
              }

              if (isOperatorObject(valueSelector)) {
                return operatorBranchedMatcher(valueSelector, matcher, isRoot);
              }

              return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));
            } // Given an element matcher (which evaluates a single value), returns a branched
            // value (which evaluates the element matcher on all the branches and returns a
            // more structured return value possibly including arrayIndices).


            function convertElementMatcherToBranchedMatcher(elementMatcher) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              return branches => {
                const expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);
                const match = {};
                match.result = expanded.some(element => {
                  let matched = elementMatcher(element.value); // Special case for $elemMatch: it means "true, and use this as an array
                  // index if I didn't already have one".

                  if (typeof matched === 'number') {
                    // XXX This code dates from when we only stored a single array index
                    // (for the outermost array). Should we be also including deeper array
                    // indices from the $elemMatch match?
                    if (!element.arrayIndices) {
                      element.arrayIndices = [matched];
                    }

                    matched = true;
                  } // If some element matched, and it's tagged with array indices, include
                  // those indices in our result object.


                  if (matched && element.arrayIndices) {
                    match.arrayIndices = element.arrayIndices;
                  }

                  return matched;
                });
                return match;
              };
            } // Helpers for $near.


            function distanceCoordinatePairs(a, b) {
              const pointA = pointToArray(a);
              const pointB = pointToArray(b);
              return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);
            } // Takes something that is not an operator object and returns an element matcher
            // for equality with that thing.


            function equalityElementMatcher(elementSelector) {
              if (isOperatorObject(elementSelector)) {
                throw Error('Can\'t create equalityValueSelector for operator object');
              } // Special-case: null and undefined are equal (if you got undefined in there
              // somewhere, or if you got it due to some branch being non-existent in the
              // weird special case), even though they aren't with EJSON.equals.
              // undefined or null


              if (elementSelector == null) {
                return value => value == null;
              }

              return value => LocalCollection._f._equal(elementSelector, value);
            }

            function everythingMatcher(docOrBranchedValues) {
              return {
                result: true
              };
            }

            function expandArraysInBranches(branches, skipTheArrays) {
              const branchesOut = [];
              branches.forEach(branch => {
                const thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going
                // to iterate and we're told to skip arrays.  (That's right, we include some
                // arrays even skipTheArrays is true: these are arrays that were found via
                // explicit numerical indices.)

                if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {
                  branchesOut.push({
                    arrayIndices: branch.arrayIndices,
                    value: branch.value
                  });
                }

                if (thisIsArray && !branch.dontIterate) {
                  branch.value.forEach((value, i) => {
                    branchesOut.push({
                      arrayIndices: (branch.arrayIndices || []).concat(i),
                      value
                    });
                  });
                }
              });
              return branchesOut;
            }

            // Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.
            function getOperandBitmask(operand, selector) {
              // numeric bitmask
              // You can provide a numeric bitmask to be matched against the operand field.
              // It must be representable as a non-negative 32-bit signed integer.
              // Otherwise, $bitsAllSet will return an error.
              if (Number.isInteger(operand) && operand >= 0) {
                return new Uint8Array(new Int32Array([operand]).buffer);
              } // bindata bitmask
              // You can also use an arbitrarily large BinData instance as a bitmask.


              if (EJSON.isBinary(operand)) {
                return new Uint8Array(operand.buffer);
              } // position list
              // If querying a list of bit positions, each <position> must be a non-negative
              // integer. Bit positions start at 0 from the least significant bit.


              if (Array.isArray(operand) && operand.every(x => Number.isInteger(x) && x >= 0)) {
                const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);
                const view = new Uint8Array(buffer);
                operand.forEach(x => {
                  view[x >> 3] |= 1 << (x & 0x7);
                });
                return view;
              } // bad operand


              throw Error("operand to ".concat(selector, " must be a numeric bitmask (representable as a ") + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');
            }

            function getValueBitmask(value, length) {
              // The field value must be either numerical or a BinData instance. Otherwise,
              // $bits... will not match the current document.
              // numerical
              if (Number.isSafeInteger(value)) {
                // $bits... will not match numerical values that cannot be represented as a
                // signed 64-bit integer. This can be the case if a value is either too
                // large or small to fit in a signed 64-bit integer, or if it has a
                // fractional component.
                const buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));
                let view = new Uint32Array(buffer, 0, 2);
                view[0] = value % ((1 << 16) * (1 << 16)) | 0;
                view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension

                if (value < 0) {
                  view = new Uint8Array(buffer, 2);
                  view.forEach((byte, i) => {
                    view[i] = 0xff;
                  });
                }

                return new Uint8Array(buffer);
              } // bindata


              if (EJSON.isBinary(value)) {
                return new Uint8Array(value.buffer);
              } // no match


              return false;
            } // Actually inserts a key value into the selector document
            // However, this checks there is no ambiguity in setting
            // the value for the given key, throws otherwise


            function insertIntoDocument(document, key, value) {
              Object.keys(document).forEach(existingKey => {
                if (existingKey.length > key.length && existingKey.indexOf("".concat(key, ".")) === 0 || key.length > existingKey.length && key.indexOf("".concat(existingKey, ".")) === 0) {
                  throw new Error("cannot infer query fields to set, both paths '".concat(existingKey, "' and ") + "'".concat(key, "' are matched"));
                } else if (existingKey === key) {
                  throw new Error("cannot infer query fields to set, path '".concat(key, "' is matched twice"));
                }
              });
              document[key] = value;
            } // Returns a branched matcher that matches iff the given matcher does not.
            // Note that this implicitly "deMorganizes" the wrapped function.  ie, it
            // means that ALL branch values need to fail to match innerBranchedMatcher.


            function invertBranchedMatcher(branchedMatcher) {
              return branchValues => {
                // We explicitly choose to strip arrayIndices here: it doesn't make sense to
                // say "update the array element that does not match something", at least
                // in mongo-land.
                return {
                  result: !branchedMatcher(branchValues).result
                };
              };
            }

            function isIndexable(obj) {
              return Array.isArray(obj) || LocalCollection._isPlainObject(obj);
            }

            function isNumericKey(s) {
              return (/^[0-9]+$/.test(s)
              );
            }

            function isOperatorObject(valueSelector, inconsistentOK) {
              if (!LocalCollection._isPlainObject(valueSelector)) {
                return false;
              }

              let theseAreOperators = undefined;
              Object.keys(valueSelector).forEach(selKey => {
                const thisIsOperator = selKey.substr(0, 1) === '$';

                if (theseAreOperators === undefined) {
                  theseAreOperators = thisIsOperator;
                } else if (theseAreOperators !== thisIsOperator) {
                  if (!inconsistentOK) {
                    throw new Error("Inconsistent operator: ".concat(JSON.stringify(valueSelector)));
                  }

                  theseAreOperators = false;
                }
              });
              return !!theseAreOperators; // {} has no operators
            }

            // Helper for $lt/$gt/$lte/$gte.
            function makeInequality(cmpValueComparator) {
              return {
                compileElementSelector(operand) {
                  // Arrays never compare false with non-arrays for any inequality.
                  // XXX This was behavior we observed in pre-release MongoDB 2.5, but
                  //     it seems to have been reverted.
                  //     See https://jira.mongodb.org/browse/SERVER-11444
                  if (Array.isArray(operand)) {
                    return () => false;
                  } // Special case: consider undefined and null the same (so true with
                  // $gte/$lte).


                  if (operand === undefined) {
                    operand = null;
                  }

                  const operandType = LocalCollection._f._type(operand);

                  return value => {
                    if (value === undefined) {
                      value = null;
                    } // Comparisons are never true among things of different type (except
                    // null vs undefined).


                    if (LocalCollection._f._type(value) !== operandType) {
                      return false;
                    }

                    return cmpValueComparator(LocalCollection._f._cmp(value, operand));
                  };
                }

              };
            } // makeLookupFunction(key) returns a lookup function.
            //
            // A lookup function takes in a document and returns an array of matching
            // branches.  If no arrays are found while looking up the key, this array will
            // have exactly one branches (possibly 'undefined', if some segment of the key
            // was not found).
            //
            // If arrays are found in the middle, this can have more than one element, since
            // we 'branch'. When we 'branch', if there are more key segments to look up,
            // then we only pursue branches that are plain objects (not arrays or scalars).
            // This means we can actually end up with no branches!
            //
            // We do *NOT* branch on arrays that are found at the end (ie, at the last
            // dotted member of the key). We just return that array; if you want to
            // effectively 'branch' over the array's values, post-process the lookup
            // function with expandArraysInBranches.
            //
            // Each branch is an object with keys:
            //  - value: the value at the branch
            //  - dontIterate: an optional bool; if true, it means that 'value' is an array
            //    that expandArraysInBranches should NOT expand. This specifically happens
            //    when there is a numeric index in the key, and ensures the
            //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT
            //    match {a: [[5]]}.
            //  - arrayIndices: if any array indexing was done during lookup (either due to
            //    explicit numeric indices or implicit branching), this will be an array of
            //    the array indices used, from outermost to innermost; it is falsey or
            //    absent if no array index is used. If an explicit numeric index is used,
            //    the index will be followed in arrayIndices by the string 'x'.
            //
            //    Note: arrayIndices is used for two purposes. First, it is used to
            //    implement the '$' modifier feature, which only ever looks at its first
            //    element.
            //
            //    Second, it is used for sort key generation, which needs to be able to tell
            //    the difference between different paths. Moreover, it needs to
            //    differentiate between explicit and implicit branching, which is why
            //    there's the somewhat hacky 'x' entry: this means that explicit and
            //    implicit array lookups will have different full arrayIndices paths. (That
            //    code only requires that different paths have different arrayIndices; it
            //    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices
            //    could contain objects with flags like 'implicit', but I think that only
            //    makes the code surrounding them more complex.)
            //
            //    (By the way, this field ends up getting passed around a lot without
            //    cloning, so never mutate any arrayIndices field/var in this package!)
            //
            //
            // At the top level, you may only pass in a plain object or array.
            //
            // See the test 'minimongo - lookup' for some examples of what lookup functions
            // return.


            function makeLookupFunction(key) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              const parts = key.split('.');
              const firstPart = parts.length ? parts[0] : '';
              const lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'), options);

              const omitUnnecessaryFields = result => {
                if (!result.dontIterate) {
                  delete result.dontIterate;
                }

                if (result.arrayIndices && !result.arrayIndices.length) {
                  delete result.arrayIndices;
                }

                return result;
              }; // Doc will always be a plain object or an array.
              // apply an explicit numeric index, an array.


              return function (doc) {
                let arrayIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                if (Array.isArray(doc)) {
                  // If we're being asked to do an invalid lookup into an array (non-integer
                  // or out-of-bounds), return no results (which is different from returning
                  // a single undefined result, in that `null` equality checks won't match).
                  if (!(isNumericKey(firstPart) && firstPart < doc.length)) {
                    return [];
                  } // Remember that we used this array index. Include an 'x' to indicate that
                  // the previous index came from being considered as an explicit array
                  // index (not branching).


                  arrayIndices = arrayIndices.concat(+firstPart, 'x');
                } // Do our first lookup.


                const firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.
                //
                // If what we found is an array, most value selectors will choose to treat
                // the elements of the array as matchable values in their own right, but
                // that's done outside of the lookup function. (Exceptions to this are $size
                // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:
                // [[1, 2]]}.)
                //
                // That said, if we just did an *explicit* array lookup (on doc) to find
                // firstLevel, and firstLevel is an array too, we do NOT want value
                // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.
                // So in that case, we mark the return value as 'don't iterate'.

                if (!lookupRest) {
                  return [omitUnnecessaryFields({
                    arrayIndices,
                    dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),
                    value: firstLevel
                  })];
                } // We need to dig deeper.  But if we can't, because what we've found is not
                // an array or plain object, we're done. If we just did a numeric index into
                // an array, we return nothing here (this is a change in Mongo 2.5 from
                // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,
                // return a single `undefined` (which can, for example, match via equality
                // with `null`).


                if (!isIndexable(firstLevel)) {
                  if (Array.isArray(doc)) {
                    return [];
                  }

                  return [omitUnnecessaryFields({
                    arrayIndices,
                    value: undefined
                  })];
                }

                const result = [];

                const appendToResult = more => {
                  result.push(...more);
                }; // Dig deeper: look up the rest of the parts on whatever we've found.
                // (lookupRest is smart enough to not try to do invalid lookups into
                // firstLevel if it's an array.)


                appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next
                // part as a literal integer lookup, we should also 'branch': try to look up
                // the rest of the parts on each array element in parallel.
                //
                // In this case, we *only* dig deeper into array elements that are plain
                // objects. (Recall that we only got this far if we have further to dig.)
                // This makes sense: we certainly don't dig deeper into non-indexable
                // objects. And it would be weird to dig into an array: it's simpler to have
                // a rule that explicit integer indexes only apply to an outer array, not to
                // an array you find after a branching search.
                //
                // In the special case of a numeric part in a *sort selector* (not a query
                // selector), we skip the branching: we ONLY allow the numeric part to mean
                // 'look up this index' in that case, not 'also look up this index in all
                // the elements of the array'.

                if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {
                  firstLevel.forEach((branch, arrayIndex) => {
                    if (LocalCollection._isPlainObject(branch)) {
                      appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));
                    }
                  });
                }

                return result;
              };
            }

            // Object exported only for unit testing.
            // Use it to export private functions to test in Tinytest.
            MinimongoTest = {
              makeLookupFunction
            };

            MinimongoError = function (message) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (typeof message === 'string' && options.field) {
                message += " for field '".concat(options.field, "'");
              }

              const error = new Error(message);
              error.name = 'MinimongoError';
              return error;
            };

            function nothingMatcher(docOrBranchedValues) {
              return {
                result: false
              };
            }

            // Takes an operator object (an object with $ keys) and returns a branched
            // matcher for it.
            function operatorBranchedMatcher(valueSelector, matcher, isRoot) {
              // Each valueSelector works separately on the various branches.  So one
              // operator can match one branch and another can match another branch.  This
              // is OK.
              const operatorMatchers = Object.keys(valueSelector).map(operator => {
                const operand = valueSelector[operator];
                const simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';
                const simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);
                const simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(x => x === Object(x));

                if (!(simpleRange || simpleInclusion || simpleEquality)) {
                  matcher._isSimple = false;
                }

                if (hasOwn.call(VALUE_OPERATORS, operator)) {
                  return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);
                }

                if (hasOwn.call(ELEMENT_OPERATORS, operator)) {
                  const options = ELEMENT_OPERATORS[operator];
                  return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);
                }

                throw new Error("Unrecognized operator: ".concat(operator));
              });
              return andBranchedMatchers(operatorMatchers);
            } // paths - Array: list of mongo style paths
            // newLeafFn - Function: of form function(path) should return a scalar value to
            //                       put into list created for that path
            // conflictFn - Function: of form function(node, path, fullPath) is called
            //                        when building a tree path for 'fullPath' node on
            //                        'path' was already a leaf with a value. Must return a
            //                        conflict resolution.
            // initial tree - Optional Object: starting tree.
            // @returns - Object: tree represented as a set of nested objects


            function pathsToTree(paths, newLeafFn, conflictFn) {
              let root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
              paths.forEach(path => {
                const pathArray = path.split('.');
                let tree = root; // use .every just for iteration with break

                const success = pathArray.slice(0, -1).every((key, i) => {
                  if (!hasOwn.call(tree, key)) {
                    tree[key] = {};
                  } else if (tree[key] !== Object(tree[key])) {
                    tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path

                    if (tree[key] !== Object(tree[key])) {
                      return false;
                    }
                  }

                  tree = tree[key];
                  return true;
                });

                if (success) {
                  const lastKey = pathArray[pathArray.length - 1];

                  if (hasOwn.call(tree, lastKey)) {
                    tree[lastKey] = conflictFn(tree[lastKey], path, path);
                  } else {
                    tree[lastKey] = newLeafFn(path);
                  }
                }
              });
              return root;
            }

            // Makes sure we get 2 elements array and assume the first one to be x and
            // the second one to y no matter what user passes.
            // In case user passes { lon: x, lat: y } returns [x, y]
            function pointToArray(point) {
              return Array.isArray(point) ? point.slice() : [point.x, point.y];
            } // Creating a document from an upsert is quite tricky.
            // E.g. this selector: {"$or": [{"b.foo": {"$all": ["bar"]}}]}, should result
            // in: {"b.foo": "bar"}
            // But this selector: {"$or": [{"b": {"foo": {"$all": ["bar"]}}}]} should throw
            // an error
            // Some rules (found mainly with trial & error, so there might be more):
            // - handle all childs of $and (or implicit $and)
            // - handle $or nodes with exactly 1 child
            // - ignore $or nodes with more than 1 child
            // - ignore $nor and $not nodes
            // - throw when a value can not be set unambiguously
            // - every value for $all should be dealt with as separate $eq-s
            // - threat all children of $all as $eq setters (=> set if $all.length === 1,
            //   otherwise throw error)
            // - you can not mix '$'-prefixed keys and non-'$'-prefixed keys
            // - you can only have dotted keys on a root-level
            // - you can not have '$'-prefixed keys more than one-level deep in an object
            // Handles one key/value pair to put in the selector document


            function populateDocumentWithKeyValue(document, key, value) {
              if (value && Object.getPrototypeOf(value) === Object.prototype) {
                populateDocumentWithObject(document, key, value);
              } else if (!(value instanceof RegExp)) {
                insertIntoDocument(document, key, value);
              }
            } // Handles a key, value pair to put in the selector document
            // if the value is an object


            function populateDocumentWithObject(document, key, value) {
              const keys = Object.keys(value);
              const unprefixedKeys = keys.filter(op => op[0] !== '$');

              if (unprefixedKeys.length > 0 || !keys.length) {
                // Literal (possibly empty) object ( or empty object )
                // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields
                if (keys.length !== unprefixedKeys.length) {
                  throw new Error("unknown operator: ".concat(unprefixedKeys[0]));
                }

                validateObject(value, key);
                insertIntoDocument(document, key, value);
              } else {
                Object.keys(value).forEach(op => {
                  const object = value[op];

                  if (op === '$eq') {
                    populateDocumentWithKeyValue(document, key, object);
                  } else if (op === '$all') {
                    // every value for $all should be dealt with as separate $eq-s
                    object.forEach(element => populateDocumentWithKeyValue(document, key, element));
                  }
                });
              }
            } // Fills a document with certain fields from an upsert selector


            function populateDocumentWithQueryFields(query) {
              let document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (Object.getPrototypeOf(query) === Object.prototype) {
                // handle implicit $and
                Object.keys(query).forEach(key => {
                  const value = query[key];

                  if (key === '$and') {
                    // handle explicit $and
                    value.forEach(element => populateDocumentWithQueryFields(element, document));
                  } else if (key === '$or') {
                    // handle $or nodes with exactly 1 child
                    if (value.length === 1) {
                      populateDocumentWithQueryFields(value[0], document);
                    }
                  } else if (key[0] !== '$') {
                    // Ignore other '$'-prefixed logical selectors
                    populateDocumentWithKeyValue(document, key, value);
                  }
                });
              } else {
                // Handle meteor-specific shortcut for selecting _id
                if (LocalCollection._selectorIsId(query)) {
                  insertIntoDocument(document, '_id', query);
                }
              }

              return document;
            }

            function projectionDetails(fields) {
              // Find the non-_id keys (_id is handled specially because it is included
              // unless explicitly excluded). Sort the keys, so that our code to detect
              // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.
              let fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is
              // required to determine if this is an exclusion or exclusion. Also keep an
              // inclusive _id, since inclusive _id follows the normal rules about mixing
              // inclusive and exclusive fields. If _id is not the only field in the
              // projection and is exclusive, remove it so it can be handled later by a
              // special case, since exclusive _id is always allowed.

              if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {
                fieldsKeys = fieldsKeys.filter(key => key !== '_id');
              }

              let including = null; // Unknown

              fieldsKeys.forEach(keyPath => {
                const rule = !!fields[keyPath];

                if (including === null) {
                  including = rule;
                } // This error message is copied from MongoDB shell


                if (including !== rule) {
                  throw MinimongoError('You cannot currently mix including and excluding fields.');
                }
              });
              const projectionRulesTree = pathsToTree(fieldsKeys, path => including, (node, path, fullPath) => {
                // Check passed projection fields' keys: If you have two rules such as
                // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If
                // that happens, there is a probability you are doing something wrong,
                // framework should notify you about such mistake earlier on cursor
                // compilation step than later during runtime.  Note, that real mongo
                // doesn't do anything about it and the later rule appears in projection
                // project, more priority it takes.
                //
                // Example, assume following in mongo shell:
                // > db.coll.insert({ a: { b: 23, c: 44 } })
                // > db.coll.find({}, { 'a': 1, 'a.b': 1 })
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23}}
                // > db.coll.find({}, { 'a.b': 1, 'a': 1 })
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23, "c": 44}}
                //
                // Note, how second time the return set of keys is different.
                const currentPath = fullPath;
                const anotherPath = path;
                throw MinimongoError("both ".concat(currentPath, " and ").concat(anotherPath, " found in fields option, ") + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');
              });
              return {
                including,
                tree: projectionRulesTree
              };
            }

            function regexpElementMatcher(regexp) {
              return value => {
                if (value instanceof RegExp) {
                  return value.toString() === regexp.toString();
                } // Regexps only work against strings.


                if (typeof value !== 'string') {
                  return false;
                } // Reset regexp's state to avoid inconsistent matching for objects with the
                // same value on consecutive calls of regexp.test. This happens only if the
                // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for
                // which we should *not* change the lastIndex but MongoDB doesn't support
                // either of these flags.


                regexp.lastIndex = 0;
                return regexp.test(value);
              };
            }

            // Validates the key in a path.
            // Objects that are nested more then 1 level cannot have dotted fields
            // or fields starting with '$'
            function validateKeyInPath(key, path) {
              if (key.includes('.')) {
                throw new Error("The dotted field '".concat(key, "' in '").concat(path, ".").concat(key, " is not valid for storage."));
              }

              if (key[0] === '$') {
                throw new Error("The dollar ($) prefixed field  '".concat(path, ".").concat(key, " is not valid for storage."));
              }
            } // Recursively validates an object that is nested more than one level deep


            function validateObject(object, path) {
              if (object && Object.getPrototypeOf(object) === Object.prototype) {
                Object.keys(object).forEach(key => {
                  validateKeyInPath(key, path);
                  validateObject(object[key], path + '.' + key);
                });
              }
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "cursor.js": function (_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/cursor.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              default: () => Cursor
            });
            let LocalCollection;
            _module3.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            let hasOwn;
            _module3.link("./common.js", {
              hasOwn(v) {
                hasOwn = v;
              }

            }, 1);

            class Cursor {
              // don't call this ctor directly.  use LocalCollection.find().
              constructor(collection, selector) {
                let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this.collection = collection;
                this.sorter = null;
                this.matcher = new Minimongo.Matcher(selector);

                if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                  // stash for fast _id and { _id }
                  this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;
                } else {
                  this._selectorId = undefined;

                  if (this.matcher.hasGeoQuery() || options.sort) {
                    this.sorter = new Minimongo.Sorter(options.sort || []);
                  }
                }

                this.skip = options.skip || 0;
                this.limit = options.limit;
                this.fields = options.fields;
                this._projectionFn = LocalCollection._compileProjection(this.fields || {});
                this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.

                if (typeof Tracker !== 'undefined') {
                  this.reactive = options.reactive === undefined ? true : options.reactive;
                }
              }
              /**
               * @summary Returns the number of documents that match a query.
               * @memberOf Mongo.Cursor
               * @method  count
               * @param {boolean} [applySkipLimit=true] If set to `false`, the value
               *                                         returned will reflect the total
               *                                         number of matching documents,
               *                                         ignoring any value supplied for
               *                                         limit
               * @instance
               * @locus Anywhere
               * @returns {Number}
               */

              count() {
                let applySkipLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                if (this.reactive) {
                  // allow the observe to be unordered
                  this._depend({
                    added: true,
                    removed: true
                  }, true);
                }

                return this._getRawObjects({
                  ordered: true,
                  applySkipLimit
                }).length;
              }
              /**
               * @summary Return all matching documents as an Array.
               * @memberOf Mongo.Cursor
               * @method  fetch
               * @instance
               * @locus Anywhere
               * @returns {Object[]}
               */

              fetch() {
                const result = [];
                this.forEach(doc => {
                  result.push(doc);
                });
                return result;
              }

              [Symbol.iterator]() {
                if (this.reactive) {
                  this._depend({
                    addedBefore: true,
                    removed: true,
                    changed: true,
                    movedBefore: true
                  });
                }

                let index = 0;

                const objects = this._getRawObjects({
                  ordered: true
                });

                return {
                  next: () => {
                    if (index < objects.length) {
                      // This doubles as a clone operation.
                      let element = this._projectionFn(objects[index++]);

                      if (this._transform) element = this._transform(element);
                      return {
                        value: element
                      };
                    }

                    return {
                      done: true
                    };
                  }
                };
              }
              /**
               * @callback IterationCallback
               * @param {Object} doc
               * @param {Number} index
               */

              /**
               * @summary Call `callback` once for each matching document, sequentially and
               *          synchronously.
               * @locus Anywhere
               * @method  forEach
               * @instance
               * @memberOf Mongo.Cursor
               * @param {IterationCallback} callback Function to call. It will be called
               *                                     with three arguments: the document, a
               *                                     0-based index, and <em>cursor</em>
               *                                     itself.
               * @param {Any} [thisArg] An object which will be the value of `this` inside
               *                        `callback`.
               */

              forEach(callback, thisArg) {
                if (this.reactive) {
                  this._depend({
                    addedBefore: true,
                    removed: true,
                    changed: true,
                    movedBefore: true
                  });
                }

                this._getRawObjects({
                  ordered: true
                }).forEach((element, i) => {
                  // This doubles as a clone operation.
                  element = this._projectionFn(element);

                  if (this._transform) {
                    element = this._transform(element);
                  }

                  callback.call(thisArg, element, i, this);
                });
              }

              getTransform() {
                return this._transform;
              }
              /**
               * @summary Map callback over all matching documents.  Returns an Array.
               * @locus Anywhere
               * @method map
               * @instance
               * @memberOf Mongo.Cursor
               * @param {IterationCallback} callback Function to call. It will be called
               *                                     with three arguments: the document, a
               *                                     0-based index, and <em>cursor</em>
               *                                     itself.
               * @param {Any} [thisArg] An object which will be the value of `this` inside
               *                        `callback`.
               */

              map(callback, thisArg) {
                const result = [];
                this.forEach((doc, i) => {
                  result.push(callback.call(thisArg, doc, i, this));
                });
                return result;
              } // options to contain:
              //  * callbacks for observe():
              //    - addedAt (document, atIndex)
              //    - added (document)
              //    - changedAt (newDocument, oldDocument, atIndex)
              //    - changed (newDocument, oldDocument)
              //    - removedAt (document, atIndex)
              //    - removed (document)
              //    - movedTo (document, oldIndex, newIndex)
              //
              // attributes available on returned query handle:
              //  * stop(): end updates
              //  * collection: the collection this query is querying
              //
              // iff x is a returned query handle, (x instanceof
              // LocalCollection.ObserveHandle) is true
              //
              // initial results delivered through added callback
              // XXX maybe callbacks should take a list of objects, to expose transactions?
              // XXX maybe support field limiting (to limit what you're notified on)

              /**
               * @summary Watch a query.  Receive callbacks as the result set changes.
               * @locus Anywhere
               * @memberOf Mongo.Cursor
               * @instance
               * @param {Object} callbacks Functions to call to deliver the result set as it
               *                           changes
               */

              observe(options) {
                return LocalCollection._observeFromObserveChanges(this, options);
              }
              /**
               * @summary Watch a query. Receive callbacks as the result set changes. Only
               *          the differences between the old and new documents are passed to
               *          the callbacks.
               * @locus Anywhere
               * @memberOf Mongo.Cursor
               * @instance
               * @param {Object} callbacks Functions to call to deliver the result set as it
               *                           changes
               */

              observeChanges(options) {
                const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with
                // unordered observe.  eg, update's EJSON.clone, and the "there are several"
                // comment in _modifyAndNotify
                // XXX allow skip/limit with unordered observe


                if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {
                  throw new Error("Must use an ordered observe with skip or limit (i.e. 'addedBefore' " + "for observeChanges or 'addedAt' for observe, instead of 'added').");
                }

                if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {
                  throw Error('You may not observe a cursor with {fields: {_id: 0}}');
                }

                const distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();
                const query = {
                  cursor: this,
                  dirty: false,
                  distances,
                  matcher: this.matcher,
                  // not fast pathed
                  ordered,
                  projectionFn: this._projectionFn,
                  resultsSnapshot: null,
                  sorter: ordered && this.sorter
                };
                let qid; // Non-reactive queries call added[Before] and then never call anything
                // else.

                if (this.reactive) {
                  qid = this.collection.next_qid++;
                  this.collection.queries[qid] = query;
                }

                query.results = this._getRawObjects({
                  ordered,
                  distances: query.distances
                });

                if (this.collection.paused) {
                  query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();
                } // wrap callbacks we were passed. callbacks only fire when not paused and
                // are never undefined
                // Filters out blacklisted fields according to cursor's projection.
                // XXX wrong place for this?
                // furthermore, callbacks enqueue until the operation we're working on is
                // done.


                const wrapCallback = fn => {
                  if (!fn) {
                    return () => {};
                  }

                  const self = this;
                  return function ()
                  /* args*/
                  {
                    if (self.collection.paused) {
                      return;
                    }

                    const args = arguments;

                    self.collection._observeQueue.queueTask(() => {
                      fn.apply(this, args);
                    });
                  };
                };

                query.added = wrapCallback(options.added);
                query.changed = wrapCallback(options.changed);
                query.removed = wrapCallback(options.removed);

                if (ordered) {
                  query.addedBefore = wrapCallback(options.addedBefore);
                  query.movedBefore = wrapCallback(options.movedBefore);
                }

                if (!options._suppress_initial && !this.collection.paused) {
                  query.results.forEach(doc => {
                    const fields = EJSON.clone(doc);
                    delete fields._id;

                    if (ordered) {
                      query.addedBefore(doc._id, this._projectionFn(fields), null);
                    }

                    query.added(doc._id, this._projectionFn(fields));
                  });
                }

                const handle = Object.assign(new LocalCollection.ObserveHandle(), {
                  collection: this.collection,
                  stop: () => {
                    if (this.reactive) {
                      delete this.collection.queries[qid];
                    }
                  }
                });

                if (this.reactive && Tracker.active) {
                  // XXX in many cases, the same observe will be recreated when
                  // the current autorun is rerun.  we could save work by
                  // letting it linger across rerun and potentially get
                  // repurposed if the same observe is performed, using logic
                  // similar to that of Meteor.subscribe.
                  Tracker.onInvalidate(() => {
                    handle.stop();
                  });
                } // run the observe callbacks resulting from the initial contents
                // before we leave the observe.


                this.collection._observeQueue.drain();

                return handle;
              } // Since we don't actually have a "nextObject" interface, there's really no
              // reason to have a "rewind" interface.  All it did was make multiple calls
              // to fetch/map/forEach return nothing the second time.
              // XXX COMPAT WITH 0.8.1


              rewind() {} // XXX Maybe we need a version of observe that just calls a callback if
              // anything changed.


              _depend(changers, _allow_unordered) {
                if (Tracker.active) {
                  const dependency = new Tracker.Dependency();
                  const notify = dependency.changed.bind(dependency);
                  dependency.depend();
                  const options = {
                    _allow_unordered,
                    _suppress_initial: true
                  };
                  ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(fn => {
                    if (changers[fn]) {
                      options[fn] = notify;
                    }
                  }); // observeChanges will stop() when this computation is invalidated

                  this.observeChanges(options);
                }
              }

              _getCollectionName() {
                return this.collection.name;
              } // Returns a collection of matching objects, but doesn't deep copy them.
              //
              // If ordered is set, returns a sorted array, respecting sorter, skip, and
              // limit properties of the query provided that options.applySkipLimit is
              // not set to false (#1201). If sorter is falsey, no sort -- you get the
              // natural order.
              //
              // If ordered is not set, returns an object mapping from ID to doc (sorter,
              // skip and limit should not be set).
              //
              // If ordered is set and this cursor is a $near geoquery, then this function
              // will use an _IdMap to track each distance from the $near argument point in
              // order to use it as a sort key. If an _IdMap is passed in the 'distances'
              // argument, this function will clear it and use it for this purpose
              // (otherwise it will just create its own _IdMap). The observeChanges
              // implementation uses this to remember the distances after this function
              // returns.


              _getRawObjects() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                // By default this method will respect skip and limit because .fetch(),
                // .forEach() etc... expect this behaviour. It can be forced to ignore
                // skip and limit by setting applySkipLimit to false (.count() does this,
                // for example)
                const applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict
                // compatible

                const results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value

                if (this._selectorId !== undefined) {
                  // If you have non-zero skip and ask for a single id, you get nothing.
                  // This is so it matches the behavior of the '{_id: foo}' path.
                  if (applySkipLimit && this.skip) {
                    return results;
                  }

                  const selectedDoc = this.collection._docs.get(this._selectorId);

                  if (selectedDoc) {
                    if (options.ordered) {
                      results.push(selectedDoc);
                    } else {
                      results.set(this._selectorId, selectedDoc);
                    }
                  }

                  return results;
                } // slow path for arbitrary selector, sort, skip, limit
                // in the observeChanges case, distances is actually part of the "query"
                // (ie, live results set) object.  in other cases, distances is only used
                // inside this function.


                let distances;

                if (this.matcher.hasGeoQuery() && options.ordered) {
                  if (options.distances) {
                    distances = options.distances;
                    distances.clear();
                  } else {
                    distances = new LocalCollection._IdMap();
                  }
                }

                this.collection._docs.forEach((doc, id) => {
                  const matchResult = this.matcher.documentMatches(doc);

                  if (matchResult.result) {
                    if (options.ordered) {
                      results.push(doc);

                      if (distances && matchResult.distance !== undefined) {
                        distances.set(id, matchResult.distance);
                      }
                    } else {
                      results.set(id, doc);
                    }
                  } // Override to ensure all docs are matched if ignoring skip & limit


                  if (!applySkipLimit) {
                    return true;
                  } // Fast path for limited unsorted queries.
                  // XXX 'length' check here seems wrong for ordered


                  return !this.limit || this.skip || this.sorter || results.length !== this.limit;
                });

                if (!options.ordered) {
                  return results;
                }

                if (this.sorter) {
                  results.sort(this.sorter.getComparator({
                    distances
                  }));
                } // Return the full set of results if there is no skip or limit or if we're
                // ignoring them


                if (!applySkipLimit || !this.limit && !this.skip) {
                  return results;
                }

                return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);
              }

              _publishCursor(subscription) {
                // XXX minimongo should not depend on mongo-livedata!
                if (!Package.mongo) {
                  throw new Error('Can\'t publish from Minimongo without the `mongo` package.');
                }

                if (!this.collection.name) {
                  throw new Error('Can\'t publish a cursor from a collection without a name.');
                }

                return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "local_collection.js": function (_require5, _exports5, _module4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/local_collection.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module4.export({
              default: () => LocalCollection
            });
            let Cursor;
            _module4.link("./cursor.js", {
              default(v) {
                Cursor = v;
              }

            }, 0);
            let ObserveHandle;
            _module4.link("./observe_handle.js", {
              default(v) {
                ObserveHandle = v;
              }

            }, 1);
            let hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;
            _module4.link("./common.js", {
              hasOwn(v) {
                hasOwn = v;
              },

              isIndexable(v) {
                isIndexable = v;
              },

              isNumericKey(v) {
                isNumericKey = v;
              },

              isOperatorObject(v) {
                isOperatorObject = v;
              },

              populateDocumentWithQueryFields(v) {
                populateDocumentWithQueryFields = v;
              },

              projectionDetails(v) {
                projectionDetails = v;
              }

            }, 2);

            class LocalCollection {
              constructor(name) {
                this.name = name; // _id -> document (also containing id)

                this._docs = new LocalCollection._IdMap();
                this._observeQueue = new Meteor._SynchronousQueue();
                this.next_qid = 1; // live query id generator
                // qid -> live query object. keys:
                //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.
                //  results: array (ordered) or object (unordered) of current results
                //    (aliased with this._docs!)
                //  resultsSnapshot: snapshot of results. null if not paused.
                //  cursor: Cursor object for the query.
                //  selector, sorter, (callbacks): functions

                this.queries = Object.create(null); // null if not saving originals; an IdMap from id to original document value
                // if saving originals. See comments before saveOriginals().

                this._savedOriginals = null; // True when observers are paused and we should not send callbacks.

                this.paused = false;
              } // options may include sort, skip, limit, reactive
              // sort may be any of these forms:
              //     {a: 1, b: -1}
              //     [["a", "asc"], ["b", "desc"]]
              //     ["a", ["b", "desc"]]
              //   (in the first form you're beholden to key enumeration order in
              //   your javascript VM)
              //
              // reactive: if given, and false, don't register with Tracker (default
              // is true)
              //
              // XXX possibly should support retrieving a subset of fields? and
              // have it be a hint (ignored on the client, when not copying the
              // doc?)
              //
              // XXX sort does not yet support subkeys ('a.b') .. fix that!
              // XXX add one more sort form: "key"
              // XXX tests


              find(selector, options) {
                // default syntax for everything is to omit the selector argument.
                // but if selector is explicitly passed in as false or undefined, we
                // want a selector that matches nothing.
                if (arguments.length === 0) {
                  selector = {};
                }

                return new LocalCollection.Cursor(this, selector, options);
              }

              findOne(selector) {
                let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                if (arguments.length === 0) {
                  selector = {};
                } // NOTE: by setting limit 1 here, we end up using very inefficient
                // code that recomputes the whole query on each update. The upside is
                // that when you reactively depend on a findOne you only get
                // invalidated when the found object changes, not any object in the
                // collection. Most findOne will be by id, which has a fast path, so
                // this might not be a big deal. In most cases, invalidation causes
                // the called to re-query anyway, so this should be a net performance
                // improvement.


                options.limit = 1;
                return this.find(selector, options).fetch()[0];
              } // XXX possibly enforce that 'undefined' does not appear (we assume
              // this in our handling of null and $exists)


              insert(doc, callback) {
                doc = EJSON.clone(doc);
                assertHasValidFieldNames(doc); // if you really want to use ObjectIDs, set this global.
                // Mongo.Collection specifies its own ids and does not use this code.

                if (!hasOwn.call(doc, '_id')) {
                  doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();
                }

                const id = doc._id;

                if (this._docs.has(id)) {
                  throw MinimongoError("Duplicate _id '".concat(id, "'"));
                }

                this._saveOriginal(id, undefined);

                this._docs.set(id, doc);

                const queriesToRecompute = []; // trigger live queries that match

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  const matchResult = query.matcher.documentMatches(doc);

                  if (matchResult.result) {
                    if (query.distances && matchResult.distance !== undefined) {
                      query.distances.set(id, matchResult.distance);
                    }

                    if (query.cursor.skip || query.cursor.limit) {
                      queriesToRecompute.push(qid);
                    } else {
                      LocalCollection._insertInResults(query, doc);
                    }
                  }
                });
                queriesToRecompute.forEach(qid => {
                  if (this.queries[qid]) {
                    this._recomputeResults(this.queries[qid]);
                  }
                });

                this._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run
                // immediately.


                if (callback) {
                  Meteor.defer(() => {
                    callback(null, id);
                  });
                }

                return id;
              } // Pause the observers. No callbacks from observers will fire until
              // 'resumeObservers' is called.


              pauseObservers() {
                // No-op if already paused.
                if (this.paused) {
                  return;
                } // Set the 'paused' flag such that new observer messages don't fire.


                this.paused = true; // Take a snapshot of the query results for each query.

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];
                  query.resultsSnapshot = EJSON.clone(query.results);
                });
              }

              remove(selector, callback) {
                // Easy special case: if we're not calling observeChanges callbacks and
                // we're not saving originals and we got asked to remove everything, then
                // just empty everything directly.
                if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {
                  const result = this._docs.size();

                  this._docs.clear();

                  Object.keys(this.queries).forEach(qid => {
                    const query = this.queries[qid];

                    if (query.ordered) {
                      query.results = [];
                    } else {
                      query.results.clear();
                    }
                  });

                  if (callback) {
                    Meteor.defer(() => {
                      callback(null, result);
                    });
                  }

                  return result;
                }

                const matcher = new Minimongo.Matcher(selector);
                const remove = [];

                this._eachPossiblyMatchingDoc(selector, (doc, id) => {
                  if (matcher.documentMatches(doc).result) {
                    remove.push(id);
                  }
                });

                const queriesToRecompute = [];
                const queryRemove = [];

                for (let i = 0; i < remove.length; i++) {
                  const removeId = remove[i];

                  const removeDoc = this._docs.get(removeId);

                  Object.keys(this.queries).forEach(qid => {
                    const query = this.queries[qid];

                    if (query.dirty) {
                      return;
                    }

                    if (query.matcher.documentMatches(removeDoc).result) {
                      if (query.cursor.skip || query.cursor.limit) {
                        queriesToRecompute.push(qid);
                      } else {
                        queryRemove.push({
                          qid,
                          doc: removeDoc
                        });
                      }
                    }
                  });

                  this._saveOriginal(removeId, removeDoc);

                  this._docs.remove(removeId);
                } // run live query callbacks _after_ we've removed the documents.


                queryRemove.forEach(remove => {
                  const query = this.queries[remove.qid];

                  if (query) {
                    query.distances && query.distances.remove(remove.doc._id);

                    LocalCollection._removeFromResults(query, remove.doc);
                  }
                });
                queriesToRecompute.forEach(qid => {
                  const query = this.queries[qid];

                  if (query) {
                    this._recomputeResults(query);
                  }
                });

                this._observeQueue.drain();

                const result = remove.length;

                if (callback) {
                  Meteor.defer(() => {
                    callback(null, result);
                  });
                }

                return result;
              } // Resume the observers. Observers immediately receive change
              // notifications to bring them to the current state of the
              // database. Note that this is not just replaying all the changes that
              // happened during the pause, it is a smarter 'coalesced' diff.


              resumeObservers() {
                // No-op if not paused.
                if (!this.paused) {
                  return;
                } // Unset the 'paused' flag. Make sure to do this first, otherwise
                // observer methods won't actually fire when we trigger them.


                this.paused = false;
                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges`
                    // automatically.

                    this._recomputeResults(query, query.resultsSnapshot);
                  } else {
                    // Diff the current results against the snapshot and send to observers.
                    // pass the query object for its observer callbacks.
                    LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {
                      projectionFn: query.projectionFn
                    });
                  }

                  query.resultsSnapshot = null;
                });

                this._observeQueue.drain();
              }

              retrieveOriginals() {
                if (!this._savedOriginals) {
                  throw new Error('Called retrieveOriginals without saveOriginals');
                }

                const originals = this._savedOriginals;
                this._savedOriginals = null;
                return originals;
              } // To track what documents are affected by a piece of code, call
              // saveOriginals() before it and retrieveOriginals() after it.
              // retrieveOriginals returns an object whose keys are the ids of the documents
              // that were affected since the call to saveOriginals(), and the values are
              // equal to the document's contents at the time of saveOriginals. (In the case
              // of an inserted document, undefined is the value.) You must alternate
              // between calls to saveOriginals() and retrieveOriginals().


              saveOriginals() {
                if (this._savedOriginals) {
                  throw new Error('Called saveOriginals twice without retrieveOriginals');
                }

                this._savedOriginals = new LocalCollection._IdMap();
              } // XXX atomicity: if multi is true, and one modification fails, do
              // we rollback the whole operation, or what?


              update(selector, mod, options, callback) {
                if (!callback && options instanceof Function) {
                  callback = options;
                  options = null;
                }

                if (!options) {
                  options = {};
                }

                const matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to
                // _recomputeResults on, because _modifyAndNotify will mutate the objects in
                // it. (We don't need to save the original results of paused queries because
                // they already have a resultsSnapshot and we won't be diffing in
                // _recomputeResults.)

                const qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple
                // queries

                const docMap = new LocalCollection._IdMap();

                const idsMatched = LocalCollection._idsMatchedBySelector(selector);

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if ((query.cursor.skip || query.cursor.limit) && !this.paused) {
                    // Catch the case of a reactive `count()` on a cursor with skip
                    // or limit, which registers an unordered observe. This is a
                    // pretty rare case, so we just clone the entire result set with
                    // no optimizations for documents that appear in these result
                    // sets and other queries.
                    if (query.results instanceof LocalCollection._IdMap) {
                      qidToOriginalResults[qid] = query.results.clone();
                      return;
                    }

                    if (!(query.results instanceof Array)) {
                      throw new Error('Assertion failed: query.results not an array');
                    } // Clones a document to be stored in `qidToOriginalResults`
                    // because it may be modified before the new and old result sets
                    // are diffed. But if we know exactly which document IDs we're
                    // going to modify, then we only need to clone those.


                    const memoizedCloneIfNeeded = doc => {
                      if (docMap.has(doc._id)) {
                        return docMap.get(doc._id);
                      }

                      const docToMemoize = idsMatched && !idsMatched.some(id => EJSON.equals(id, doc._id)) ? doc : EJSON.clone(doc);
                      docMap.set(doc._id, docToMemoize);
                      return docToMemoize;
                    };

                    qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);
                  }
                });
                const recomputeQids = {};
                let updateCount = 0;

                this._eachPossiblyMatchingDoc(selector, (doc, id) => {
                  const queryResult = matcher.documentMatches(doc);

                  if (queryResult.result) {
                    // XXX Should we save the original even if mod ends up being a no-op?
                    this._saveOriginal(id, doc);

                    this._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);

                    ++updateCount;

                    if (!options.multi) {
                      return false; // break
                    }
                  }

                  return true;
                });

                Object.keys(recomputeQids).forEach(qid => {
                  const query = this.queries[qid];

                  if (query) {
                    this._recomputeResults(query, qidToOriginalResults[qid]);
                  }
                });

                this._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then
                // it's time to do an insert. Figure out what document we are inserting, and
                // generate an id for it.


                let insertedId;

                if (updateCount === 0 && options.upsert) {
                  const doc = LocalCollection._createUpsertDocument(selector, mod);

                  if (!doc._id && options.insertedId) {
                    doc._id = options.insertedId;
                  }

                  insertedId = this.insert(doc);
                  updateCount = 1;
                } // Return the number of affected documents, or in the upsert case, an object
                // containing the number of affected docs and the id of the doc that was
                // inserted, if any.


                let result;

                if (options._returnObject) {
                  result = {
                    numberAffected: updateCount
                  };

                  if (insertedId !== undefined) {
                    result.insertedId = insertedId;
                  }
                } else {
                  result = updateCount;
                }

                if (callback) {
                  Meteor.defer(() => {
                    callback(null, result);
                  });
                }

                return result;
              } // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is
              // equivalent to LocalCollection.update(sel, mod, {upsert: true,
              // _returnObject: true}).


              upsert(selector, mod, options, callback) {
                if (!callback && typeof options === 'function') {
                  callback = options;
                  options = {};
                }

                return this.update(selector, mod, Object.assign({}, options, {
                  upsert: true,
                  _returnObject: true
                }), callback);
              } // Iterates over a subset of documents that could match selector; calls
              // fn(doc, id) on each of them.  Specifically, if selector specifies
              // specific _id's, it only looks at those.  doc is *not* cloned: it is the
              // same object that is in _docs.


              _eachPossiblyMatchingDoc(selector, fn) {
                const specificIds = LocalCollection._idsMatchedBySelector(selector);

                if (specificIds) {
                  specificIds.some(id => {
                    const doc = this._docs.get(id);

                    if (doc) {
                      return fn(doc, id) === false;
                    }
                  });
                } else {
                  this._docs.forEach(fn);
                }
              }

              _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {
                const matched_before = {};
                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  if (query.ordered) {
                    matched_before[qid] = query.matcher.documentMatches(doc).result;
                  } else {
                    // Because we don't support skip or limit (yet) in unordered queries, we
                    // can just do a direct lookup.
                    matched_before[qid] = query.results.has(doc._id);
                  }
                });
                const old_doc = EJSON.clone(doc);

                LocalCollection._modify(doc, mod, {
                  arrayIndices
                });

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  const afterMatch = query.matcher.documentMatches(doc);
                  const after = afterMatch.result;
                  const before = matched_before[qid];

                  if (after && query.distances && afterMatch.distance !== undefined) {
                    query.distances.set(doc._id, afterMatch.distance);
                  }

                  if (query.cursor.skip || query.cursor.limit) {
                    // We need to recompute any query where the doc may have been in the
                    // cursor's window either before or after the update. (Note that if skip
                    // or limit is set, "before" and "after" being true do not necessarily
                    // mean that the document is in the cursor's output after skip/limit is
                    // applied... but if they are false, then the document definitely is NOT
                    // in the output. So it's safe to skip recompute if neither before or
                    // after are true.)
                    if (before || after) {
                      recomputeQids[qid] = true;
                    }
                  } else if (before && !after) {
                    LocalCollection._removeFromResults(query, doc);
                  } else if (!before && after) {
                    LocalCollection._insertInResults(query, doc);
                  } else if (before && after) {
                    LocalCollection._updateInResults(query, doc, old_doc);
                  }
                });
              } // Recomputes the results of a query and runs observe callbacks for the
              // difference between the previous results and the current results (unless
              // paused). Used for skip/limit queries.
              //
              // When this is used by insert or remove, it can just use query.results for
              // the old results (and there's no need to pass in oldResults), because these
              // operations don't mutate the documents in the collection. Update needs to
              // pass in an oldResults which was deep-copied before the modifier was
              // applied.
              //
              // oldResults is guaranteed to be ignored if the query is not paused.


              _recomputeResults(query, oldResults) {
                if (this.paused) {
                  // There's no reason to recompute the results now as we're still paused.
                  // By flagging the query as "dirty", the recompute will be performed
                  // when resumeObservers is called.
                  query.dirty = true;
                  return;
                }

                if (!this.paused && !oldResults) {
                  oldResults = query.results;
                }

                if (query.distances) {
                  query.distances.clear();
                }

                query.results = query.cursor._getRawObjects({
                  distances: query.distances,
                  ordered: query.ordered
                });

                if (!this.paused) {
                  LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {
                    projectionFn: query.projectionFn
                  });
                }
              }

              _saveOriginal(id, doc) {
                // Are we even trying to save originals?
                if (!this._savedOriginals) {
                  return;
                } // Have we previously mutated the original (and so 'doc' is not actually
                // original)?  (Note the 'has' check rather than truth: we store undefined
                // here for inserted docs!)


                if (this._savedOriginals.has(id)) {
                  return;
                }

                this._savedOriginals.set(id, EJSON.clone(doc));
              }

            }

            LocalCollection.Cursor = Cursor;
            LocalCollection.ObserveHandle = ObserveHandle; // XXX maybe move these into another ObserveHelpers package or something
            // _CachingChangeObserver is an object which receives observeChanges callbacks
            // and keeps a cache of the current cursor state up to date in this.docs. Users
            // of this class should read the docs field but not modify it. You should pass
            // the "applyChange" field as the callbacks to the underlying observeChanges
            // call. Optionally, you can specify your own observeChanges callbacks which are
            // invoked immediately before the docs field is updated; this object is made
            // available as `this` to those callbacks.

            LocalCollection._CachingChangeObserver = class _CachingChangeObserver {
              constructor() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                const orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);

                if (hasOwn.call(options, 'ordered')) {
                  this.ordered = options.ordered;

                  if (options.callbacks && options.ordered !== orderedFromCallbacks) {
                    throw Error('ordered option doesn\'t match callbacks');
                  }
                } else if (options.callbacks) {
                  this.ordered = orderedFromCallbacks;
                } else {
                  throw Error('must provide ordered or callbacks');
                }

                const callbacks = options.callbacks || {};

                if (this.ordered) {
                  this.docs = new OrderedDict(MongoID.idStringify);
                  this.applyChange = {
                    addedBefore: (id, fields, before) => {
                      const doc = EJSON.clone(fields);
                      doc._id = id;

                      if (callbacks.addedBefore) {
                        callbacks.addedBefore.call(this, id, fields, before);
                      } // This line triggers if we provide added with movedBefore.


                      if (callbacks.added) {
                        callbacks.added.call(this, id, fields);
                      } // XXX could `before` be a falsy ID?  Technically
                      // idStringify seems to allow for them -- though
                      // OrderedDict won't call stringify on a falsy arg.


                      this.docs.putBefore(id, doc, before || null);
                    },
                    movedBefore: (id, before) => {
                      const doc = this.docs.get(id);

                      if (callbacks.movedBefore) {
                        callbacks.movedBefore.call(this, id, before);
                      }

                      this.docs.moveBefore(id, before || null);
                    }
                  };
                } else {
                  this.docs = new LocalCollection._IdMap();
                  this.applyChange = {
                    added: (id, fields) => {
                      const doc = EJSON.clone(fields);

                      if (callbacks.added) {
                        callbacks.added.call(this, id, fields);
                      }

                      doc._id = id;
                      this.docs.set(id, doc);
                    }
                  };
                } // The methods in _IdMap and OrderedDict used by these callbacks are
                // identical.


                this.applyChange.changed = (id, fields) => {
                  const doc = this.docs.get(id);

                  if (!doc) {
                    throw new Error("Unknown id for changed: ".concat(id));
                  }

                  if (callbacks.changed) {
                    callbacks.changed.call(this, id, EJSON.clone(fields));
                  }

                  DiffSequence.applyChanges(doc, fields);
                };

                this.applyChange.removed = id => {
                  if (callbacks.removed) {
                    callbacks.removed.call(this, id);
                  }

                  this.docs.remove(id);
                };
              }

            };
            LocalCollection._IdMap = class _IdMap extends IdMap {
              constructor() {
                super(MongoID.idStringify, MongoID.idParse);
              }

            }; // Wrap a transform function to return objects that have the _id field
            // of the untransformed document. This ensures that subsystems such as
            // the observe-sequence package that call `observe` can keep track of
            // the documents identities.
            //
            // - Require that it returns objects
            // - If the return value has an _id field, verify that it matches the
            //   original _id field
            // - If the return value doesn't have an _id field, add it back.

            LocalCollection.wrapTransform = transform => {
              if (!transform) {
                return null;
              } // No need to doubly-wrap transforms.


              if (transform.__wrappedTransform__) {
                return transform;
              }

              const wrapped = doc => {
                if (!hasOwn.call(doc, '_id')) {
                  // XXX do we ever have a transform on the oplog's collection? because that
                  // collection has no _id.
                  throw new Error('can only transform documents with _id');
                }

                const id = doc._id; // XXX consider making tracker a weak dependency and checking
                // Package.tracker here

                const transformed = Tracker.nonreactive(() => transform(doc));

                if (!LocalCollection._isPlainObject(transformed)) {
                  throw new Error('transform must return object');
                }

                if (hasOwn.call(transformed, '_id')) {
                  if (!EJSON.equals(transformed._id, id)) {
                    throw new Error('transformed document can\'t have different _id');
                  }
                } else {
                  transformed._id = id;
                }

                return transformed;
              };

              wrapped.__wrappedTransform__ = true;
              return wrapped;
            }; // XXX the sorted-query logic below is laughably inefficient. we'll
            // need to come up with a better datastructure for this.
            //
            // XXX the logic for observing with a skip or a limit is even more
            // laughably inefficient. we recompute the whole results every time!
            // This binary search puts a value between any equal values, and the first
            // lesser value.


            LocalCollection._binarySearch = (cmp, array, value) => {
              let first = 0;
              let range = array.length;

              while (range > 0) {
                const halfRange = Math.floor(range / 2);

                if (cmp(value, array[first + halfRange]) >= 0) {
                  first += halfRange + 1;
                  range -= halfRange + 1;
                } else {
                  range = halfRange;
                }
              }

              return first;
            };

            LocalCollection._checkSupportedProjection = fields => {
              if (fields !== Object(fields) || Array.isArray(fields)) {
                throw MinimongoError('fields option must be an object');
              }

              Object.keys(fields).forEach(keyPath => {
                if (keyPath.split('.').includes('$')) {
                  throw MinimongoError('Minimongo doesn\'t support $ operator in projections yet.');
                }

                const value = fields[keyPath];

                if (typeof value === 'object' && ['$elemMatch', '$meta', '$slice'].some(key => hasOwn.call(value, key))) {
                  throw MinimongoError('Minimongo doesn\'t support operators in projections yet.');
                }

                if (![1, 0, true, false].includes(value)) {
                  throw MinimongoError('Projection values should be one of 1, 0, true, or false');
                }
              });
            }; // Knows how to compile a fields projection to a predicate function.
            // @returns - Function: a closure that filters out an object according to the
            //            fields projection rules:
            //            @param obj - Object: MongoDB-styled document
            //            @returns - Object: a document with the fields filtered out
            //                       according to projection rules. Doesn't retain subfields
            //                       of passed argument.


            LocalCollection._compileProjection = fields => {
              LocalCollection._checkSupportedProjection(fields);

              const _idProjection = fields._id === undefined ? true : fields._id;

              const details = projectionDetails(fields); // returns transformed doc according to ruleTree

              const transform = (doc, ruleTree) => {
                // Special case for "sets"
                if (Array.isArray(doc)) {
                  return doc.map(subdoc => transform(subdoc, ruleTree));
                }

                const result = details.including ? {} : EJSON.clone(doc);
                Object.keys(ruleTree).forEach(key => {
                  if (!hasOwn.call(doc, key)) {
                    return;
                  }

                  const rule = ruleTree[key];

                  if (rule === Object(rule)) {
                    // For sub-objects/subsets we branch
                    if (doc[key] === Object(doc[key])) {
                      result[key] = transform(doc[key], rule);
                    }
                  } else if (details.including) {
                    // Otherwise we don't even touch this subfield
                    result[key] = EJSON.clone(doc[key]);
                  } else {
                    delete result[key];
                  }
                });
                return result;
              };

              return doc => {
                const result = transform(doc, details.tree);

                if (_idProjection && hasOwn.call(doc, '_id')) {
                  result._id = doc._id;
                }

                if (!_idProjection && hasOwn.call(result, '_id')) {
                  delete result._id;
                }

                return result;
              };
            }; // Calculates the document to insert in case we're doing an upsert and the
            // selector does not match any elements


            LocalCollection._createUpsertDocument = (selector, modifier) => {
              const selectorDocument = populateDocumentWithQueryFields(selector);

              const isModify = LocalCollection._isModificationMod(modifier);

              const newDoc = {};

              if (selectorDocument._id) {
                newDoc._id = selectorDocument._id;
                delete selectorDocument._id;
              } // This double _modify call is made to help with nested properties (see issue
              // #8631). We do this even if it's a replacement for validation purposes (e.g.
              // ambiguous id's)


              LocalCollection._modify(newDoc, {
                $set: selectorDocument
              });

              LocalCollection._modify(newDoc, modifier, {
                isInsert: true
              });

              if (isModify) {
                return newDoc;
              } // Replacement can take _id from query document


              const replacement = Object.assign({}, modifier);

              if (newDoc._id) {
                replacement._id = newDoc._id;
              }

              return replacement;
            };

            LocalCollection._diffObjects = (left, right, callbacks) => {
              return DiffSequence.diffObjects(left, right, callbacks);
            }; // ordered: bool.
            // old_results and new_results: collections of documents.
            //    if ordered, they are arrays.
            //    if unordered, they are IdMaps


            LocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) => DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);

            LocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);

            LocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);

            LocalCollection._findInOrderedResults = (query, doc) => {
              if (!query.ordered) {
                throw new Error('Can\'t call _findInOrderedResults on unordered query');
              }

              for (let i = 0; i < query.results.length; i++) {
                if (query.results[i] === doc) {
                  return i;
                }
              }

              throw Error('object missing from query');
            }; // If this is a selector which explicitly constrains the match by ID to a finite
            // number of documents, returns a list of their IDs.  Otherwise returns
            // null. Note that the selector may have other restrictions so it may not even
            // match those document!  We care about $in and $and since those are generated
            // access-controlled update and remove.


            LocalCollection._idsMatchedBySelector = selector => {
              // Is the selector just an ID?
              if (LocalCollection._selectorIsId(selector)) {
                return [selector];
              }

              if (!selector) {
                return null;
              } // Do we have an _id clause?


              if (hasOwn.call(selector, '_id')) {
                // Is the _id clause just an ID?
                if (LocalCollection._selectorIsId(selector._id)) {
                  return [selector._id];
                } // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?


                if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {
                  return selector._id.$in;
                }

                return null;
              } // If this is a top-level $and, and any of the clauses constrain their
              // documents, then the whole selector is constrained by any one clause's
              // constraint. (Well, by their intersection, but that seems unlikely.)


              if (Array.isArray(selector.$and)) {
                for (let i = 0; i < selector.$and.length; ++i) {
                  const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);

                  if (subIds) {
                    return subIds;
                  }
                }
              }

              return null;
            };

            LocalCollection._insertInResults = (query, doc) => {
              const fields = EJSON.clone(doc);
              delete fields._id;

              if (query.ordered) {
                if (!query.sorter) {
                  query.addedBefore(doc._id, query.projectionFn(fields), null);
                  query.results.push(doc);
                } else {
                  const i = LocalCollection._insertInSortedList(query.sorter.getComparator({
                    distances: query.distances
                  }), query.results, doc);

                  let next = query.results[i + 1];

                  if (next) {
                    next = next._id;
                  } else {
                    next = null;
                  }

                  query.addedBefore(doc._id, query.projectionFn(fields), next);
                }

                query.added(doc._id, query.projectionFn(fields));
              } else {
                query.added(doc._id, query.projectionFn(fields));
                query.results.set(doc._id, doc);
              }
            };

            LocalCollection._insertInSortedList = (cmp, array, value) => {
              if (array.length === 0) {
                array.push(value);
                return 0;
              }

              const i = LocalCollection._binarySearch(cmp, array, value);

              array.splice(i, 0, value);
              return i;
            };

            LocalCollection._isModificationMod = mod => {
              let isModify = false;
              let isReplace = false;
              Object.keys(mod).forEach(key => {
                if (key.substr(0, 1) === '$') {
                  isModify = true;
                } else {
                  isReplace = true;
                }
              });

              if (isModify && isReplace) {
                throw new Error('Update parameter cannot have both modifier and non-modifier fields.');
              }

              return isModify;
            }; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about
            // RegExp
            // XXX note that _type(undefined) === 3!!!!


            LocalCollection._isPlainObject = x => {
              return x && LocalCollection._f._type(x) === 3;
            }; // XXX need a strategy for passing the binding of $ into this
            // function, from the compiled selector
            //
            // maybe just {key.up.to.just.before.dollarsign: array_index}
            //
            // XXX atomicity: if one modification fails, do we roll back the whole
            // change?
            //
            // options:
            //   - isInsert is set when _modify is being called to compute the document to
            //     insert as part of an upsert operation. We use this primarily to figure
            //     out when to set the fields in $setOnInsert, if present.


            LocalCollection._modify = function (doc, modifier) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

              if (!LocalCollection._isPlainObject(modifier)) {
                throw MinimongoError('Modifier must be an object');
              } // Make sure the caller can't mutate our data structures.


              modifier = EJSON.clone(modifier);
              const isModifier = isOperatorObject(modifier);
              const newDoc = isModifier ? EJSON.clone(doc) : modifier;

              if (isModifier) {
                // apply modifiers to the doc.
                Object.keys(modifier).forEach(operator => {
                  // Treat $setOnInsert as $set if this is an insert.
                  const setOnInsert = options.isInsert && operator === '$setOnInsert';
                  const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];
                  const operand = modifier[operator];

                  if (!modFunc) {
                    throw MinimongoError("Invalid modifier specified ".concat(operator));
                  }

                  Object.keys(operand).forEach(keypath => {
                    const arg = operand[keypath];

                    if (keypath === '') {
                      throw MinimongoError('An empty update path is not valid.');
                    }

                    const keyparts = keypath.split('.');

                    if (!keyparts.every(Boolean)) {
                      throw MinimongoError("The update path '".concat(keypath, "' contains an empty field name, ") + 'which is not allowed.');
                    }

                    const target = findModTarget(newDoc, keyparts, {
                      arrayIndices: options.arrayIndices,
                      forbidArray: operator === '$rename',
                      noCreate: NO_CREATE_MODIFIERS[operator]
                    });
                    modFunc(target, keyparts.pop(), arg, keypath, newDoc);
                  });
                });

                if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {
                  throw MinimongoError("After applying the update to the document {_id: \"".concat(doc._id, "\", ...},") + ' the (immutable) field \'_id\' was found to have been altered to ' + "_id: \"".concat(newDoc._id, "\""));
                }
              } else {
                if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {
                  throw MinimongoError("The _id field cannot be changed from {_id: \"".concat(doc._id, "\"} to ") + "{_id: \"".concat(modifier._id, "\"}"));
                } // replace the whole document


                assertHasValidFieldNames(modifier);
              } // move new document into place.


              Object.keys(doc).forEach(key => {
                // Note: this used to be for (var key in doc) however, this does not
                // work right in Opera. Deleting from a doc while iterating over it
                // would sometimes cause opera to skip some keys.
                if (key !== '_id') {
                  delete doc[key];
                }
              });
              Object.keys(newDoc).forEach(key => {
                doc[key] = newDoc[key];
              });
            };

            LocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {
              const transform = cursor.getTransform() || (doc => doc);

              let suppressed = !!observeCallbacks._suppress_initial;
              let observeChangesCallbacks;

              if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {
                // The "_no_indices" option sets all index arguments to -1 and skips the
                // linear scans required to generate them.  This lets observers that don't
                // need absolute indices benefit from the other features of this API --
                // relative order, transforms, and applyChanges -- without the speed hit.
                const indices = !observeCallbacks._no_indices;
                observeChangesCallbacks = {
                  addedBefore(id, fields, before) {
                    if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {
                      return;
                    }

                    const doc = transform(Object.assign(fields, {
                      _id: id
                    }));

                    if (observeCallbacks.addedAt) {
                      observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);
                    } else {
                      observeCallbacks.added(doc);
                    }
                  },

                  changed(id, fields) {
                    if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {
                      return;
                    }

                    let doc = EJSON.clone(this.docs.get(id));

                    if (!doc) {
                      throw new Error("Unknown id for changed: ".concat(id));
                    }

                    const oldDoc = transform(EJSON.clone(doc));
                    DiffSequence.applyChanges(doc, fields);

                    if (observeCallbacks.changedAt) {
                      observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);
                    } else {
                      observeCallbacks.changed(transform(doc), oldDoc);
                    }
                  },

                  movedBefore(id, before) {
                    if (!observeCallbacks.movedTo) {
                      return;
                    }

                    const from = indices ? this.docs.indexOf(id) : -1;
                    let to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the
                    // document slides everything back one slot.

                    if (to > from) {
                      --to;
                    }

                    observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);
                  },

                  removed(id) {
                    if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {
                      return;
                    } // technically maybe there should be an EJSON.clone here, but it's about
                    // to be removed from this.docs!


                    const doc = transform(this.docs.get(id));

                    if (observeCallbacks.removedAt) {
                      observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);
                    } else {
                      observeCallbacks.removed(doc);
                    }
                  }

                };
              } else {
                observeChangesCallbacks = {
                  added(id, fields) {
                    if (!suppressed && observeCallbacks.added) {
                      observeCallbacks.added(transform(Object.assign(fields, {
                        _id: id
                      })));
                    }
                  },

                  changed(id, fields) {
                    if (observeCallbacks.changed) {
                      const oldDoc = this.docs.get(id);
                      const doc = EJSON.clone(oldDoc);
                      DiffSequence.applyChanges(doc, fields);
                      observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));
                    }
                  },

                  removed(id) {
                    if (observeCallbacks.removed) {
                      observeCallbacks.removed(transform(this.docs.get(id)));
                    }
                  }

                };
              }

              const changeObserver = new LocalCollection._CachingChangeObserver({
                callbacks: observeChangesCallbacks
              });
              const handle = cursor.observeChanges(changeObserver.applyChange);
              suppressed = false;
              return handle;
            };

            LocalCollection._observeCallbacksAreOrdered = callbacks => {
              if (callbacks.added && callbacks.addedAt) {
                throw new Error('Please specify only one of added() and addedAt()');
              }

              if (callbacks.changed && callbacks.changedAt) {
                throw new Error('Please specify only one of changed() and changedAt()');
              }

              if (callbacks.removed && callbacks.removedAt) {
                throw new Error('Please specify only one of removed() and removedAt()');
              }

              return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);
            };

            LocalCollection._observeChangesCallbacksAreOrdered = callbacks => {
              if (callbacks.added && callbacks.addedBefore) {
                throw new Error('Please specify only one of added() and addedBefore()');
              }

              return !!(callbacks.addedBefore || callbacks.movedBefore);
            };

            LocalCollection._removeFromResults = (query, doc) => {
              if (query.ordered) {
                const i = LocalCollection._findInOrderedResults(query, doc);

                query.removed(doc._id);
                query.results.splice(i, 1);
              } else {
                const id = doc._id; // in case callback mutates doc

                query.removed(doc._id);
                query.results.remove(id);
              }
            }; // Is this selector just shorthand for lookup by _id?


            LocalCollection._selectorIsId = selector => typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID; // Is the selector just lookup by _id (shorthand or not)?


            LocalCollection._selectorIsIdPerhapsAsObject = selector => LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;

            LocalCollection._updateInResults = (query, doc, old_doc) => {
              if (!EJSON.equals(doc._id, old_doc._id)) {
                throw new Error('Can\'t change a doc\'s _id while updating');
              }

              const projectionFn = query.projectionFn;
              const changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));

              if (!query.ordered) {
                if (Object.keys(changedFields).length) {
                  query.changed(doc._id, changedFields);
                  query.results.set(doc._id, doc);
                }

                return;
              }

              const old_idx = LocalCollection._findInOrderedResults(query, doc);

              if (Object.keys(changedFields).length) {
                query.changed(doc._id, changedFields);
              }

              if (!query.sorter) {
                return;
              } // just take it out and put it back in again, and see if the index changes


              query.results.splice(old_idx, 1);

              const new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({
                distances: query.distances
              }), query.results, doc);

              if (old_idx !== new_idx) {
                let next = query.results[new_idx + 1];

                if (next) {
                  next = next._id;
                } else {
                  next = null;
                }

                query.movedBefore && query.movedBefore(doc._id, next);
              }
            };

            const MODIFIERS = {
              $currentDate(target, field, arg) {
                if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {
                  if (arg.$type !== 'date') {
                    throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {
                      field
                    });
                  }
                } else if (arg !== true) {
                  throw MinimongoError('Invalid $currentDate modifier', {
                    field
                  });
                }

                target[field] = new Date();
              },

              $min(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $min allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $min modifier to non-number', {
                      field
                    });
                  }

                  if (target[field] > arg) {
                    target[field] = arg;
                  }
                } else {
                  target[field] = arg;
                }
              },

              $max(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $max allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $max modifier to non-number', {
                      field
                    });
                  }

                  if (target[field] < arg) {
                    target[field] = arg;
                  }
                } else {
                  target[field] = arg;
                }
              },

              $inc(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $inc allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $inc modifier to non-number', {
                      field
                    });
                  }

                  target[field] += arg;
                } else {
                  target[field] = arg;
                }
              },

              $set(target, field, arg) {
                if (target !== Object(target)) {
                  // not an array or an object
                  const error = MinimongoError('Cannot set property on non-object field', {
                    field
                  });
                  error.setPropertyError = true;
                  throw error;
                }

                if (target === null) {
                  const error = MinimongoError('Cannot set property on null', {
                    field
                  });
                  error.setPropertyError = true;
                  throw error;
                }

                assertHasValidFieldNames(arg);
                target[field] = arg;
              },

              $setOnInsert(target, field, arg) {// converted to `$set` in `_modify`
              },

              $unset(target, field, arg) {
                if (target !== undefined) {
                  if (target instanceof Array) {
                    if (field in target) {
                      target[field] = null;
                    }
                  } else {
                    delete target[field];
                  }
                }
              },

              $push(target, field, arg) {
                if (target[field] === undefined) {
                  target[field] = [];
                }

                if (!(target[field] instanceof Array)) {
                  throw MinimongoError('Cannot apply $push modifier to non-array', {
                    field
                  });
                }

                if (!(arg && arg.$each)) {
                  // Simple mode: not $each
                  assertHasValidFieldNames(arg);
                  target[field].push(arg);
                  return;
                } // Fancy mode: $each (and maybe $slice and $sort and $position)


                const toPush = arg.$each;

                if (!(toPush instanceof Array)) {
                  throw MinimongoError('$each must be an array', {
                    field
                  });
                }

                assertHasValidFieldNames(toPush); // Parse $position

                let position = undefined;

                if ('$position' in arg) {
                  if (typeof arg.$position !== 'number') {
                    throw MinimongoError('$position must be a numeric value', {
                      field
                    });
                  } // XXX should check to make sure integer


                  if (arg.$position < 0) {
                    throw MinimongoError('$position in $push must be zero or positive', {
                      field
                    });
                  }

                  position = arg.$position;
                } // Parse $slice.


                let slice = undefined;

                if ('$slice' in arg) {
                  if (typeof arg.$slice !== 'number') {
                    throw MinimongoError('$slice must be a numeric value', {
                      field
                    });
                  } // XXX should check to make sure integer


                  slice = arg.$slice;
                } // Parse $sort.


                let sortFunction = undefined;

                if (arg.$sort) {
                  if (slice === undefined) {
                    throw MinimongoError('$sort requires $slice to be present', {
                      field
                    });
                  } // XXX this allows us to use a $sort whose value is an array, but that's
                  // actually an extension of the Node driver, so it won't work
                  // server-side. Could be confusing!
                  // XXX is it correct that we don't do geo-stuff here?


                  sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();
                  toPush.forEach(element => {
                    if (LocalCollection._f._type(element) !== 3) {
                      throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {
                        field
                      });
                    }
                  });
                } // Actually push.


                if (position === undefined) {
                  toPush.forEach(element => {
                    target[field].push(element);
                  });
                } else {
                  const spliceArguments = [position, 0];
                  toPush.forEach(element => {
                    spliceArguments.push(element);
                  });
                  target[field].splice(...spliceArguments);
                } // Actually sort.


                if (sortFunction) {
                  target[field].sort(sortFunction);
                } // Actually slice.


                if (slice !== undefined) {
                  if (slice === 0) {
                    target[field] = []; // differs from Array.slice!
                  } else if (slice < 0) {
                    target[field] = target[field].slice(slice);
                  } else {
                    target[field] = target[field].slice(0, slice);
                  }
                }
              },

              $pushAll(target, field, arg) {
                if (!(typeof arg === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');
                }

                assertHasValidFieldNames(arg);
                const toPush = target[field];

                if (toPush === undefined) {
                  target[field] = arg;
                } else if (!(toPush instanceof Array)) {
                  throw MinimongoError('Cannot apply $pushAll modifier to non-array', {
                    field
                  });
                } else {
                  toPush.push(...arg);
                }
              },

              $addToSet(target, field, arg) {
                let isEach = false;

                if (typeof arg === 'object') {
                  // check if first key is '$each'
                  const keys = Object.keys(arg);

                  if (keys[0] === '$each') {
                    isEach = true;
                  }
                }

                const values = isEach ? arg.$each : [arg];
                assertHasValidFieldNames(values);
                const toAdd = target[field];

                if (toAdd === undefined) {
                  target[field] = values;
                } else if (!(toAdd instanceof Array)) {
                  throw MinimongoError('Cannot apply $addToSet modifier to non-array', {
                    field
                  });
                } else {
                  values.forEach(value => {
                    if (toAdd.some(element => LocalCollection._f._equal(value, element))) {
                      return;
                    }

                    toAdd.push(value);
                  });
                }
              },

              $pop(target, field, arg) {
                if (target === undefined) {
                  return;
                }

                const toPop = target[field];

                if (toPop === undefined) {
                  return;
                }

                if (!(toPop instanceof Array)) {
                  throw MinimongoError('Cannot apply $pop modifier to non-array', {
                    field
                  });
                }

                if (typeof arg === 'number' && arg < 0) {
                  toPop.splice(0, 1);
                } else {
                  toPop.pop();
                }
              },

              $pull(target, field, arg) {
                if (target === undefined) {
                  return;
                }

                const toPull = target[field];

                if (toPull === undefined) {
                  return;
                }

                if (!(toPull instanceof Array)) {
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {
                    field
                  });
                }

                let out;

                if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {
                  // XXX would be much nicer to compile this once, rather than
                  // for each document we modify.. but usually we're not
                  // modifying that many documents, so we'll let it slide for
                  // now
                  // XXX Minimongo.Matcher isn't up for the job, because we need
                  // to permit stuff like {$pull: {a: {$gt: 4}}}.. something
                  // like {$gt: 4} is not normally a complete selector.
                  // same issue as $elemMatch possibly?
                  const matcher = new Minimongo.Matcher(arg);
                  out = toPull.filter(element => !matcher.documentMatches(element).result);
                } else {
                  out = toPull.filter(element => !LocalCollection._f._equal(element, arg));
                }

                target[field] = out;
              },

              $pullAll(target, field, arg) {
                if (!(typeof arg === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {
                    field
                  });
                }

                if (target === undefined) {
                  return;
                }

                const toPull = target[field];

                if (toPull === undefined) {
                  return;
                }

                if (!(toPull instanceof Array)) {
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {
                    field
                  });
                }

                target[field] = toPull.filter(object => !arg.some(element => LocalCollection._f._equal(object, element)));
              },

              $rename(target, field, arg, keypath, doc) {
                // no idea why mongo has this restriction..
                if (keypath === arg) {
                  throw MinimongoError('$rename source must differ from target', {
                    field
                  });
                }

                if (target === null) {
                  throw MinimongoError('$rename source field invalid', {
                    field
                  });
                }

                if (typeof arg !== 'string') {
                  throw MinimongoError('$rename target must be a string', {
                    field
                  });
                }

                if (arg.includes('\0')) {
                  // Null bytes are not allowed in Mongo field names
                  // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names
                  throw MinimongoError('The \'to\' field for $rename cannot contain an embedded null byte', {
                    field
                  });
                }

                if (target === undefined) {
                  return;
                }

                const object = target[field];
                delete target[field];
                const keyparts = arg.split('.');
                const target2 = findModTarget(doc, keyparts, {
                  forbidArray: true
                });

                if (target2 === null) {
                  throw MinimongoError('$rename target field invalid', {
                    field
                  });
                }

                target2[keyparts.pop()] = object;
              },

              $bit(target, field, arg) {
                // XXX mongo only supports $bit on integers, and we only support
                // native javascript numbers (doubles) so far, so we can't support $bit
                throw MinimongoError('$bit is not supported', {
                  field
                });
              },

              $v() {// As discussed in https://github.com/meteor/meteor/issues/9623,
                // the `$v` operator is not needed by Meteor, but problems can occur if
                // it's not at least callable (as of Mongo >= 3.6). It's defined here as
                // a no-op to work around these problems.
              }

            };
            const NO_CREATE_MODIFIERS = {
              $pop: true,
              $pull: true,
              $pullAll: true,
              $rename: true,
              $unset: true
            }; // Make sure field names do not contain Mongo restricted
            // characters ('.', '$', '\0').
            // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names

            const invalidCharMsg = {
              $: 'start with \'$\'',
              '.': 'contain \'.\'',
              '\0': 'contain null bytes'
            }; // checks if all field names in an object are valid

            function assertHasValidFieldNames(doc) {
              if (doc && typeof doc === 'object') {
                JSON.stringify(doc, (key, value) => {
                  assertIsValidFieldName(key);
                  return value;
                });
              }
            }

            function assertIsValidFieldName(key) {
              let match;

              if (typeof key === 'string' && (match = key.match(/^\$|\.|\0/))) {
                throw MinimongoError("Key ".concat(key, " must not ").concat(invalidCharMsg[match[0]]));
              }
            } // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],
            // and then you would operate on the 'e' property of the returned
            // object.
            //
            // if options.noCreate is falsey, creates intermediate levels of
            // structure as necessary, like mkdir -p (and raises an exception if
            // that would mean giving a non-numeric property to an array.) if
            // options.noCreate is true, return undefined instead.
            //
            // may modify the last element of keyparts to signal to the caller that it needs
            // to use a different value to index into the returned object (for example,
            // ['a', '01'] -> ['a', 1]).
            //
            // if forbidArray is true, return null if the keypath goes through an array.
            //
            // if options.arrayIndices is set, use its first element for the (first) '$' in
            // the path.


            function findModTarget(doc, keyparts) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              let usedArrayIndex = false;

              for (let i = 0; i < keyparts.length; i++) {
                const last = i === keyparts.length - 1;
                let keypart = keyparts[i];

                if (!isIndexable(doc)) {
                  if (options.noCreate) {
                    return undefined;
                  }

                  const error = MinimongoError("cannot use the part '".concat(keypart, "' to traverse ").concat(doc));
                  error.setPropertyError = true;
                  throw error;
                }

                if (doc instanceof Array) {
                  if (options.forbidArray) {
                    return null;
                  }

                  if (keypart === '$') {
                    if (usedArrayIndex) {
                      throw MinimongoError('Too many positional (i.e. \'$\') elements');
                    }

                    if (!options.arrayIndices || !options.arrayIndices.length) {
                      throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');
                    }

                    keypart = options.arrayIndices[0];
                    usedArrayIndex = true;
                  } else if (isNumericKey(keypart)) {
                    keypart = parseInt(keypart);
                  } else {
                    if (options.noCreate) {
                      return undefined;
                    }

                    throw MinimongoError("can't append to array using string field name [".concat(keypart, "]"));
                  }

                  if (last) {
                    keyparts[i] = keypart; // handle 'a.01'
                  }

                  if (options.noCreate && keypart >= doc.length) {
                    return undefined;
                  }

                  while (doc.length < keypart) {
                    doc.push(null);
                  }

                  if (!last) {
                    if (doc.length === keypart) {
                      doc.push({});
                    } else if (typeof doc[keypart] !== 'object') {
                      throw MinimongoError("can't modify field '".concat(keyparts[i + 1], "' of list value ") + JSON.stringify(doc[keypart]));
                    }
                  }
                } else {
                  assertIsValidFieldName(keypart);

                  if (!(keypart in doc)) {
                    if (options.noCreate) {
                      return undefined;
                    }

                    if (!last) {
                      doc[keypart] = {};
                    }
                  }
                }

                if (last) {
                  return doc;
                }

                doc = doc[keypart];
              } // notreached
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "matcher.js": function (_require6, _exports6, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/matcher.js                                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module5.export({
              default: () => Matcher
            });
            let LocalCollection;
            _module5.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            let compileDocumentSelector, hasOwn, nothingMatcher;
            _module5.link("./common.js", {
              compileDocumentSelector(v) {
                compileDocumentSelector = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              nothingMatcher(v) {
                nothingMatcher = v;
              }

            }, 1);

            class Matcher {
              constructor(selector, isUpdate) {
                // A set (object mapping string -> *) of all of the document paths looked
                // at by the selector. Also includes the empty string if it may look at any
                // path (eg, $where).
                this._paths = {}; // Set to true if compilation finds a $near.

                this._hasGeoQuery = false; // Set to true if compilation finds a $where.

                this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality
                // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used
                // with scalars as operands.

                this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null
                // if such document is too hard to find.

                this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user
                // passed in a function; otherwise is definitely an object (eg, IDs are
                // translated into {_id: ID} first. Used by canBecomeTrueByModifier and
                // Sorter._useWithMatcher.

                this._selector = null;
                this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation
                // Default is false
                // Used for $near array update (issue #3599)

                this._isUpdate = isUpdate;
              }

              documentMatches(doc) {
                if (doc !== Object(doc)) {
                  throw Error('documentMatches needs a document');
                }

                return this._docMatcher(doc);
              }

              hasGeoQuery() {
                return this._hasGeoQuery;
              }

              hasWhere() {
                return this._hasWhere;
              }

              isSimple() {
                return this._isSimple;
              } // Given a selector, return a function that takes one argument, a
              // document. It returns a result object.


              _compileSelector(selector) {
                // you can pass a literal function instead of a selector
                if (selector instanceof Function) {
                  this._isSimple = false;
                  this._selector = selector;

                  this._recordPathUsed('');

                  return doc => ({
                    result: !!selector.call(doc)
                  });
                } // shorthand -- scalar _id


                if (LocalCollection._selectorIsId(selector)) {
                  this._selector = {
                    _id: selector
                  };

                  this._recordPathUsed('_id');

                  return doc => ({
                    result: EJSON.equals(doc._id, selector)
                  });
                } // protect against dangerous selectors.  falsey and {_id: falsey} are both
                // likely programmer error, and not what you want, particularly for
                // destructive operations.


                if (!selector || hasOwn.call(selector, '_id') && !selector._id) {
                  this._isSimple = false;
                  return nothingMatcher;
                } // Top level can't be an array or true or binary.


                if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {
                  throw new Error("Invalid selector: ".concat(selector));
                }

                this._selector = EJSON.clone(selector);
                return compileDocumentSelector(selector, this, {
                  isRoot: true
                });
              } // Returns a list of key paths the given selector is looking for. It includes
              // the empty string if there is a $where.


              _getPaths() {
                return Object.keys(this._paths);
              }

              _recordPathUsed(path) {
                this._paths[path] = true;
              }

            }

            // helpers used by compiled selector code
            LocalCollection._f = {
              // XXX for _all and _in, consider building 'inquery' at compile time..
              _type(v) {
                if (typeof v === 'number') {
                  return 1;
                }

                if (typeof v === 'string') {
                  return 2;
                }

                if (typeof v === 'boolean') {
                  return 8;
                }

                if (Array.isArray(v)) {
                  return 4;
                }

                if (v === null) {
                  return 10;
                } // note that typeof(/x/) === "object"


                if (v instanceof RegExp) {
                  return 11;
                }

                if (typeof v === 'function') {
                  return 13;
                }

                if (v instanceof Date) {
                  return 9;
                }

                if (EJSON.isBinary(v)) {
                  return 5;
                }

                if (v instanceof MongoID.ObjectID) {
                  return 7;
                } // object


                return 3; // XXX support some/all of these:
                // 14, symbol
                // 15, javascript code with scope
                // 16, 18: 32-bit/64-bit integer
                // 17, timestamp
                // 255, minkey
                // 127, maxkey
              },

              // deep equality test: use for literal document and array matches
              _equal(a, b) {
                return EJSON.equals(a, b, {
                  keyOrderSensitive: true
                });
              },

              // maps a type code to a value that can be used to sort values of different
              // types
              _typeorder(t) {
                // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types
                // XXX what is the correct sort position for Javascript code?
                // ('100' in the matrix below)
                // XXX minkey/maxkey
                return [-1, // (not a type)
                1, // number
                2, // string
                3, // object
                4, // array
                5, // binary
                -1, // deprecated
                6, // ObjectID
                7, // bool
                8, // Date
                0, // null
                9, // RegExp
                -1, // deprecated
                100, // JS code
                2, // deprecated (symbol)
                100, // JS code
                1, // 32-bit int
                8, // Mongo timestamp
                1 // 64-bit int
                ][t];
              },

              // compare two values of unknown type according to BSON ordering
              // semantics. (as an extension, consider 'undefined' to be less than
              // any other value.) return negative if a is less, positive if b is
              // less, or 0 if equal
              _cmp(a, b) {
                if (a === undefined) {
                  return b === undefined ? 0 : -1;
                }

                if (b === undefined) {
                  return 1;
                }

                let ta = LocalCollection._f._type(a);

                let tb = LocalCollection._f._type(b);

                const oa = LocalCollection._f._typeorder(ta);

                const ob = LocalCollection._f._typeorder(tb);

                if (oa !== ob) {
                  return oa < ob ? -1 : 1;
                } // XXX need to implement this if we implement Symbol or integers, or
                // Timestamp


                if (ta !== tb) {
                  throw Error('Missing type coercion logic in _cmp');
                }

                if (ta === 7) {
                  // ObjectID
                  // Convert to string.
                  ta = tb = 2;
                  a = a.toHexString();
                  b = b.toHexString();
                }

                if (ta === 9) {
                  // Date
                  // Convert to millis.
                  ta = tb = 1;
                  a = a.getTime();
                  b = b.getTime();
                }

                if (ta === 1) // double
                  return a - b;
                if (tb === 2) // string
                  return a < b ? -1 : a === b ? 0 : 1;

                if (ta === 3) {
                  // Object
                  // this could be much more efficient in the expected case ...
                  const toArray = object => {
                    const result = [];
                    Object.keys(object).forEach(key => {
                      result.push(key, object[key]);
                    });
                    return result;
                  };

                  return LocalCollection._f._cmp(toArray(a), toArray(b));
                }

                if (ta === 4) {
                  // Array
                  for (let i = 0;; i++) {
                    if (i === a.length) {
                      return i === b.length ? 0 : -1;
                    }

                    if (i === b.length) {
                      return 1;
                    }

                    const s = LocalCollection._f._cmp(a[i], b[i]);

                    if (s !== 0) {
                      return s;
                    }
                  }
                }

                if (ta === 5) {
                  // binary
                  // Surprisingly, a small binary blob is always less than a large one in
                  // Mongo.
                  if (a.length !== b.length) {
                    return a.length - b.length;
                  }

                  for (let i = 0; i < a.length; i++) {
                    if (a[i] < b[i]) {
                      return -1;
                    }

                    if (a[i] > b[i]) {
                      return 1;
                    }
                  }

                  return 0;
                }

                if (ta === 8) {
                  // boolean
                  if (a) {
                    return b ? 0 : 1;
                  }

                  return b ? -1 : 0;
                }

                if (ta === 10) // null
                  return 0;
                if (ta === 11) // regexp
                  throw Error('Sorting not supported on regular expression'); // XXX
                // 13: javascript code
                // 14: symbol
                // 15: javascript code with scope
                // 16: 32-bit integer
                // 17: timestamp
                // 18: 64-bit integer
                // 255: minkey
                // 127: maxkey

                if (ta === 13) // javascript code
                  throw Error('Sorting not supported on Javascript code'); // XXX

                throw Error('Unknown type to sort');
              }

            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "minimongo_common.js": function (_require7, _exports7, _module6) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_common.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let LocalCollection_;
            _module6.link("./local_collection.js", {
              default(v) {
                LocalCollection_ = v;
              }

            }, 0);
            let Matcher;
            _module6.link("./matcher.js", {
              default(v) {
                Matcher = v;
              }

            }, 1);
            let Sorter;
            _module6.link("./sorter.js", {
              default(v) {
                Sorter = v;
              }

            }, 2);
            LocalCollection = LocalCollection_;
            Minimongo = {
              LocalCollection: LocalCollection_,
              Matcher,
              Sorter
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "observe_handle.js": function (_require8, _exports8, _module7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/observe_handle.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module7.export({
              default: () => ObserveHandle
            });

            class ObserveHandle {}
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sorter.js": function (_require9, _exports9, _module8) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/sorter.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module8.export({
              default: () => Sorter
            });
            let ELEMENT_OPERATORS, equalityElementMatcher, expandArraysInBranches, hasOwn, isOperatorObject, makeLookupFunction, regexpElementMatcher;
            _module8.link("./common.js", {
              ELEMENT_OPERATORS(v) {
                ELEMENT_OPERATORS = v;
              },

              equalityElementMatcher(v) {
                equalityElementMatcher = v;
              },

              expandArraysInBranches(v) {
                expandArraysInBranches = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              isOperatorObject(v) {
                isOperatorObject = v;
              },

              makeLookupFunction(v) {
                makeLookupFunction = v;
              },

              regexpElementMatcher(v) {
                regexpElementMatcher = v;
              }

            }, 0);

            class Sorter {
              constructor(spec) {
                this._sortSpecParts = [];
                this._sortFunction = null;

                const addSpecPart = (path, ascending) => {
                  if (!path) {
                    throw Error('sort keys must be non-empty');
                  }

                  if (path.charAt(0) === '$') {
                    throw Error("unsupported sort key: ".concat(path));
                  }

                  this._sortSpecParts.push({
                    ascending,
                    lookup: makeLookupFunction(path, {
                      forSort: true
                    }),
                    path
                  });
                };

                if (spec instanceof Array) {
                  spec.forEach(element => {
                    if (typeof element === 'string') {
                      addSpecPart(element, true);
                    } else {
                      addSpecPart(element[0], element[1] !== 'desc');
                    }
                  });
                } else if (typeof spec === 'object') {
                  Object.keys(spec).forEach(key => {
                    addSpecPart(key, spec[key] >= 0);
                  });
                } else if (typeof spec === 'function') {
                  this._sortFunction = spec;
                } else {
                  throw Error("Bad sort specification: ".concat(JSON.stringify(spec)));
                } // If a function is specified for sorting, we skip the rest.


                if (this._sortFunction) {
                  return;
                } // To implement affectedByModifier, we piggy-back on top of Matcher's
                // affectedByModifier code; we create a selector that is affected by the
                // same modifiers as this sort order. This is only implemented on the
                // server.


                if (this.affectedByModifier) {
                  const selector = {};

                  this._sortSpecParts.forEach(spec => {
                    selector[spec.path] = 1;
                  });

                  this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);
                }

                this._keyComparator = composeComparators(this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i)));
              }

              getComparator(options) {
                // If sort is specified or have no distances, just use the comparator from
                // the source specification (which defaults to "everything is equal".
                // issue #3599
                // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation
                // sort effectively overrides $near
                if (this._sortSpecParts.length || !options || !options.distances) {
                  return this._getBaseComparator();
                }

                const distances = options.distances; // Return a comparator which compares using $near distances.

                return (a, b) => {
                  if (!distances.has(a._id)) {
                    throw Error("Missing distance for ".concat(a._id));
                  }

                  if (!distances.has(b._id)) {
                    throw Error("Missing distance for ".concat(b._id));
                  }

                  return distances.get(a._id) - distances.get(b._id);
                };
              } // Takes in two keys: arrays whose lengths match the number of spec
              // parts. Returns negative, 0, or positive based on using the sort spec to
              // compare fields.


              _compareKeys(key1, key2) {
                if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {
                  throw Error('Key has wrong length');
                }

                return this._keyComparator(key1, key2);
              } // Iterates over each possible "key" from doc (ie, over each branch), calling
              // 'cb' with the key.


              _generateKeysFromDoc(doc, cb) {
                if (this._sortSpecParts.length === 0) {
                  throw new Error('can\'t generate keys without a spec');
                }

                const pathFromIndices = indices => "".concat(indices.join(','), ",");

                let knownPaths = null; // maps index -> ({'' -> value} or {path -> value})

                const valuesByIndexAndPath = this._sortSpecParts.map(spec => {
                  // Expand any leaf arrays that we find, and ignore those arrays
                  // themselves.  (We never sort based on an array itself.)
                  let branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),
                  // pretend we found one undefined value.

                  if (!branches.length) {
                    branches = [{
                      value: void 0
                    }];
                  }

                  const element = Object.create(null);
                  let usedPaths = false;
                  branches.forEach(branch => {
                    if (!branch.arrayIndices) {
                      // If there are no array indices for a branch, then it must be the
                      // only branch, because the only thing that produces multiple branches
                      // is the use of arrays.
                      if (branches.length > 1) {
                        throw Error('multiple branches but no array used?');
                      }

                      element[''] = branch.value;
                      return;
                    }

                    usedPaths = true;
                    const path = pathFromIndices(branch.arrayIndices);

                    if (hasOwn.call(element, path)) {
                      throw Error("duplicate path: ".concat(path));
                    }

                    element[path] = branch.value; // If two sort fields both go into arrays, they have to go into the
                    // exact same arrays and we have to find the same paths.  This is
                    // roughly the same condition that makes MongoDB throw this strange
                    // error message.  eg, the main thing is that if sort spec is {a: 1,
                    // b:1} then a and b cannot both be arrays.
                    //
                    // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'
                    // and 'a.x.y' are both arrays, but we don't allow this for now.
                    // #NestedArraySort
                    // XXX achieve full compatibility here

                    if (knownPaths && !hasOwn.call(knownPaths, path)) {
                      throw Error('cannot index parallel arrays');
                    }
                  });

                  if (knownPaths) {
                    // Similarly to above, paths must match everywhere, unless this is a
                    // non-array field.
                    if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {
                      throw Error('cannot index parallel arrays!');
                    }
                  } else if (usedPaths) {
                    knownPaths = {};
                    Object.keys(element).forEach(path => {
                      knownPaths[path] = true;
                    });
                  }

                  return element;
                });

                if (!knownPaths) {
                  // Easy case: no use of arrays.
                  const soleKey = valuesByIndexAndPath.map(values => {
                    if (!hasOwn.call(values, '')) {
                      throw Error('no value in sole key case?');
                    }

                    return values[''];
                  });
                  cb(soleKey);
                  return;
                }

                Object.keys(knownPaths).forEach(path => {
                  const key = valuesByIndexAndPath.map(values => {
                    if (hasOwn.call(values, '')) {
                      return values[''];
                    }

                    if (!hasOwn.call(values, path)) {
                      throw Error('missing path?');
                    }

                    return values[path];
                  });
                  cb(key);
                });
              } // Returns a comparator that represents the sort specification (but not
              // including a possible geoquery distance tie-breaker).


              _getBaseComparator() {
                if (this._sortFunction) {
                  return this._sortFunction;
                } // If we're only sorting on geoquery distance and no specs, just say
                // everything is equal.


                if (!this._sortSpecParts.length) {
                  return (doc1, doc2) => 0;
                }

                return (doc1, doc2) => {
                  const key1 = this._getMinKeyFromDoc(doc1);

                  const key2 = this._getMinKeyFromDoc(doc2);

                  return this._compareKeys(key1, key2);
                };
              } // Finds the minimum key from the doc, according to the sort specs.  (We say
              // "minimum" here but this is with respect to the sort spec, so "descending"
              // sort fields mean we're finding the max for that field.)
              //
              // Note that this is NOT "find the minimum value of the first field, the
              // minimum value of the second field, etc"... it's "choose the
              // lexicographically minimum value of the key vector, allowing only keys which
              // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:
              // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and
              // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.


              _getMinKeyFromDoc(doc) {
                let minKey = null;

                this._generateKeysFromDoc(doc, key => {
                  if (minKey === null) {
                    minKey = key;
                    return;
                  }

                  if (this._compareKeys(key, minKey) < 0) {
                    minKey = key;
                  }
                });

                return minKey;
              }

              _getPaths() {
                return this._sortSpecParts.map(part => part.path);
              } // Given an index 'i', returns a comparator that compares two key arrays based
              // on field 'i'.


              _keyFieldComparator(i) {
                const invert = !this._sortSpecParts[i].ascending;
                return (key1, key2) => {
                  const compare = LocalCollection._f._cmp(key1[i], key2[i]);

                  return invert ? -compare : compare;
                };
              }

            }

            // Given an array of comparators
            // (functions (a,b)->(negative or positive or zero)), returns a single
            // comparator which uses each comparator in order and returns the first
            // non-zero value.
            function composeComparators(comparatorArray) {
              return (a, b) => {
                for (let i = 0; i < comparatorArray.length; ++i) {
                  const compare = comparatorArray[i](a, b);

                  if (compare !== 0) {
                    return compare;
                  }
                }

                return 0;
              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/minimongo/minimongo_client.js");

  /* Exports */
  Package._define("minimongo", _exports3, {
    LocalCollection: LocalCollection,
    Minimongo: Minimongo,
    MinimongoTest: MinimongoTest,
    MinimongoError: MinimongoError
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var check, Match;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "check": { "match.js": function (_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/check/match.js                                                                                       //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              check: () => check,
              Match: () => Match
            });
            let isPlainObject;
            _module.link("./isPlainObject", {
              isPlainObject(v) {
                isPlainObject = v;
              }

            }, 0);
            // Things we explicitly do NOT support:
            //    - heterogenous arrays
            const currentArgumentChecker = new Meteor.EnvironmentVariable();
            const hasOwn = Object.prototype.hasOwnProperty;
            /**
             * @summary Check that a value matches a [pattern](#matchpatterns).
             * If the value does not match the pattern, throw a `Match.Error`.
             *
             * Particularly useful to assert that arguments to a function have the right
             * types and structure.
             * @locus Anywhere
             * @param {Any} value The value to check
             * @param {MatchPattern} pattern The pattern to match `value` against
             */

            function check(value, pattern) {
              // Record that check got called, if somebody cared.
              //
              // We use getOrNullIfOutsideFiber so that it's OK to call check()
              // from non-Fiber server contexts; the downside is that if you forget to
              // bindEnvironment on some random callback in your method/publisher,
              // it might not find the argumentChecker and you'll get an error about
              // not checking an argument that it looks like you're checking (instead
              // of just getting a "Node code must run in a Fiber" error).
              const argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();

              if (argChecker) {
                argChecker.checking(value);
              }

              const result = testSubtree(value, pattern);

              if (result) {
                const err = new Match.Error(result.message);

                if (result.path) {
                  err.message += " in field ".concat(result.path);
                  err.path = result.path;
                }

                throw err;
              }
            }

            ;
            /**
             * @namespace Match
             * @summary The namespace for all Match types and methods.
             */

            const Match = {
              Optional: function (pattern) {
                return new Optional(pattern);
              },
              Maybe: function (pattern) {
                return new Maybe(pattern);
              },
              OneOf: function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return new OneOf(args);
              },
              Any: ['__any__'],
              Where: function (condition) {
                return new Where(condition);
              },
              ObjectIncluding: function (pattern) {
                return new ObjectIncluding(pattern);
              },
              ObjectWithValues: function (pattern) {
                return new ObjectWithValues(pattern);
              },
              // Matches only signed 32-bit integers
              Integer: ['__integer__'],
              // XXX matchers should know how to describe themselves for errors
              Error: Meteor.makeErrorType('Match.Error', function (msg) {
                this.message = "Match error: ".concat(msg); // The path of the value that failed to match. Initially empty, this gets
                // populated by catching and rethrowing the exception as it goes back up the
                // stack.
                // E.g.: "vals[3].entity.created"

                this.path = ''; // If this gets sent over DDP, don't give full internal details but at least
                // provide something better than 500 Internal server error.

                this.sanitizedError = new Meteor.Error(400, 'Match failed');
              }),

              // Tests to see if value matches pattern. Unlike check, it merely returns true
              // or false (unless an error other than Match.Error was thrown). It does not
              // interact with _failIfArgumentsAreNotAllChecked.
              // XXX maybe also implement a Match.match which returns more information about
              //     failures but without using exception handling or doing what check()
              //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion

              /**
               * @summary Returns true if the value matches the pattern.
               * @locus Anywhere
               * @param {Any} value The value to check
               * @param {MatchPattern} pattern The pattern to match `value` against
               */
              test(value, pattern) {
                return !testSubtree(value, pattern);
              },

              // Runs `f.apply(context, args)`. If check() is not called on every element of
              // `args` (either directly or in the first level of an array), throws an error
              // (using `description` in the message).
              _failIfArgumentsAreNotAllChecked(f, context, args, description) {
                const argChecker = new ArgumentChecker(args, description);
                const result = currentArgumentChecker.withValue(argChecker, () => f.apply(context, args)); // If f didn't itself throw, make sure it checked all of its arguments.

                argChecker.throwUnlessAllArgumentsHaveBeenChecked();
                return result;
              }

            };

            class Optional {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class Maybe {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class OneOf {
              constructor(choices) {
                if (!choices || choices.length === 0) {
                  throw new Error('Must provide at least one choice to Match.OneOf');
                }

                this.choices = choices;
              }

            }

            class Where {
              constructor(condition) {
                this.condition = condition;
              }

            }

            class ObjectIncluding {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class ObjectWithValues {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            const stringForErrorMessage = function (value) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (value === null) {
                return 'null';
              }

              if (options.onlyShowType) {
                return typeof value;
              } // Your average non-object things.  Saves from doing the try/catch below for.


              if (typeof value !== 'object') {
                return EJSON.stringify(value);
              }

              try {
                // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)
                // If the native stringify is going to choke, EJSON.stringify is going to choke too.
                JSON.stringify(value);
              } catch (stringifyError) {
                if (stringifyError.name === 'TypeError') {
                  return typeof value;
                }
              }

              return EJSON.stringify(value);
            };

            const typeofChecks = [[String, 'string'], [Number, 'number'], [Boolean, 'boolean'], // While we don't allow undefined/function in EJSON, this is good for optional
            // arguments with OneOf.
            [Function, 'function'], [undefined, 'undefined']]; // Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.

            const testSubtree = (value, pattern) => {
              // Match anything!
              if (pattern === Match.Any) {
                return false;
              } // Basic atomic types.
              // Do not match boxed objects (e.g. String, Boolean)


              for (let i = 0; i < typeofChecks.length; ++i) {
                if (pattern === typeofChecks[i][0]) {
                  if (typeof value === typeofChecks[i][1]) {
                    return false;
                  }

                  return {
                    message: "Expected ".concat(typeofChecks[i][1], ", got ").concat(stringForErrorMessage(value, {
                      onlyShowType: true
                    })),
                    path: ''
                  };
                }
              }

              if (pattern === null) {
                if (value === null) {
                  return false;
                }

                return {
                  message: "Expected null, got ".concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.


              if (typeof pattern === 'string' || typeof pattern === 'number' || typeof pattern === 'boolean') {
                if (value === pattern) {
                  return false;
                }

                return {
                  message: "Expected ".concat(pattern, ", got ").concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // Match.Integer is special type encoded with array


              if (pattern === Match.Integer) {
                // There is no consistent and reliable way to check if variable is a 64-bit
                // integer. One of the popular solutions is to get reminder of division by 1
                // but this method fails on really large floats with big precision.
                // E.g.: 1.348192308491824e+23 % 1 === 0 in V8
                // Bitwise operators work consistantly but always cast variable to 32-bit
                // signed integer according to JavaScript specs.
                if (typeof value === 'number' && (value | 0) === value) {
                  return false;
                }

                return {
                  message: "Expected Integer, got ".concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // 'Object' is shorthand for Match.ObjectIncluding({});


              if (pattern === Object) {
                pattern = Match.ObjectIncluding({});
              } // Array (checked AFTER Any, which is implemented as an Array).


              if (pattern instanceof Array) {
                if (pattern.length !== 1) {
                  return {
                    message: "Bad pattern: arrays must have one type element ".concat(stringForErrorMessage(pattern)),
                    path: ''
                  };
                }

                if (!Array.isArray(value) && !isArguments(value)) {
                  return {
                    message: "Expected array, got ".concat(stringForErrorMessage(value)),
                    path: ''
                  };
                }

                for (let i = 0, length = value.length; i < length; i++) {
                  const result = testSubtree(value[i], pattern[0]);

                  if (result) {
                    result.path = _prependPath(i, result.path);
                    return result;
                  }
                }

                return false;
              } // Arbitrary validation checks. The condition can return false or throw a
              // Match.Error (ie, it can internally use check()) to fail.


              if (pattern instanceof Where) {
                let result;

                try {
                  result = pattern.condition(value);
                } catch (err) {
                  if (!(err instanceof Match.Error)) {
                    throw err;
                  }

                  return {
                    message: err.message,
                    path: err.path
                  };
                }

                if (result) {
                  return false;
                } // XXX this error is terrible


                return {
                  message: 'Failed Match.Where validation',
                  path: ''
                };
              }

              if (pattern instanceof Maybe) {
                pattern = Match.OneOf(undefined, null, pattern.pattern);
              } else if (pattern instanceof Optional) {
                pattern = Match.OneOf(undefined, pattern.pattern);
              }

              if (pattern instanceof OneOf) {
                for (let i = 0; i < pattern.choices.length; ++i) {
                  const result = testSubtree(value, pattern.choices[i]);

                  if (!result) {
                    // No error? Yay, return.
                    return false;
                  } // Match errors just mean try another choice.
                } // XXX this error is terrible


                return {
                  message: 'Failed Match.OneOf, Match.Maybe or Match.Optional validation',
                  path: ''
                };
              } // A function that isn't something we special-case is assumed to be a
              // constructor.


              if (pattern instanceof Function) {
                if (value instanceof pattern) {
                  return false;
                }

                return {
                  message: "Expected ".concat(pattern.name || 'particular constructor'),
                  path: ''
                };
              }

              let unknownKeysAllowed = false;
              let unknownKeyPattern;

              if (pattern instanceof ObjectIncluding) {
                unknownKeysAllowed = true;
                pattern = pattern.pattern;
              }

              if (pattern instanceof ObjectWithValues) {
                unknownKeysAllowed = true;
                unknownKeyPattern = [pattern.pattern];
                pattern = {}; // no required keys
              }

              if (typeof pattern !== 'object') {
                return {
                  message: 'Bad pattern: unknown pattern type',
                  path: ''
                };
              } // An object, with required and optional keys. Note that this does NOT do
              // structural matches against objects of special types that happen to match
              // the pattern: this really needs to be a plain old {Object}!


              if (typeof value !== 'object') {
                return {
                  message: "Expected object, got ".concat(typeof value),
                  path: ''
                };
              }

              if (value === null) {
                return {
                  message: "Expected object, got null",
                  path: ''
                };
              }

              if (!isPlainObject(value)) {
                return {
                  message: "Expected plain object",
                  path: ''
                };
              }

              const requiredPatterns = Object.create(null);
              const optionalPatterns = Object.create(null);
              Object.keys(pattern).forEach(key => {
                const subPattern = pattern[key];

                if (subPattern instanceof Optional || subPattern instanceof Maybe) {
                  optionalPatterns[key] = subPattern.pattern;
                } else {
                  requiredPatterns[key] = subPattern;
                }
              });

              for (let key in Object(value)) {
                const subValue = value[key];

                if (hasOwn.call(requiredPatterns, key)) {
                  const result = testSubtree(subValue, requiredPatterns[key]);

                  if (result) {
                    result.path = _prependPath(key, result.path);
                    return result;
                  }

                  delete requiredPatterns[key];
                } else if (hasOwn.call(optionalPatterns, key)) {
                  const result = testSubtree(subValue, optionalPatterns[key]);

                  if (result) {
                    result.path = _prependPath(key, result.path);
                    return result;
                  }
                } else {
                  if (!unknownKeysAllowed) {
                    return {
                      message: 'Unknown key',
                      path: key
                    };
                  }

                  if (unknownKeyPattern) {
                    const result = testSubtree(subValue, unknownKeyPattern[0]);

                    if (result) {
                      result.path = _prependPath(key, result.path);
                      return result;
                    }
                  }
                }
              }

              const keys = Object.keys(requiredPatterns);

              if (keys.length) {
                return {
                  message: "Missing key '".concat(keys[0], "'"),
                  path: ''
                };
              }
            };

            class ArgumentChecker {
              constructor(args, description) {
                // Make a SHALLOW copy of the arguments. (We'll be doing identity checks
                // against its contents.)
                this.args = [...args]; // Since the common case will be to check arguments in order, and we splice
                // out arguments when we check them, make it so we splice out from the end
                // rather than the beginning.

                this.args.reverse();
                this.description = description;
              }

              checking(value) {
                if (this._checkingOneValue(value)) {
                  return;
                } // Allow check(arguments, [String]) or check(arguments.slice(1), [String])
                // or check([foo, bar], [String]) to count... but only if value wasn't
                // itself an argument.


                if (Array.isArray(value) || isArguments(value)) {
                  Array.prototype.forEach.call(value, this._checkingOneValue.bind(this));
                }
              }

              _checkingOneValue(value) {
                for (let i = 0; i < this.args.length; ++i) {
                  // Is this value one of the arguments? (This can have a false positive if
                  // the argument is an interned primitive, but it's still a good enough
                  // check.)
                  // (NaN is not === to itself, so we have to check specially.)
                  if (value === this.args[i] || Number.isNaN(value) && Number.isNaN(this.args[i])) {
                    this.args.splice(i, 1);
                    return true;
                  }
                }

                return false;
              }

              throwUnlessAllArgumentsHaveBeenChecked() {
                if (this.args.length > 0) throw new Error("Did not check() all arguments during ".concat(this.description));
              }

            }

            const _jsKeywords = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'false', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof']; // Assumes the base of path is already escaped properly
            // returns key + base

            const _prependPath = (key, base) => {
              if (typeof key === 'number' || key.match(/^[0-9]+$/)) {
                key = "[".concat(key, "]");
              } else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _jsKeywords.indexOf(key) >= 0) {
                key = JSON.stringify([key]);
              }

              if (base && base[0] !== '[') {
                return "".concat(key, ".").concat(base);
              }

              return key + base;
            };

            const isObject = value => typeof value === 'object' && value !== null;

            const baseIsArguments = item => isObject(item) && Object.prototype.toString.call(item) === '[object Arguments]';

            const isArguments = baseIsArguments(function () {
              return arguments;
            }()) ? baseIsArguments : value => isObject(value) && typeof value.callee === 'function';
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "isPlainObject.js": function (_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/check/isPlainObject.js                                                                               //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              isPlainObject: () => isPlainObject
            });
            // Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.
            const class2type = {};
            const toString = class2type.toString;
            const hasOwn = Object.prototype.hasOwnProperty;
            const fnToString = hasOwn.toString;
            const ObjectFunctionString = fnToString.call(Object);
            const getProto = Object.getPrototypeOf;

            const isPlainObject = obj => {
              let proto;
              let Ctor; // Detect obvious negatives
              // Use toString instead of jQuery.type to catch host objects

              if (!obj || toString.call(obj) !== '[object Object]') {
                return false;
              }

              proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

              if (!proto) {
                return true;
              } // Objects with prototype are plain iff they were constructed by a global Object function


              Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
              return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/check/match.js");

  /* Exports */
  Package._define("check", _exports2, {
    check: check,
    Match: Match
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Retry;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "retry": { "retry.js": function (_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////
            //                                                                              //
            // packages/retry/retry.js                                                      //
            //                                                                              //
            //////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Retry: () => Retry
            });

            class Retry {
              constructor() {
                let {
                  baseTimeout = 1000,
                  exponent = 2.2,
                  // The default is high-ish to ensure a server can recover from a
                  // failure caused by load.
                  maxTimeout = 5 * 60 * 1000,
                  minTimeout = 10,
                  minCount = 2,
                  fuzz = 0.5
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                this.baseTimeout = baseTimeout;
                this.exponent = exponent;
                this.maxTimeout = maxTimeout;
                this.minTimeout = minTimeout;
                this.minCount = minCount;
                this.fuzz = fuzz;
                this.retryTimer = null;
              } // Reset a pending retry, if any.


              clear() {
                if (this.retryTimer) {
                  clearTimeout(this.retryTimer);
                }

                this.retryTimer = null;
              } // Calculate how long to wait in milliseconds to retry, based on the
              // `count` of which retry this is.


              _timeout(count) {
                if (count < this.minCount) {
                  return this.minTimeout;
                } // fuzz the timeout randomly, to avoid reconnect storms when a
                // server goes down.


                var timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count)) * (Random.fraction() * this.fuzz + (1 - this.fuzz / 2));
                return timeout;
              } // Call `fn` after a delay, based on the `count` of which retry this is.


              retryLater(count, fn) {
                var timeout = this._timeout(count);

                if (this.retryTimer) clearTimeout(this.retryTimer);
                this.retryTimer = Meteor.setTimeout(fn, timeout);
                return timeout;
              }

            }
            //////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/retry/retry.js");

  /* Exports */
  Package._define("retry", _exports2, {
    Retry: Retry
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, Hook;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "callback-hook": { "hook.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                 //
            // packages/callback-hook/hook.js                                                                  //
            //                                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Hook: () => Hook
            });
            // XXX This pattern is under development. Do not add more callsites
            // using this package for now. See:
            // https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f
            //
            // Encapsulates the pattern of registering callbacks on a hook.
            //
            // The `each` method of the hook calls its iterator function argument
            // with each registered callback.  This allows the hook to
            // conditionally decide not to call the callback (if, for example, the
            // observed object has been closed or terminated).
            //
            // By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be
            // called with the Meteor environment of the calling code that
            // registered the callback. Override by passing { bindEnvironment: false }
            // to the constructor.
            //
            // Registering a callback returns an object with a single `stop`
            // method which unregisters the callback.
            //
            // The code is careful to allow a callback to be safely unregistered
            // while the callbacks are being iterated over.
            //
            // If the hook is configured with the `exceptionHandler` option, the
            // handler will be called if a called callback throws an exception.
            // By default (if the exception handler doesn't itself throw an
            // exception, or if the iterator function doesn't return a falsy value
            // to terminate the calling of callbacks), the remaining callbacks
            // will still be called.
            //
            // Alternatively, the `debugPrintExceptions` option can be specified
            // as string describing the callback.  On an exception the string and
            // the exception will be printed to the console log with
            // `Meteor._debug`, and the exception otherwise ignored.
            //
            // If an exception handler isn't specified, exceptions thrown in the
            // callback will propagate up to the iterator function, and will
            // terminate calling the remaining callbacks if not caught.
            const hasOwn = Object.prototype.hasOwnProperty;

            class Hook {
              constructor(options) {
                options = options || {};
                this.nextCallbackId = 0;
                this.callbacks = Object.create(null); // Whether to wrap callbacks with Meteor.bindEnvironment

                this.bindEnvironment = true;

                if (options.bindEnvironment === false) {
                  this.bindEnvironment = false;
                }

                if (options.exceptionHandler) {
                  this.exceptionHandler = options.exceptionHandler;
                } else if (options.debugPrintExceptions) {
                  if (typeof options.debugPrintExceptions !== "string") {
                    throw new Error("Hook option debugPrintExceptions should be a string");
                  }

                  this.exceptionHandler = options.debugPrintExceptions;
                }
              }

              register(callback) {
                var exceptionHandler = this.exceptionHandler || function (exception) {
                  // Note: this relies on the undocumented fact that if bindEnvironment's
                  // onException throws, and you are invoking the callback either in the
                  // browser or from within a Fiber in Node, the exception is propagated.
                  throw exception;
                };

                if (this.bindEnvironment) {
                  callback = Meteor.bindEnvironment(callback, exceptionHandler);
                } else {
                  callback = dontBindEnvironment(callback, exceptionHandler);
                }

                var id = this.nextCallbackId++;
                this.callbacks[id] = callback;
                return {
                  stop: () => {
                    delete this.callbacks[id];
                  }
                };
              } // For each registered callback, call the passed iterator function
              // with the callback.
              //
              // The iterator function can choose whether or not to call the
              // callback.  (For example, it might not call the callback if the
              // observed object has been closed or terminated).
              //
              // The iteration is stopped if the iterator function returns a falsy
              // value or throws an exception.
              //


              each(iterator) {
                // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't
                // run them to completion (and exceptions thrown from onException are not
                // propagated), so we need to be in a Fiber.
                Meteor._nodeCodeMustBeInFiber();

                var ids = Object.keys(this.callbacks);

                for (var i = 0; i < ids.length; ++i) {
                  var id = ids[i]; // check to see if the callback was removed during iteration

                  if (hasOwn.call(this.callbacks, id)) {
                    var callback = this.callbacks[id];

                    if (!iterator(callback)) {
                      break;
                    }
                  }
                }
              }

            }

            // Copied from Meteor.bindEnvironment and removed all the env stuff.
            function dontBindEnvironment(func, onException, _this) {
              if (!onException || typeof onException === 'string') {
                var description = onException || "callback of async function";

                onException = function (error) {
                  Meteor._debug("Exception in " + description + ":", error && error.stack || error);
                };
              }

              return function () {
                try {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  var ret = func.apply(_this, args);
                } catch (e) {
                  onException(e);
                }

                return ret;
              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/callback-hook/hook.js");

  /* Exports */
  Package._define("callback-hook", _exports2, {
    Hook: Hook
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var DDPCommon;

  var _require = meteorInstall({ "node_modules": { "meteor": { "ddp-common": { "namespace.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/namespace.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /**
             * @namespace DDPCommon
             * @summary Namespace for DDPCommon-related methods/classes. Shared between 
             * `ddp-client` and `ddp-server`, where the ddp-client is the implementation
             * of a ddp client for both client AND server; and the ddp server is the
             * implementation of the livedata server and stream server. Common 
             * functionality shared between both can be shared under this namespace
             */
            DDPCommon = {};
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "heartbeat.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/heartbeat.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Heartbeat options:
            //   heartbeatInterval: interval to send pings, in milliseconds.
            //   heartbeatTimeout: timeout to close the connection if a reply isn't
            //     received, in milliseconds.
            //   sendPing: function to call to send a ping on the connection.
            //   onTimeout: function to call to close the connection.
            DDPCommon.Heartbeat = class Heartbeat {
              constructor(options) {
                this.heartbeatInterval = options.heartbeatInterval;
                this.heartbeatTimeout = options.heartbeatTimeout;
                this._sendPing = options.sendPing;
                this._onTimeout = options.onTimeout;
                this._seenPacket = false;
                this._heartbeatIntervalHandle = null;
                this._heartbeatTimeoutHandle = null;
              }

              stop() {
                this._clearHeartbeatIntervalTimer();

                this._clearHeartbeatTimeoutTimer();
              }

              start() {
                this.stop();

                this._startHeartbeatIntervalTimer();
              }

              _startHeartbeatIntervalTimer() {
                this._heartbeatIntervalHandle = Meteor.setInterval(() => this._heartbeatIntervalFired(), this.heartbeatInterval);
              }

              _startHeartbeatTimeoutTimer() {
                this._heartbeatTimeoutHandle = Meteor.setTimeout(() => this._heartbeatTimeoutFired(), this.heartbeatTimeout);
              }

              _clearHeartbeatIntervalTimer() {
                if (this._heartbeatIntervalHandle) {
                  Meteor.clearInterval(this._heartbeatIntervalHandle);
                  this._heartbeatIntervalHandle = null;
                }
              }

              _clearHeartbeatTimeoutTimer() {
                if (this._heartbeatTimeoutHandle) {
                  Meteor.clearTimeout(this._heartbeatTimeoutHandle);
                  this._heartbeatTimeoutHandle = null;
                }
              } // The heartbeat interval timer is fired when we should send a ping.


              _heartbeatIntervalFired() {
                // don't send ping if we've seen a packet since we last checked,
                // *or* if we have already sent a ping and are awaiting a timeout.
                // That shouldn't happen, but it's possible if
                // `this.heartbeatInterval` is smaller than
                // `this.heartbeatTimeout`.
                if (!this._seenPacket && !this._heartbeatTimeoutHandle) {
                  this._sendPing(); // Set up timeout, in case a pong doesn't arrive in time.


                  this._startHeartbeatTimeoutTimer();
                }

                this._seenPacket = false;
              } // The heartbeat timeout timer is fired when we sent a ping, but we
              // timed out waiting for the pong.


              _heartbeatTimeoutFired() {
                this._heartbeatTimeoutHandle = null;

                this._onTimeout();
              }

              messageReceived() {
                // Tell periodic checkin that we have seen a packet, and thus it
                // does not need to send a ping this cycle.
                this._seenPacket = true; // If we were waiting for a pong, we got it.

                if (this._heartbeatTimeoutHandle) {
                  this._clearHeartbeatTimeoutTimer();
                }
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "utils.js": function (_require2, _exports, _module) {

            _module.export({
              hasOwn: () => hasOwn,
              slice: () => slice,
              keys: () => keys,
              isEmpty: () => isEmpty,
              last: () => last
            });
            const hasOwn = Object.prototype.hasOwnProperty;
            const slice = Array.prototype.slice;

            function keys(obj) {
              return Object.keys(Object(obj));
            }

            function isEmpty(obj) {
              if (obj == null) {
                return true;
              }

              if (Array.isArray(obj) || typeof obj === "string") {
                return obj.length === 0;
              }

              for (const key in obj) {
                if (hasOwn.call(obj, key)) {
                  return false;
                }
              }

              return true;
            }

            function last(array, n, guard) {
              if (array == null) {
                return;
              }

              if (n == null || guard) {
                return array[array.length - 1];
              }

              return slice.call(array, Math.max(array.length - n, 0));
            }

            DDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1'];

            DDPCommon.parseDDP = function (stringMessage) {
              try {
                var msg = JSON.parse(stringMessage);
              } catch (e) {
                Meteor._debug("Discarding message with invalid JSON", stringMessage);

                return null;
              } // DDP messages must be objects.


              if (msg === null || typeof msg !== 'object') {
                Meteor._debug("Discarding non-object DDP message", stringMessage);

                return null;
              } // massage msg to get it into "abstract ddp" rather than "wire ddp" format.
              // switch between "cleared" rep of unsetting fields and "undefined"
              // rep of same


              if (hasOwn.call(msg, 'cleared')) {
                if (!hasOwn.call(msg, 'fields')) {
                  msg.fields = {};
                }

                msg.cleared.forEach(clearKey => {
                  msg.fields[clearKey] = undefined;
                });
                delete msg.cleared;
              }

              ['fields', 'params', 'result'].forEach(field => {
                if (hasOwn.call(msg, field)) {
                  msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);
                }
              });
              return msg;
            };

            DDPCommon.stringifyDDP = function (msg) {
              const copy = EJSON.clone(msg); // swizzle 'changed' messages from 'fields undefined' rep to 'fields
              // and cleared' rep

              if (hasOwn.call(msg, 'fields')) {
                const cleared = [];
                Object.keys(msg.fields).forEach(key => {
                  const value = msg.fields[key];

                  if (typeof value === "undefined") {
                    cleared.push(key);
                    delete copy.fields[key];
                  }
                });

                if (!isEmpty(cleared)) {
                  copy.cleared = cleared;
                }

                if (isEmpty(copy.fields)) {
                  delete copy.fields;
                }
              } // adjust types to basic


              ['fields', 'params', 'result'].forEach(field => {
                if (hasOwn.call(copy, field)) {
                  copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);
                }
              });

              if (msg.id && typeof msg.id !== 'string') {
                throw new Error("Message id is not a string");
              }

              return JSON.stringify(copy);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "method_invocation.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/method_invocation.js                                                                           //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Instance name is this because it is usually referred to as this inside a
            // method definition

            /**
             * @summary The state for a single invocation of a method, referenced by this
             * inside a method definition.
             * @param {Object} options
             * @instanceName this
             * @showInstanceName true
             */
            DDPCommon.MethodInvocation = class MethodInvocation {
              constructor(options) {
                // true if we're running not the actual method, but a stub (that is,
                // if we're on a client (which may be a browser, or in the future a
                // server connecting to another server) and presently running a
                // simulation of a server-side method for latency compensation
                // purposes). not currently true except in a client such as a browser,
                // since there's usually no point in running stubs unless you have a
                // zero-latency connection to the user.

                /**
                 * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.
                 * @locus Anywhere
                 * @name  isSimulation
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 * @type {Boolean}
                 */
                this.isSimulation = options.isSimulation; // call this function to allow other method invocations (from the
                // same client) to continue running without waiting for this one to
                // complete.

                this._unblock = options.unblock || function () {};

                this._calledUnblock = false; // current user id

                /**
                 * @summary The id of the user that made this method call, or `null` if no user was logged in.
                 * @locus Anywhere
                 * @name  userId
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 */

                this.userId = options.userId; // sets current user id in all appropriate server contexts and
                // reruns subscriptions

                this._setUserId = options.setUserId || function () {}; // On the server, the connection this method call came in on.

                /**
                 * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.
                 * @locus Server
                 * @name  connection
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 */

                this.connection = options.connection; // The seed for randomStream value generation

                this.randomSeed = options.randomSeed; // This is set by RandomStream.get; and holds the random stream state

                this.randomStream = null;
              }
              /**
               * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
               * @locus Server
               * @memberOf DDPCommon.MethodInvocation
               * @instance
               */

              unblock() {
                this._calledUnblock = true;

                this._unblock();
              }
              /**
               * @summary Set the logged in user.
               * @locus Server
               * @memberOf DDPCommon.MethodInvocation
               * @instance
               * @param {String | null} userId The value that should be returned by `userId` on this connection.
               */

              setUserId(userId) {
                if (this._calledUnblock) {
                  throw new Error("Can't call setUserId in a method after calling unblock");
                }

                this.userId = userId;

                this._setUserId(userId);
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "random_stream.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/random_stream.js                                                                               //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // RandomStream allows for generation of pseudo-random values, from a seed.
            //
            // We use this for consistent 'random' numbers across the client and server.
            // We want to generate probably-unique IDs on the client, and we ideally want
            // the server to generate the same IDs when it executes the method.
            //
            // For generated values to be the same, we must seed ourselves the same way,
            // and we must keep track of the current state of our pseudo-random generators.
            // We call this state the scope. By default, we use the current DDP method
            // invocation as our scope.  DDP now allows the client to specify a randomSeed.
            // If a randomSeed is provided it will be used to seed our random sequences.
            // In this way, client and server method calls will generate the same values.
            //
            // We expose multiple named streams; each stream is independent
            // and is seeded differently (but predictably from the name).
            // By using multiple streams, we support reordering of requests,
            // as long as they occur on different streams.
            //
            // @param options {Optional Object}
            //   seed: Array or value - Seed value(s) for the generator.
            //                          If an array, will be used as-is
            //                          If a value, will be converted to a single-value array
            //                          If omitted, a random array will be used as the seed.
            DDPCommon.RandomStream = class RandomStream {
              constructor(options) {
                this.seed = [].concat(options.seed || randomToken());
                this.sequences = Object.create(null);
              } // Get a random sequence with the specified name, creating it if does not exist.
              // New sequences are seeded with the seed concatenated with the name.
              // By passing a seed into Random.create, we use the Alea generator.


              _sequence(name) {
                var self = this;
                var sequence = self.sequences[name] || null;

                if (sequence === null) {
                  var sequenceSeed = self.seed.concat(name);

                  for (var i = 0; i < sequenceSeed.length; i++) {
                    if (typeof sequenceSeed[i] === "function") {
                      sequenceSeed[i] = sequenceSeed[i]();
                    }
                  }

                  self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);
                }

                return sequence;
              }

            }; // Returns a random string of sufficient length for a random seed.
            // This is a placeholder function; a similar function is planned
            // for Random itself; when that is added we should remove this function,
            // and call Random's randomToken instead.

            function randomToken() {
              return Random.hexString(20);
            }

            ; // Returns the random stream with the specified name, in the specified
            // scope. If a scope is passed, then we use that to seed a (not
            // cryptographically secure) PRNG using the fast Alea algorithm.  If
            // scope is null (or otherwise falsey) then we use a generated seed.
            //
            // However, scope will normally be the current DDP method invocation,
            // so we'll use the stream with the specified name, and we should get
            // consistent values on the client and server sides of a method call.

            DDPCommon.RandomStream.get = function (scope, name) {
              if (!name) {
                name = "default";
              }

              if (!scope) {
                // There was no scope passed in; the sequence won't actually be
                // reproducible. but make it fast (and not cryptographically
                // secure) anyways, so that the behavior is similar to what you'd
                // get by passing in a scope.
                return Random.insecure;
              }

              var randomStream = scope.randomStream;

              if (!randomStream) {
                scope.randomStream = randomStream = new DDPCommon.RandomStream({
                  seed: scope.randomSeed
                });
              }

              return randomStream._sequence(name);
            }; // Creates a randomSeed for passing to a method call.
            // Note that we take enclosing as an argument,
            // though we expect it to be DDP._CurrentMethodInvocation.get()
            // However, we often evaluate makeRpcSeed lazily, and thus the relevant
            // invocation may not be the one currently in scope.
            // If enclosing is null, we'll use Random and values won't be repeatable.


            DDPCommon.makeRpcSeed = function (enclosing, methodName) {
              var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);
              return stream.hexString(20);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/ddp-common/namespace.js");
  _require("/node_modules/meteor/ddp-common/heartbeat.js");
  _require("/node_modules/meteor/ddp-common/utils.js");
  _require("/node_modules/meteor/ddp-common/method_invocation.js");
  _require("/node_modules/meteor/ddp-common/random_stream.js");

  /* Exports */
  Package._define("ddp-common", {
    DDPCommon: DDPCommon
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Reload;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "reload": { "reload.js": function (_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                           //
            // packages/reload/reload.js                                                                 //
            //                                                                                           //
            ///////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Reload: () => Reload
            });
            const Reload = {};
            var KEY_NAME = 'Meteor_Reload';
            var old_data = {}; // read in old data at startup.

            var old_json; // This logic for sessionStorage detection is based on browserstate/history.js

            var safeSessionStorage = null;

            try {
              // This throws a SecurityError on Chrome if cookies & localStorage are
              // explicitly disabled
              //
              // On Firefox with dom.storage.enabled set to false, sessionStorage is null
              //
              // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely
              // on the throw if sessionStorage == null; the alternative is browser
              // detection, but this seems better.
              safeSessionStorage = window.sessionStorage; // Check we can actually use it

              if (safeSessionStorage) {
                safeSessionStorage.setItem('__dummy__', '1');
                safeSessionStorage.removeItem('__dummy__');
              } else {
                // Be consistently null, for safety
                safeSessionStorage = null;
              }
            } catch (e) {
              // Expected on chrome with strict security, or if sessionStorage not supported
              safeSessionStorage = null;
            } // Exported for test.


            Reload._getData = function () {
              return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);
            };

            if (safeSessionStorage) {
              old_json = Reload._getData();
              safeSessionStorage.removeItem(KEY_NAME);
            } else {// Unsupported browser (IE 6,7) or locked down security settings.
              // No session resumption.
              // Meteor._debug("XXX UNSUPPORTED BROWSER/SETTINGS");
            }

            if (!old_json) old_json = '{}';
            var old_parsed = {};

            try {
              old_parsed = JSON.parse(old_json);

              if (typeof old_parsed !== "object") {
                Meteor._debug("Got bad data on reload. Ignoring.");

                old_parsed = {};
              }
            } catch (err) {
              Meteor._debug("Got invalid JSON on reload. Ignoring.");
            }

            if (old_parsed.reload && typeof old_parsed.data === "object") {
              // Meteor._debug("Restoring reload data.");
              old_data = old_parsed.data;
            }

            var providers = []; ////////// External API //////////
            // Packages that support migration should register themselves by calling
            // this function. When it's time to migrate, callback will be called
            // with one argument, the "retry function," and an optional 'option'
            // argument (containing a key 'immediateMigration'). If the package
            // is ready to migrate, it should return [true, data], where data is
            // its migration data, an arbitrary JSON value (or [true] if it has
            // no migration data this time). If the package needs more time
            // before it is ready to migrate, it should return false. Then, once
            // it is ready to migrating again, it should call the retry
            // function. The retry function will return immediately, but will
            // schedule the migration to be retried, meaning that every package
            // will be polled once again for its migration data. If they are all
            // ready this time, then the migration will happen. name must be set if there
            // is migration data. If 'immediateMigration' is set in the options
            // argument, then it doesn't matter whether the package is ready to
            // migrate or not; the reload will happen immediately without waiting
            // (used for OAuth redirect login).
            //

            Reload._onMigrate = function (name, callback) {
              if (!callback) {
                // name not provided, so first arg is callback.
                callback = name;
                name = undefined;
              }

              providers.push({
                name: name,
                callback: callback
              });
            }; // Called by packages when they start up.
            // Returns the object that was saved, or undefined if none saved.
            //


            Reload._migrationData = function (name) {
              return old_data[name];
            }; // Options are the same as for `Reload._migrate`.


            var pollProviders = function (tryReload, options) {
              tryReload = tryReload || function () {};

              options = options || {};
              var migrationData = {};
              var remaining = providers.slice(0);
              var allReady = true;

              while (remaining.length) {
                var p = remaining.shift();
                var status = p.callback(tryReload, options);
                if (!status[0]) allReady = false;
                if (status.length > 1 && p.name) migrationData[p.name] = status[1];
              }

              ;
              if (allReady || options.immediateMigration) return migrationData;else return null;
            }; // Options are:
            //  - immediateMigration: true if the page will be reloaded immediately
            //    regardless of whether packages report that they are ready or not.


            Reload._migrate = function (tryReload, options) {
              // Make sure each package is ready to go, and collect their
              // migration data
              var migrationData = pollProviders(tryReload, options);
              if (migrationData === null) return false; // not ready yet..

              try {
                // Persist the migration data
                var json = JSON.stringify({
                  data: migrationData,
                  reload: true
                });
              } catch (err) {
                Meteor._debug("Couldn't serialize data for migration", migrationData);

                throw err;
              }

              if (safeSessionStorage) {
                try {
                  safeSessionStorage.setItem(KEY_NAME, json);
                } catch (err) {
                  // We should have already checked this, but just log - don't throw
                  Meteor._debug("Couldn't save data for migration to sessionStorage", err);
                }
              } else {
                Meteor._debug("Browser does not support sessionStorage. Not saving migration state.");
              }

              return true;
            }; // Allows tests to isolate the list of providers.


            Reload._withFreshProvidersForTest = function (f) {
              var originalProviders = providers.slice(0);
              providers = [];

              try {
                f();
              } finally {
                providers = originalProviders;
              }
            }; // Migrating reload: reload this page (presumably to pick up a new
            // version of the code or assets), but save the program state and
            // migrate it over. This function returns immediately. The reload
            // will happen at some point in the future once all of the packages
            // are ready to migrate.
            //


            var reloading = false;

            Reload._reload = function (options) {
              options = options || {};
              if (reloading) return;
              reloading = true;

              function tryReload() {
                setTimeout(reload, 1);
              }

              function reload() {
                if (Reload._migrate(tryReload, options)) {
                  // We'd like to make the browser reload the page using location.replace()
                  // instead of location.reload(), because this avoids validating assets
                  // with the server if we still have a valid cached copy. This doesn't work
                  // when the location contains a hash however, because that wouldn't reload
                  // the page and just scroll to the hash location instead.
                  if (window.location.hash || window.location.href.endsWith("#")) {
                    window.location.reload();
                  } else {
                    window.location.replace(window.location.href);
                  }
                }
              }

              tryReload();
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/reload/reload.js");

  /* Exports */
  Package._define("reload", _exports2, {
    Reload: Reload
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Retry = Package.retry.Retry;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, SockJS;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "socket-stream-client": { "browser.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/browser.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

            var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

            _module.export({
              ClientStream: () => ClientStream
            });
            let toSockjsUrl, toWebsocketUrl;
            _module.link("./urls.js", {
              toSockjsUrl(v) {
                toSockjsUrl = v;
              },

              toWebsocketUrl(v) {
                toWebsocketUrl = v;
              }

            }, 0);
            let StreamClientCommon;
            _module.link("./common.js", {
              StreamClientCommon(v) {
                StreamClientCommon = v;
              }

            }, 1);
            _module.link("./sockjs-0.3.4.js");

            class ClientStream extends StreamClientCommon {
              // @param url {String} URL to Meteor app
              //   "http://subdomain.meteor.com/" or "/" or
              //   "ddp+sockjs://foo-**.meteor.com/sockjs"
              constructor(url, options) {
                super(options);

                this._initCommon(this.options); //// Constants
                // how long between hearing heartbeat from the server until we declare
                // the connection dead. heartbeats come every 45s (stream_server.js)
                //
                // NOTE: this is a older timeout mechanism. We now send heartbeats at
                // the DDP level (https://github.com/meteor/meteor/pull/1865), and
                // expect those timeouts to kill a non-responsive connection before
                // this timeout fires. This is kept around for compatibility (when
                // talking to a server that doesn't support DDP heartbeats) and can be
                // removed later.


                this.HEARTBEAT_TIMEOUT = 100 * 1000;
                this.rawUrl = url;
                this.socket = null;
                this.lastError = null;
                this.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.
                // (IE8 does not support addEventListener)

                if (typeof window !== 'undefined' && window.addEventListener) window.addEventListener('online', this._online.bind(this), false
                /* useCapture. make FF3.6 happy. */
                ); //// Kickoff!

                this._launchConnection();
              } // data is a utf8 string. Data sent while not connected is dropped on
              // the floor, and it is up the user of this API to retransmit lost
              // messages on 'reset'


              send(data) {
                if (this.currentStatus.connected) {
                  this.socket.send(data);
                }
              } // Changes where this connection points


              _changeUrl(url) {
                this.rawUrl = url;
              }

              _connected() {
                if (this.connectionTimer) {
                  clearTimeout(this.connectionTimer);
                  this.connectionTimer = null;
                }

                if (this.currentStatus.connected) {
                  // already connected. do nothing. this probably shouldn't happen.
                  return;
                } // update status


                this.currentStatus.status = 'connected';
                this.currentStatus.connected = true;
                this.currentStatus.retryCount = 0;
                this.statusChanged(); // fire resets. This must come after status change so that clients
                // can call send from within a reset callback.

                this.forEachCallback('reset', callback => {
                  callback();
                });
              }

              _cleanup(maybeError) {
                this._clearConnectionAndHeartbeatTimers();

                if (this.socket) {
                  this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};

                  this.socket.close();
                  this.socket = null;
                }

                this.forEachCallback('disconnect', callback => {
                  callback(maybeError);
                });
              }

              _clearConnectionAndHeartbeatTimers() {
                if (this.connectionTimer) {
                  clearTimeout(this.connectionTimer);
                  this.connectionTimer = null;
                }

                if (this.heartbeatTimer) {
                  clearTimeout(this.heartbeatTimer);
                  this.heartbeatTimer = null;
                }
              }

              _heartbeat_timeout() {
                console.log('Connection timeout. No sockjs heartbeat received.');

                this._lostConnection(new this.ConnectionError("Heartbeat timed out"));
              }

              _heartbeat_received() {
                // If we've already permanently shut down this stream, the timeout is
                // already cleared, and we don't need to set it again.
                if (this._forcedToDisconnect) return;
                if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);
                this.heartbeatTimer = setTimeout(this._heartbeat_timeout.bind(this), this.HEARTBEAT_TIMEOUT);
              }

              _sockjsProtocolsWhitelist() {
                // only allow polling protocols. no streaming.  streaming
                // makes safari spin.
                var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain
                // proxies. this seems to be resolved with iOS 6. eg
                // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.
                //
                // iOS <4 doesn't support websockets at all so sockjs will just
                // immediately fall back to http

                var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);
                if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);
                return protocolsWhitelist;
              }

              _launchConnection() {
                this._cleanup(); // cleanup the old socket, if there was one.


                var options = (0, _objectSpread2.default)({
                  protocols_whitelist: this._sockjsProtocolsWhitelist()
                }, this.options._sockjsOptions);
                const hasSockJS = typeof SockJS === "function";
                this.socket = hasSockJS // Convert raw URL to SockJS URL each time we open a connection, so
                // that we can connect to random hostnames and get around browser
                // per-host connection limits.
                ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options) : new WebSocket(toWebsocketUrl(this.rawUrl));

                this.socket.onopen = data => {
                  this.lastError = null;

                  this._connected();
                };

                this.socket.onmessage = data => {
                  this.lastError = null;

                  this._heartbeat_received();

                  if (this.currentStatus.connected) {
                    this.forEachCallback('message', callback => {
                      callback(data.data);
                    });
                  }
                };

                this.socket.onclose = () => {
                  Promise.resolve( // If the socket is closing because there was an error, and we
                  // didn't load SockJS before, try loading it dynamically before
                  // retrying the connection.
                  this.lastError && !hasSockJS && _module.dynamicImport("./sockjs-0.3.4.js")).done(() => {
                    this._lostConnection();
                  });
                };

                this.socket.onerror = error => {
                  const {
                    lastError
                  } = this;
                  this.lastError = error;
                  if (lastError) return;
                  console.log('stream error', error, new Date().toDateString());
                };

                this.socket.onheartbeat = () => {
                  this.lastError = null;

                  this._heartbeat_received();
                };

                if (this.connectionTimer) clearTimeout(this.connectionTimer);
                this.connectionTimer = setTimeout(() => {
                  this._lostConnection(new this.ConnectionError("DDP connection timed out"));
                }, this.CONNECT_TIMEOUT);
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require3, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/common.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

            var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

            _module2.export({
              StreamClientCommon: () => StreamClientCommon
            });
            let Retry;
            _module2.link("meteor/retry", {
              Retry(v) {
                Retry = v;
              }

            }, 0);
            const forcedReconnectError = new Error("forced reconnect");

            class StreamClientCommon {
              constructor(options) {
                this.options = (0, _objectSpread2.default)({
                  retry: true
                }, options || null);
                this.ConnectionError = options && options.ConnectionError || Error;
              } // Register for callbacks.


              on(name, callback) {
                if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error('unknown event type: ' + name);
                if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];
                this.eventCallbacks[name].push(callback);
              }

              forEachCallback(name, cb) {
                if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {
                  return;
                }

                this.eventCallbacks[name].forEach(cb);
              }

              _initCommon(options) {
                options = options || Object.create(null); //// Constants
                // how long to wait until we declare the connection attempt
                // failed.

                this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;
                this.eventCallbacks = Object.create(null); // name -> [callback]

                this._forcedToDisconnect = false; //// Reactive status

                this.currentStatus = {
                  status: 'connecting',
                  connected: false,
                  retryCount: 0
                };

                if (Package.tracker) {
                  this.statusListeners = new Package.tracker.Tracker.Dependency();
                }

                this.statusChanged = () => {
                  if (this.statusListeners) {
                    this.statusListeners.changed();
                  }
                }; //// Retry logic


                this._retry = new Retry();
                this.connectionTimer = null;
              } // Trigger a reconnect.


              reconnect(options) {
                options = options || Object.create(null);

                if (options.url) {
                  this._changeUrl(options.url);
                }

                if (options._sockjsOptions) {
                  this.options._sockjsOptions = options._sockjsOptions;
                }

                if (this.currentStatus.connected) {
                  if (options._force || options.url) {
                    this._lostConnection(forcedReconnectError);
                  }

                  return;
                } // if we're mid-connection, stop it.


                if (this.currentStatus.status === 'connecting') {
                  // Pretend it's a clean close.
                  this._lostConnection();
                }

                this._retry.clear();

                this.currentStatus.retryCount -= 1; // don't count manual retries

                this._retryNow();
              }

              disconnect(options) {
                options = options || Object.create(null); // Failed is permanent. If we're failed, don't let people go back
                // online by calling 'disconnect' then 'reconnect'.

                if (this._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream
                // is forced to disconnect, it can never reconnect. This is for
                // error cases such as ddp version mismatch, where trying again
                // won't fix the problem.

                if (options._permanent) {
                  this._forcedToDisconnect = true;
                }

                this._cleanup();

                this._retry.clear();

                this.currentStatus = {
                  status: options._permanent ? 'failed' : 'offline',
                  connected: false,
                  retryCount: 0
                };
                if (options._permanent && options._error) this.currentStatus.reason = options._error;
                this.statusChanged();
              } // maybeError is set unless it's a clean protocol-level close.


              _lostConnection(maybeError) {
                this._cleanup(maybeError);

                this._retryLater(maybeError); // sets status. no need to do it here.
              } // fired when we detect that we've gone online. try to reconnect
              // immediately.


              _online() {
                // if we've requested to be offline by disconnecting, don't reconnect.
                if (this.currentStatus.status != 'offline') this.reconnect();
              }

              _retryLater(maybeError) {
                var timeout = 0;

                if (this.options.retry || maybeError === forcedReconnectError) {
                  timeout = this._retry.retryLater(this.currentStatus.retryCount, this._retryNow.bind(this));
                  this.currentStatus.status = 'waiting';
                  this.currentStatus.retryTime = new Date().getTime() + timeout;
                } else {
                  this.currentStatus.status = 'failed';
                  delete this.currentStatus.retryTime;
                }

                this.currentStatus.connected = false;
                this.statusChanged();
              }

              _retryNow() {
                if (this._forcedToDisconnect) return;
                this.currentStatus.retryCount += 1;
                this.currentStatus.status = 'connecting';
                this.currentStatus.connected = false;
                delete this.currentStatus.retryTime;
                this.statusChanged();

                this._launchConnection();
              } // Get current status. Reactive.


              status() {
                if (this.statusListeners) {
                  this.statusListeners.depend();
                }

                return this.currentStatus;
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sockjs-0.3.4.js": function (_require4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/sockjs-0.3.4.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX METEOR changes in <METEOR>

            /* SockJS client, version 0.3.4, http://sockjs.org, MIT License
            
            Copyright (c) 2011-2012 VMware, Inc.
            
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            
            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.
            
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */
            // <METEOR> Commented out JSO implementation (use json package instead).
            // JSON2 by Douglas Crockford (minified).
            // var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
            // </METEOR>
            //     [*] Including lib/index.js
            // Public object
            SockJS = function () {
              var _document = document;
              var _window = window;
              var utils = {}; //         [*] Including lib/reventtarget.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              /* Simplified implementation of DOM2 EventTarget.
               *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
               */

              var REventTarget = function () {};

              REventTarget.prototype.addEventListener = function (eventType, listener) {
                if (!this._listeners) {
                  this._listeners = {};
                }

                if (!(eventType in this._listeners)) {
                  this._listeners[eventType] = [];
                }

                var arr = this._listeners[eventType];

                if (utils.arrIndexOf(arr, listener) === -1) {
                  arr.push(listener);
                }

                return;
              };

              REventTarget.prototype.removeEventListener = function (eventType, listener) {
                if (!(this._listeners && eventType in this._listeners)) {
                  return;
                }

                var arr = this._listeners[eventType];
                var idx = utils.arrIndexOf(arr, listener);

                if (idx !== -1) {
                  if (arr.length > 1) {
                    this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
                  } else {
                    delete this._listeners[eventType];
                  }

                  return;
                }

                return;
              };

              REventTarget.prototype.dispatchEvent = function (event) {
                var t = event.type;
                var args = Array.prototype.slice.call(arguments, 0);

                if (this['on' + t]) {
                  this['on' + t].apply(this, args);
                }

                if (this._listeners && t in this._listeners) {
                  for (var i = 0; i < this._listeners[t].length; i++) {
                    this._listeners[t][i].apply(this, args);
                  }
                }
              }; //         [*] End of lib/reventtarget.js
              //         [*] Including lib/simpleevent.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var SimpleEvent = function (type, obj) {
                this.type = type;

                if (typeof obj !== 'undefined') {
                  for (var k in obj) {
                    if (!obj.hasOwnProperty(k)) continue;
                    this[k] = obj[k];
                  }
                }
              };

              SimpleEvent.prototype.toString = function () {
                var r = [];

                for (var k in this) {
                  if (!this.hasOwnProperty(k)) continue;
                  var v = this[k];
                  if (typeof v === 'function') v = '[function]';
                  r.push(k + '=' + v);
                }

                return 'SimpleEvent(' + r.join(', ') + ')';
              }; //         [*] End of lib/simpleevent.js
              //         [*] Including lib/eventemitter.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventEmitter = function (events) {
                var that = this;
                that._events = events || [];
                that._listeners = {};
              };

              EventEmitter.prototype.emit = function (type) {
                var that = this;

                that._verifyType(type);

                if (that._nuked) return;
                var args = Array.prototype.slice.call(arguments, 1);

                if (that['on' + type]) {
                  that['on' + type].apply(that, args);
                }

                if (type in that._listeners) {
                  for (var i = 0; i < that._listeners[type].length; i++) {
                    that._listeners[type][i].apply(that, args);
                  }
                }
              };

              EventEmitter.prototype.on = function (type, callback) {
                var that = this;

                that._verifyType(type);

                if (that._nuked) return;

                if (!(type in that._listeners)) {
                  that._listeners[type] = [];
                }

                that._listeners[type].push(callback);
              };

              EventEmitter.prototype._verifyType = function (type) {
                var that = this;

                if (utils.arrIndexOf(that._events, type) === -1) {
                  utils.log('Event ' + JSON.stringify(type) + ' not listed ' + JSON.stringify(that._events) + ' in ' + that);
                }
              };

              EventEmitter.prototype.nuke = function () {
                var that = this;
                that._nuked = true;

                for (var i = 0; i < that._events.length; i++) {
                  delete that[that._events[i]];
                }

                that._listeners = {};
              }; //         [*] End of lib/eventemitter.js
              //         [*] Including lib/utils.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';

              utils.random_string = function (length, max) {
                max = max || random_string_chars.length;
                var i,
                    ret = [];

                for (i = 0; i < length; i++) {
                  ret.push(random_string_chars.substr(Math.floor(Math.random() * max), 1));
                }

                return ret.join('');
              };

              utils.random_number = function (max) {
                return Math.floor(Math.random() * max);
              };

              utils.random_number_string = function (max) {
                var t = ('' + (max - 1)).length;
                var p = Array(t + 1).join('0');
                return (p + utils.random_number(max)).slice(-t);
              }; // Assuming that url looks like: http://asdasd:111/asd


              utils.getOrigin = function (url) {
                url += '/';
                var parts = url.split('/').slice(0, 3);
                return parts.join('/');
              };

              utils.isSameOriginUrl = function (url_a, url_b) {
                // location.origin would do, but it's not always available.
                if (!url_b) url_b = _window.location.href;
                return url_a.split('/').slice(0, 3).join('/') === url_b.split('/').slice(0, 3).join('/');
              }; // <METEOR>
              // https://github.com/sockjs/sockjs-client/issues/79


              utils.isSameOriginScheme = function (url_a, url_b) {
                if (!url_b) url_b = _window.location.href;
                return url_a.split(':')[0] === url_b.split(':')[0];
              }; // </METEOR>


              utils.getParentDomain = function (url) {
                // ipv4 ip address
                if (/^[0-9.]*$/.test(url)) return url; // ipv6 ip address

                if (/^\[/.test(url)) return url; // no dots

                if (!/[.]/.test(url)) return url;
                var parts = url.split('.').slice(1);
                return parts.join('.');
              };

              utils.objectExtend = function (dst, src) {
                for (var k in src) {
                  if (src.hasOwnProperty(k)) {
                    dst[k] = src[k];
                  }
                }

                return dst;
              };

              var WPrefix = '_jp';

              utils.polluteGlobalNamespace = function () {
                if (!(WPrefix in _window)) {
                  _window[WPrefix] = {};
                }
              };

              utils.closeFrame = function (code, reason) {
                return 'c' + JSON.stringify([code, reason]);
              };

              utils.userSetCode = function (code) {
                return code === 1000 || code >= 3000 && code <= 4999;
              }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
              // and RFC 2988.


              utils.countRTO = function (rtt) {
                var rto;

                if (rtt > 100) {
                  rto = 3 * rtt; // rto > 300msec
                } else {
                  rto = rtt + 200; // 200msec < rto <= 300msec
                }

                return rto;
              };

              utils.log = function () {
                if (_window.console && console.log && console.log.apply) {
                  console.log.apply(console, arguments);
                }
              };

              utils.bind = function (fun, that) {
                if (fun.bind) {
                  return fun.bind(that);
                } else {
                  return function () {
                    return fun.apply(that, arguments);
                  };
                }
              };

              utils.flatUrl = function (url) {
                return url.indexOf('?') === -1 && url.indexOf('#') === -1;
              }; // `relativeTo` is an optional absolute URL. If provided, `url` will be
              // interpreted relative to `relativeTo`. Defaults to `document.location`.
              // <METEOR>


              utils.amendUrl = function (url, relativeTo) {
                var baseUrl;

                if (relativeTo === undefined) {
                  baseUrl = _document.location;
                } else {
                  var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);

                  if (protocolMatch) {
                    var protocol = protocolMatch[0].toLowerCase();
                    var rest = relativeTo.substring(protocol.length);
                    var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest);
                    if (hostMatch) var host = hostMatch[0];
                  }

                  if (!protocol || !host) throw new Error("relativeTo must be an absolute url");
                  baseUrl = {
                    protocol: protocol,
                    host: host
                  };
                }

                if (!url) {
                  throw new Error('Wrong url for SockJS');
                }

                if (!utils.flatUrl(url)) {
                  throw new Error('Only basic urls are supported in SockJS');
                } //  '//abc' --> 'http://abc'


                if (url.indexOf('//') === 0) {
                  url = baseUrl.protocol + url;
                } // '/abc' --> 'http://localhost:1234/abc'


                if (url.indexOf('/') === 0) {
                  url = baseUrl.protocol + '//' + baseUrl.host + url;
                } // </METEOR>
                // strip trailing slashes


                url = url.replace(/[/]+$/, ''); // We have a full url here, with proto and host. For some browsers
                // http://localhost:80/ is not in the same origin as http://localhost/
                // Remove explicit :80 or :443 in such cases. See #74

                var parts = url.split("/");

                if (parts[0] === "http:" && /:80$/.test(parts[2]) || parts[0] === "https:" && /:443$/.test(parts[2])) {
                  parts[2] = parts[2].replace(/:(80|443)$/, "");
                }

                url = parts.join("/");
                return url;
              }; // IE doesn't support [].indexOf.


              utils.arrIndexOf = function (arr, obj) {
                for (var i = 0; i < arr.length; i++) {
                  if (arr[i] === obj) {
                    return i;
                  }
                }

                return -1;
              };

              utils.arrSkip = function (arr, obj) {
                var idx = utils.arrIndexOf(arr, obj);

                if (idx === -1) {
                  return arr.slice();
                } else {
                  var dst = arr.slice(0, idx);
                  return dst.concat(arr.slice(idx + 1));
                }
              }; // Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df


              utils.isArray = Array.isArray || function (value) {
                return {}.toString.call(value).indexOf('Array') >= 0;
              };

              utils.delay = function (t, fun) {
                if (typeof t === 'function') {
                  fun = t;
                  t = 0;
                }

                return setTimeout(fun, t);
              }; // Chars worth escaping, as defined by Douglas Crockford:
              //   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196


              var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                  json_lookup = {
                "\0": "\\u0000",
                "\x01": "\\u0001",
                "\x02": "\\u0002",
                "\x03": "\\u0003",
                "\x04": "\\u0004",
                "\x05": "\\u0005",
                "\x06": "\\u0006",
                "\x07": "\\u0007",
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\x0B": "\\u000b",
                "\f": "\\f",
                "\r": "\\r",
                "\x0E": "\\u000e",
                "\x0F": "\\u000f",
                "\x10": "\\u0010",
                "\x11": "\\u0011",
                "\x12": "\\u0012",
                "\x13": "\\u0013",
                "\x14": "\\u0014",
                "\x15": "\\u0015",
                "\x16": "\\u0016",
                "\x17": "\\u0017",
                "\x18": "\\u0018",
                "\x19": "\\u0019",
                "\x1A": "\\u001a",
                "\x1B": "\\u001b",
                "\x1C": "\\u001c",
                "\x1D": "\\u001d",
                "\x1E": "\\u001e",
                "\x1F": "\\u001f",
                "\"": "\\\"",
                "\\": "\\\\",
                "\x7F": "\\u007f",
                "\x80": "\\u0080",
                "\x81": "\\u0081",
                "\x82": "\\u0082",
                "\x83": "\\u0083",
                "\x84": "\\u0084",
                "\x85": "\\u0085",
                "\x86": "\\u0086",
                "\x87": "\\u0087",
                "\x88": "\\u0088",
                "\x89": "\\u0089",
                "\x8A": "\\u008a",
                "\x8B": "\\u008b",
                "\x8C": "\\u008c",
                "\x8D": "\\u008d",
                "\x8E": "\\u008e",
                "\x8F": "\\u008f",
                "\x90": "\\u0090",
                "\x91": "\\u0091",
                "\x92": "\\u0092",
                "\x93": "\\u0093",
                "\x94": "\\u0094",
                "\x95": "\\u0095",
                "\x96": "\\u0096",
                "\x97": "\\u0097",
                "\x98": "\\u0098",
                "\x99": "\\u0099",
                "\x9A": "\\u009a",
                "\x9B": "\\u009b",
                "\x9C": "\\u009c",
                "\x9D": "\\u009d",
                "\x9E": "\\u009e",
                "\x9F": "\\u009f",
                "\xAD": "\\u00ad",
                "\u0600": "\\u0600",
                "\u0601": "\\u0601",
                "\u0602": "\\u0602",
                "\u0603": "\\u0603",
                "\u0604": "\\u0604",
                "\u070F": "\\u070f",
                "\u17B4": "\\u17b4",
                "\u17B5": "\\u17b5",
                "\u200C": "\\u200c",
                "\u200D": "\\u200d",
                "\u200E": "\\u200e",
                "\u200F": "\\u200f",
                "\u2028": "\\u2028",
                "\u2029": "\\u2029",
                "\u202A": "\\u202a",
                "\u202B": "\\u202b",
                "\u202C": "\\u202c",
                "\u202D": "\\u202d",
                "\u202E": "\\u202e",
                "\u202F": "\\u202f",
                "\u2060": "\\u2060",
                "\u2061": "\\u2061",
                "\u2062": "\\u2062",
                "\u2063": "\\u2063",
                "\u2064": "\\u2064",
                "\u2065": "\\u2065",
                "\u2066": "\\u2066",
                "\u2067": "\\u2067",
                "\u2068": "\\u2068",
                "\u2069": "\\u2069",
                "\u206A": "\\u206a",
                "\u206B": "\\u206b",
                "\u206C": "\\u206c",
                "\u206D": "\\u206d",
                "\u206E": "\\u206e",
                "\u206F": "\\u206f",
                "\uFEFF": "\\ufeff",
                "\uFFF0": "\\ufff0",
                "\uFFF1": "\\ufff1",
                "\uFFF2": "\\ufff2",
                "\uFFF3": "\\ufff3",
                "\uFFF4": "\\ufff4",
                "\uFFF5": "\\ufff5",
                "\uFFF6": "\\ufff6",
                "\uFFF7": "\\ufff7",
                "\uFFF8": "\\ufff8",
                "\uFFF9": "\\ufff9",
                "\uFFFA": "\\ufffa",
                "\uFFFB": "\\ufffb",
                "\uFFFC": "\\ufffc",
                "\uFFFD": "\\ufffd",
                "\uFFFE": "\\ufffe",
                "\uFFFF": "\\uffff"
              }; // Some extra characters that Chrome gets wrong, and substitutes with
              // something else on the wire.

              var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
                  extra_lookup; // JSON Quote string. Use native implementation when possible.

              var JSONQuote = JSON && JSON.stringify || function (string) {
                json_escapable.lastIndex = 0;

                if (json_escapable.test(string)) {
                  string = string.replace(json_escapable, function (a) {
                    return json_lookup[a];
                  });
                }

                return '"' + string + '"';
              }; // This may be quite slow, so let's delay until user actually uses bad
              // characters.


              var unroll_lookup = function (escapable) {
                var i;
                var unrolled = {};
                var c = [];

                for (i = 0; i < 65536; i++) {
                  c.push(String.fromCharCode(i));
                }

                escapable.lastIndex = 0;
                c.join('').replace(escapable, function (a) {
                  unrolled[a] = "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                  return '';
                });
                escapable.lastIndex = 0;
                return unrolled;
              }; // Quote string, also taking care of unicode characters that browsers
              // often break. Especially, take care of unicode surrogates:
              //    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates


              utils.quote = function (string) {
                var quoted = JSONQuote(string); // In most cases this should be very fast and good enough.

                extra_escapable.lastIndex = 0;

                if (!extra_escapable.test(quoted)) {
                  return quoted;
                }

                if (!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);
                return quoted.replace(extra_escapable, function (a) {
                  return extra_lookup[a];
                });
              };

              var _all_protocols = ['websocket', 'xdr-streaming', 'xhr-streaming', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];

              utils.probeProtocols = function () {
                var probed = {};

                for (var i = 0; i < _all_protocols.length; i++) {
                  var protocol = _all_protocols[i]; // User can have a typo in protocol name.

                  probed[protocol] = SockJS[protocol] && SockJS[protocol].enabled();
                }

                return probed;
              };

              utils.detectProtocols = function (probed, protocols_whitelist, info) {
                var pe = {},
                    protocols = [];
                if (!protocols_whitelist) protocols_whitelist = _all_protocols;

                for (var i = 0; i < protocols_whitelist.length; i++) {
                  var protocol = protocols_whitelist[i];
                  pe[protocol] = probed[protocol];
                }

                var maybe_push = function (protos) {
                  var proto = protos.shift();

                  if (pe[proto]) {
                    protocols.push(proto);
                  } else {
                    if (protos.length > 0) {
                      maybe_push(protos);
                    }
                  }
                }; // 1. Websocket


                if (info.websocket !== false) {
                  maybe_push(['websocket']);
                } // 2. Streaming


                if (pe['xhr-streaming'] && !info.null_origin) {
                  protocols.push('xhr-streaming');
                } else {
                  if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {
                    protocols.push('xdr-streaming');
                  } else {
                    maybe_push(['iframe-eventsource', 'iframe-htmlfile']);
                  }
                } // 3. Polling


                if (pe['xhr-polling'] && !info.null_origin) {
                  protocols.push('xhr-polling');
                } else {
                  if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {
                    protocols.push('xdr-polling');
                  } else {
                    maybe_push(['iframe-xhr-polling', 'jsonp-polling']);
                  }
                }

                return protocols;
              }; //         [*] End of lib/utils.js
              //         [*] Including lib/dom.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // May be used by htmlfile jsonp and transports.


              var MPrefix = '_sockjs_global';

              utils.createHook = function () {
                var window_id = 'a' + utils.random_string(8);

                if (!(MPrefix in _window)) {
                  var map = {};

                  _window[MPrefix] = function (window_id) {
                    if (!(window_id in map)) {
                      map[window_id] = {
                        id: window_id,
                        del: function () {
                          delete map[window_id];
                        }
                      };
                    }

                    return map[window_id];
                  };
                }

                return _window[MPrefix](window_id);
              };

              utils.attachMessage = function (listener) {
                utils.attachEvent('message', listener);
              };

              utils.attachEvent = function (event, listener) {
                if (typeof _window.addEventListener !== 'undefined') {
                  _window.addEventListener(event, listener, false);
                } else {
                  // IE quirks.
                  // According to: http://stevesouders.com/misc/test-postmessage.php
                  // the message gets delivered only to 'document', not 'window'.
                  _document.attachEvent("on" + event, listener); // I get 'window' for ie8.


                  _window.attachEvent("on" + event, listener);
                }
              };

              utils.detachMessage = function (listener) {
                utils.detachEvent('message', listener);
              };

              utils.detachEvent = function (event, listener) {
                if (typeof _window.addEventListener !== 'undefined') {
                  _window.removeEventListener(event, listener, false);
                } else {
                  _document.detachEvent("on" + event, listener);

                  _window.detachEvent("on" + event, listener);
                }
              };

              var on_unload = {}; // Things registered after beforeunload are to be called immediately.

              var after_unload = false;

              var trigger_unload_callbacks = function () {
                for (var ref in on_unload) {
                  on_unload[ref]();
                  delete on_unload[ref];
                }

                ;
              };

              var unload_triggered = function () {
                if (after_unload) return;
                after_unload = true;
                trigger_unload_callbacks();
              }; // 'unload' alone is not reliable in opera within an iframe, but we
              // can't use `beforeunload` as IE fires it on javascript: links.


              utils.attachEvent('unload', unload_triggered);

              utils.unload_add = function (listener) {
                var ref = utils.random_string(8);
                on_unload[ref] = listener;

                if (after_unload) {
                  utils.delay(trigger_unload_callbacks);
                }

                return ref;
              };

              utils.unload_del = function (ref) {
                if (ref in on_unload) delete on_unload[ref];
              };

              utils.createIframe = function (iframe_url, error_callback) {
                var iframe = _document.createElement('iframe');

                var tref, unload_ref;

                var unattach = function () {
                  clearTimeout(tref); // Explorer had problems with that.

                  try {
                    iframe.onload = null;
                  } catch (x) {}

                  iframe.onerror = null;
                };

                var cleanup = function () {
                  if (iframe) {
                    unattach(); // This timeout makes chrome fire onbeforeunload event
                    // within iframe. Without the timeout it goes straight to
                    // onunload.

                    setTimeout(function () {
                      if (iframe) {
                        iframe.parentNode.removeChild(iframe);
                      }

                      iframe = null;
                    }, 0);
                    utils.unload_del(unload_ref);
                  }
                };

                var onerror = function (r) {
                  if (iframe) {
                    cleanup();
                    error_callback(r);
                  }
                };

                var post = function (msg, origin) {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {}

                  ;
                };

                iframe.src = iframe_url;
                iframe.style.display = 'none';
                iframe.style.position = 'absolute';

                iframe.onerror = function () {
                  onerror('onerror');
                };

                iframe.onload = function () {
                  // `onload` is triggered before scripts on the iframe are
                  // executed. Give it few seconds to actually load stuff.
                  clearTimeout(tref);
                  tref = setTimeout(function () {
                    onerror('onload timeout');
                  }, 2000);
                };

                _document.body.appendChild(iframe);

                tref = setTimeout(function () {
                  onerror('timeout');
                }, 15000);
                unload_ref = utils.unload_add(cleanup);
                return {
                  post: post,
                  cleanup: cleanup,
                  loaded: unattach
                };
              };

              utils.createHtmlfile = function (iframe_url, error_callback) {
                var doc = new ActiveXObject('htmlfile');
                var tref, unload_ref;
                var iframe;

                var unattach = function () {
                  clearTimeout(tref);
                };

                var cleanup = function () {
                  if (doc) {
                    unattach();
                    utils.unload_del(unload_ref);
                    iframe.parentNode.removeChild(iframe);
                    iframe = doc = null;
                    CollectGarbage();
                  }
                };

                var onerror = function (r) {
                  if (doc) {
                    cleanup();
                    error_callback(r);
                  }
                };

                var post = function (msg, origin) {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {}

                  ;
                };

                doc.open();
                doc.write('<html><s' + 'cript>' + 'document.domain="' + document.domain + '";' + '</s' + 'cript></html>');
                doc.close();
                doc.parentWindow[WPrefix] = _window[WPrefix];
                var c = doc.createElement('div');
                doc.body.appendChild(c);
                iframe = doc.createElement('iframe');
                c.appendChild(iframe);
                iframe.src = iframe_url;
                tref = setTimeout(function () {
                  onerror('timeout');
                }, 15000);
                unload_ref = utils.unload_add(cleanup);
                return {
                  post: post,
                  cleanup: cleanup,
                  loaded: unattach
                };
              }; //         [*] End of lib/dom.js
              //         [*] Including lib/dom2.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var AbstractXHRObject = function () {};

              AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);

              AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
                var that = this;

                try {
                  that.xhr = new XMLHttpRequest();
                } catch (x) {}

                ;

                if (!that.xhr) {
                  try {
                    that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');
                  } catch (x) {}

                  ;
                }

                if (_window.ActiveXObject || _window.XDomainRequest) {
                  // IE8 caches even POSTs
                  url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();
                } // Explorer tends to keep connection open, even after the
                // tab gets closed: http://bugs.jquery.com/ticket/5280


                that.unload_ref = utils.unload_add(function () {
                  that._cleanup(true);
                });

                try {
                  that.xhr.open(method, url, true);
                } catch (e) {
                  // IE raises an exception on wrong port.
                  that.emit('finish', 0, '');

                  that._cleanup();

                  return;
                }

                ;

                if (!opts || !opts.no_credentials) {
                  // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
                  // "This never affects same-site requests."
                  that.xhr.withCredentials = 'true';
                }

                if (opts && opts.headers) {
                  for (var key in opts.headers) {
                    that.xhr.setRequestHeader(key, opts.headers[key]);
                  }
                }

                that.xhr.onreadystatechange = function () {
                  if (that.xhr) {
                    var x = that.xhr;

                    switch (x.readyState) {
                      case 3:
                        // IE doesn't like peeking into responseText or status
                        // on Microsoft.XMLHTTP and readystate=3
                        try {
                          var status = x.status;
                          var text = x.responseText;
                        } catch (x) {}

                        ; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                        if (status === 1223) status = 204; // IE does return readystate == 3 for 404 answers.

                        if (text && text.length > 0) {
                          that.emit('chunk', status, text);
                        }

                        break;

                      case 4:
                        var status = x.status; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                        if (status === 1223) status = 204;
                        that.emit('finish', status, x.responseText);

                        that._cleanup(false);

                        break;
                    }
                  }
                };

                that.xhr.send(payload);
              };

              AbstractXHRObject.prototype._cleanup = function (abort) {
                var that = this;
                if (!that.xhr) return;
                utils.unload_del(that.unload_ref); // IE needs this field to be a function

                that.xhr.onreadystatechange = function () {};

                if (abort) {
                  try {
                    that.xhr.abort();
                  } catch (x) {}

                  ;
                }

                that.unload_ref = that.xhr = null;
              };

              AbstractXHRObject.prototype.close = function () {
                var that = this;
                that.nuke();

                that._cleanup(true);
              };

              var XHRCorsObject = utils.XHRCorsObject = function () {
                var that = this,
                    args = arguments;
                utils.delay(function () {
                  that._start.apply(that, args);
                });
              };

              XHRCorsObject.prototype = new AbstractXHRObject();

              var XHRLocalObject = utils.XHRLocalObject = function (method, url, payload) {
                var that = this;
                utils.delay(function () {
                  that._start(method, url, payload, {
                    no_credentials: true
                  });
                });
              };

              XHRLocalObject.prototype = new AbstractXHRObject(); // References:
              //   http://ajaxian.com/archives/100-line-ajax-wrapper
              //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

              var XDRObject = utils.XDRObject = function (method, url, payload) {
                var that = this;
                utils.delay(function () {
                  that._start(method, url, payload);
                });
              };

              XDRObject.prototype = new EventEmitter(['chunk', 'finish']);

              XDRObject.prototype._start = function (method, url, payload) {
                var that = this;
                var xdr = new XDomainRequest(); // IE caches even POSTs

                url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();

                var onerror = xdr.ontimeout = xdr.onerror = function () {
                  that.emit('finish', 0, '');

                  that._cleanup(false);
                };

                xdr.onprogress = function () {
                  that.emit('chunk', 200, xdr.responseText);
                };

                xdr.onload = function () {
                  that.emit('finish', 200, xdr.responseText);

                  that._cleanup(false);
                };

                that.xdr = xdr;
                that.unload_ref = utils.unload_add(function () {
                  that._cleanup(true);
                });

                try {
                  // Fails with AccessDenied if port number is bogus
                  that.xdr.open(method, url);
                  that.xdr.send(payload);
                } catch (x) {
                  onerror();
                }
              };

              XDRObject.prototype._cleanup = function (abort) {
                var that = this;
                if (!that.xdr) return;
                utils.unload_del(that.unload_ref);
                that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress = that.xdr.onload = null;

                if (abort) {
                  try {
                    that.xdr.abort();
                  } catch (x) {}

                  ;
                }

                that.unload_ref = that.xdr = null;
              };

              XDRObject.prototype.close = function () {
                var that = this;
                that.nuke();

                that._cleanup(true);
              }; // 1. Is natively via XHR
              // 2. Is natively via XDR
              // 3. Nope, but postMessage is there so it should work via the Iframe.
              // 4. Nope, sorry.


              utils.isXHRCorsCapable = function () {
                if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {
                  return 1;
                } // XDomainRequest doesn't work if page is served from file://


                if (_window.XDomainRequest && _document.domain) {
                  return 2;
                }

                if (IframeTransport.enabled()) {
                  return 3;
                }

                return 4;
              }; //         [*] End of lib/dom2.js
              //         [*] Including lib/sockjs.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var SockJS = function (url, dep_protocols_whitelist, options) {
                if (!(this instanceof SockJS)) {
                  // makes `new` optional
                  return new SockJS(url, dep_protocols_whitelist, options);
                }

                var that = this,
                    protocols_whitelist;
                that._options = {
                  devel: false,
                  debug: false,
                  protocols_whitelist: [],
                  info: undefined,
                  rtt: undefined
                };

                if (options) {
                  utils.objectExtend(that._options, options);
                }

                that._base_url = utils.amendUrl(url);
                that._server = that._options.server || utils.random_number_string(1000);

                if (that._options.protocols_whitelist && that._options.protocols_whitelist.length) {
                  protocols_whitelist = that._options.protocols_whitelist;
                } else {
                  // Deprecated API
                  if (typeof dep_protocols_whitelist === 'string' && dep_protocols_whitelist.length > 0) {
                    protocols_whitelist = [dep_protocols_whitelist];
                  } else if (utils.isArray(dep_protocols_whitelist)) {
                    protocols_whitelist = dep_protocols_whitelist;
                  } else {
                    protocols_whitelist = null;
                  }

                  if (protocols_whitelist) {
                    that._debug('Deprecated API: Use "protocols_whitelist" option ' + 'instead of supplying protocol list as a second ' + 'parameter to SockJS constructor.');
                  }
                }

                that._protocols = [];
                that.protocol = null;
                that.readyState = SockJS.CONNECTING;
                that._ir = createInfoReceiver(that._base_url);

                that._ir.onfinish = function (info, rtt) {
                  that._ir = null;

                  if (info) {
                    if (that._options.info) {
                      // Override if user supplies the option
                      info = utils.objectExtend(info, that._options.info);
                    }

                    if (that._options.rtt) {
                      rtt = that._options.rtt;
                    }

                    that._applyInfo(info, rtt, protocols_whitelist);

                    that._didClose();
                  } else {
                    that._didClose(1002, 'Can\'t connect to server', true);
                  }
                };
              }; // Inheritance


              SockJS.prototype = new REventTarget();
              SockJS.version = "0.3.4";
              SockJS.CONNECTING = 0;
              SockJS.OPEN = 1;
              SockJS.CLOSING = 2;
              SockJS.CLOSED = 3;

              SockJS.prototype._debug = function () {
                if (this._options.debug) utils.log.apply(utils, arguments);
              };

              SockJS.prototype._dispatchOpen = function () {
                var that = this;

                if (that.readyState === SockJS.CONNECTING) {
                  if (that._transport_tref) {
                    clearTimeout(that._transport_tref);
                    that._transport_tref = null;
                  }

                  that.readyState = SockJS.OPEN;
                  that.dispatchEvent(new SimpleEvent("open"));
                } else {
                  // The server might have been restarted, and lost track of our
                  // connection.
                  that._didClose(1006, "Server lost session");
                }
              };

              SockJS.prototype._dispatchMessage = function (data) {
                var that = this;
                if (that.readyState !== SockJS.OPEN) return;
                that.dispatchEvent(new SimpleEvent("message", {
                  data: data
                }));
              };

              SockJS.prototype._dispatchHeartbeat = function (data) {
                var that = this;
                if (that.readyState !== SockJS.OPEN) return;
                that.dispatchEvent(new SimpleEvent('heartbeat', {}));
              };

              SockJS.prototype._didClose = function (code, reason, force) {
                var that = this;
                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN && that.readyState !== SockJS.CLOSING) throw new Error('INVALID_STATE_ERR');

                if (that._ir) {
                  that._ir.nuke();

                  that._ir = null;
                }

                if (that._transport) {
                  that._transport.doCleanup();

                  that._transport = null;
                }

                var close_event = new SimpleEvent("close", {
                  code: code,
                  reason: reason,
                  wasClean: utils.userSetCode(code)
                });

                if (!utils.userSetCode(code) && that.readyState === SockJS.CONNECTING && !force) {
                  if (that._try_next_protocol(close_event)) {
                    return;
                  }

                  close_event = new SimpleEvent("close", {
                    code: 2000,
                    reason: "All transports failed",
                    wasClean: false,
                    last_event: close_event
                  });
                }

                that.readyState = SockJS.CLOSED;
                utils.delay(function () {
                  that.dispatchEvent(close_event);
                });
              };

              SockJS.prototype._didMessage = function (data) {
                var that = this;
                var type = data.slice(0, 1);

                switch (type) {
                  case 'o':
                    that._dispatchOpen();

                    break;

                  case 'a':
                    var payload = JSON.parse(data.slice(1) || '[]');

                    for (var i = 0; i < payload.length; i++) {
                      that._dispatchMessage(payload[i]);
                    }

                    break;

                  case 'm':
                    var payload = JSON.parse(data.slice(1) || 'null');

                    that._dispatchMessage(payload);

                    break;

                  case 'c':
                    var payload = JSON.parse(data.slice(1) || '[]');

                    that._didClose(payload[0], payload[1]);

                    break;

                  case 'h':
                    that._dispatchHeartbeat();

                    break;
                }
              };

              SockJS.prototype._try_next_protocol = function (close_event) {
                var that = this;

                if (that.protocol) {
                  that._debug('Closed transport:', that.protocol, '' + close_event);

                  that.protocol = null;
                }

                if (that._transport_tref) {
                  clearTimeout(that._transport_tref);
                  that._transport_tref = null;
                }

                while (1) {
                  var protocol = that.protocol = that._protocols.shift();

                  if (!protocol) {
                    return false;
                  } // Some protocols require access to `body`, what if were in
                  // the `head`?


                  if (SockJS[protocol] && SockJS[protocol].need_body === true && (!_document.body || typeof _document.readyState !== 'undefined' && _document.readyState !== 'complete')) {
                    that._protocols.unshift(protocol);

                    that.protocol = 'waiting-for-load';
                    utils.attachEvent('load', function () {
                      that._try_next_protocol();
                    });
                    return true;
                  }

                  if (!SockJS[protocol] || !SockJS[protocol].enabled(that._options)) {
                    that._debug('Skipping transport:', protocol);
                  } else {
                    var roundTrips = SockJS[protocol].roundTrips || 1;
                    var to = (that._options.rto || 0) * roundTrips || 5000;
                    that._transport_tref = utils.delay(to, function () {
                      if (that.readyState === SockJS.CONNECTING) {
                        // I can't understand how it is possible to run
                        // this timer, when the state is CLOSED, but
                        // apparently in IE everythin is possible.
                        that._didClose(2007, "Transport timeouted");
                      }
                    });
                    var connid = utils.random_string(8);
                    var trans_url = that._base_url + '/' + that._server + '/' + connid;

                    that._debug('Opening transport:', protocol, ' url:' + trans_url, ' RTO:' + that._options.rto);

                    that._transport = new SockJS[protocol](that, trans_url, that._base_url);
                    return true;
                  }
                }
              };

              SockJS.prototype.close = function (code, reason) {
                var that = this;
                if (code && !utils.userSetCode(code)) throw new Error("INVALID_ACCESS_ERR");

                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN) {
                  return false;
                }

                that.readyState = SockJS.CLOSING;

                that._didClose(code || 1000, reason || "Normal closure");

                return true;
              };

              SockJS.prototype.send = function (data) {
                var that = this;
                if (that.readyState === SockJS.CONNECTING) throw new Error('INVALID_STATE_ERR');

                if (that.readyState === SockJS.OPEN) {
                  that._transport.doSend(utils.quote('' + data));
                }

                return true;
              };

              SockJS.prototype._applyInfo = function (info, rtt, protocols_whitelist) {
                var that = this;
                that._options.info = info;
                that._options.rtt = rtt;
                that._options.rto = utils.countRTO(rtt);
                that._options.info.null_origin = !_document.domain; // Servers can override base_url, eg to provide a randomized domain name and
                // avoid browser per-domain connection limits.

                if (info.base_url) // <METEOR>
                  that._base_url = utils.amendUrl(info.base_url, that._base_url); // </METEOR>

                var probed = utils.probeProtocols();
                that._protocols = utils.detectProtocols(probed, protocols_whitelist, info); // <METEOR>
                // https://github.com/sockjs/sockjs-client/issues/79
                // Hack to avoid XDR when using different protocols
                // We're on IE trying to do cross-protocol. jsonp only.

                if (!utils.isSameOriginScheme(that._base_url) && 2 === utils.isXHRCorsCapable()) {
                  that._protocols = ['jsonp-polling'];
                } // </METEOR>
              }; //         [*] End of lib/sockjs.js
              //         [*] Including lib/trans-websocket.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var WebSocketTransport = SockJS.websocket = function (ri, trans_url) {
                var that = this;
                var url = trans_url + '/websocket';

                if (url.slice(0, 5) === 'https') {
                  url = 'wss' + url.slice(5);
                } else {
                  url = 'ws' + url.slice(4);
                }

                that.ri = ri;
                that.url = url;
                var Constructor = _window.WebSocket || _window.MozWebSocket;
                that.ws = new Constructor(that.url);

                that.ws.onmessage = function (e) {
                  that.ri._didMessage(e.data);
                }; // Firefox has an interesting bug. If a websocket connection is
                // created after onunload, it stays alive even when user
                // navigates away from the page. In such situation let's lie -
                // let's not open the ws connection at all. See:
                // https://github.com/sockjs/sockjs-client/issues/28
                // https://bugzilla.mozilla.org/show_bug.cgi?id=696085


                that.unload_ref = utils.unload_add(function () {
                  that.ws.close();
                });

                that.ws.onclose = function () {
                  that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken"));
                };
              };

              WebSocketTransport.prototype.doSend = function (data) {
                this.ws.send('[' + data + ']');
              };

              WebSocketTransport.prototype.doCleanup = function () {
                var that = this;
                var ws = that.ws;

                if (ws) {
                  ws.onmessage = ws.onclose = null;
                  ws.close();
                  utils.unload_del(that.unload_ref);
                  that.unload_ref = that.ri = that.ws = null;
                }
              };

              WebSocketTransport.enabled = function () {
                return !!(_window.WebSocket || _window.MozWebSocket);
              }; // In theory, ws should require 1 round trip. But in chrome, this is
              // not very stable over SSL. Most likely a ws connection requires a
              // separate SSL connection, in which case 2 round trips are an
              // absolute minumum.


              WebSocketTransport.roundTrips = 2; //         [*] End of lib/trans-websocket.js
              //         [*] Including lib/trans-sender.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var BufferedSender = function () {};

              BufferedSender.prototype.send_constructor = function (sender) {
                var that = this;
                that.send_buffer = [];
                that.sender = sender;
              };

              BufferedSender.prototype.doSend = function (message) {
                var that = this;
                that.send_buffer.push(message);

                if (!that.send_stop) {
                  that.send_schedule();
                }
              }; // For polling transports in a situation when in the message callback,
              // new message is being send. If the sending connection was started
              // before receiving one, it is possible to saturate the network and
              // timeout due to the lack of receiving socket. To avoid that we delay
              // sending messages by some small time, in order to let receiving
              // connection be started beforehand. This is only a halfmeasure and
              // does not fix the big problem, but it does make the tests go more
              // stable on slow networks.


              BufferedSender.prototype.send_schedule_wait = function () {
                var that = this;
                var tref;

                that.send_stop = function () {
                  that.send_stop = null;
                  clearTimeout(tref);
                };

                tref = utils.delay(25, function () {
                  that.send_stop = null;
                  that.send_schedule();
                });
              };

              BufferedSender.prototype.send_schedule = function () {
                var that = this;

                if (that.send_buffer.length > 0) {
                  var payload = '[' + that.send_buffer.join(',') + ']';
                  that.send_stop = that.sender(that.trans_url, payload, function (success, abort_reason) {
                    that.send_stop = null;

                    if (success === false) {
                      that.ri._didClose(1006, 'Sending error ' + abort_reason);
                    } else {
                      that.send_schedule_wait();
                    }
                  });
                  that.send_buffer = [];
                }
              };

              BufferedSender.prototype.send_destructor = function () {
                var that = this;

                if (that._send_stop) {
                  that._send_stop();
                }

                that._send_stop = null;
              };

              var jsonPGenericSender = function (url, payload, callback) {
                var that = this;

                if (!('_send_form' in that)) {
                  var form = that._send_form = _document.createElement('form');

                  var area = that._send_area = _document.createElement('textarea');

                  area.name = 'd';
                  form.style.display = 'none';
                  form.style.position = 'absolute';
                  form.method = 'POST';
                  form.enctype = 'application/x-www-form-urlencoded';
                  form.acceptCharset = "UTF-8";
                  form.appendChild(area);

                  _document.body.appendChild(form);
                }

                var form = that._send_form;
                var area = that._send_area;
                var id = 'a' + utils.random_string(8);
                form.target = id;
                form.action = url + '/jsonp_send?i=' + id;
                var iframe;

                try {
                  // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
                  iframe = _document.createElement('<iframe name="' + id + '">');
                } catch (x) {
                  iframe = _document.createElement('iframe');
                  iframe.name = id;
                }

                iframe.id = id;
                form.appendChild(iframe);
                iframe.style.display = 'none';

                try {
                  area.value = payload;
                } catch (e) {
                  utils.log('Your browser is seriously broken. Go home! ' + e.message);
                }

                form.submit();

                var completed = function (e) {
                  if (!iframe.onerror) return;
                  iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
                  // immediately, thus this timeout.

                  utils.delay(500, function () {
                    iframe.parentNode.removeChild(iframe);
                    iframe = null;
                  });
                  area.value = ''; // It is not possible to detect if the iframe succeeded or
                  // failed to submit our form.

                  callback(true);
                };

                iframe.onerror = iframe.onload = completed;

                iframe.onreadystatechange = function (e) {
                  if (iframe.readyState == 'complete') completed();
                };

                return completed;
              };

              var createAjaxSender = function (AjaxObject) {
                return function (url, payload, callback) {
                  var xo = new AjaxObject('POST', url + '/xhr_send', payload);

                  xo.onfinish = function (status, text) {
                    callback(status === 200 || status === 204, 'http status ' + status);
                  };

                  return function (abort_reason) {
                    callback(false, abort_reason);
                  };
                };
              }; //         [*] End of lib/trans-sender.js
              //         [*] Including lib/trans-jsonp-receiver.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // Parts derived from Socket.io:
              //    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js
              // and jQuery-JSONP:
              //    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js


              var jsonPGenericReceiver = function (url, callback) {
                var tref;

                var script = _document.createElement('script');

                var script2; // Opera synchronous load trick.

                var close_script = function (frame) {
                  if (script2) {
                    script2.parentNode.removeChild(script2);
                    script2 = null;
                  }

                  if (script) {
                    clearTimeout(tref); // Unfortunately, you can't really abort script loading of
                    // the script.

                    script.parentNode.removeChild(script);
                    script.onreadystatechange = script.onerror = script.onload = script.onclick = null;
                    script = null;
                    callback(frame);
                    callback = null;
                  }
                }; // IE9 fires 'error' event after orsc or before, in random order.


                var loaded_okay = false;
                var error_timer = null;
                script.id = 'a' + utils.random_string(8);
                script.src = url;
                script.type = 'text/javascript';
                script.charset = 'UTF-8';

                script.onerror = function (e) {
                  if (!error_timer) {
                    // Delay firing close_script.
                    error_timer = setTimeout(function () {
                      if (!loaded_okay) {
                        close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onerror)"));
                      }
                    }, 1000);
                  }
                };

                script.onload = function (e) {
                  close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)"));
                };

                script.onreadystatechange = function (e) {
                  if (/loaded|closed/.test(script.readyState)) {
                    if (script && script.htmlFor && script.onclick) {
                      loaded_okay = true;

                      try {
                        // In IE, actually execute the script.
                        script.onclick();
                      } catch (x) {}
                    }

                    if (script) {
                      close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)"));
                    }
                  }
                }; // IE: event/htmlFor/onclick trick.
                // One can't rely on proper order for onreadystatechange. In order to
                // make sure, set a 'htmlFor' and 'event' properties, so that
                // script code will be installed as 'onclick' handler for the
                // script object. Later, onreadystatechange, manually execute this
                // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
                // set. For reference see:
                //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
                // Also, read on that about script ordering:
                //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order


                if (typeof script.async === 'undefined' && _document.attachEvent) {
                  // According to mozilla docs, in recent browsers script.async defaults
                  // to 'true', so we may use it to detect a good browser:
                  // https://developer.mozilla.org/en/HTML/Element/script
                  if (!/opera/i.test(navigator.userAgent)) {
                    // Naively assume we're in IE
                    try {
                      script.htmlFor = script.id;
                      script.event = "onclick";
                    } catch (x) {}

                    script.async = true;
                  } else {
                    // Opera, second sync script hack
                    script2 = _document.createElement('script');
                    script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
                    script.async = script2.async = false;
                  }
                }

                if (typeof script.async !== 'undefined') {
                  script.async = true;
                } // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.


                tref = setTimeout(function () {
                  close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)"));
                }, 35000);

                var head = _document.getElementsByTagName('head')[0];

                head.insertBefore(script, head.firstChild);

                if (script2) {
                  head.insertBefore(script2, head.firstChild);
                }

                return close_script;
              }; //         [*] End of lib/trans-jsonp-receiver.js
              //         [*] Including lib/trans-jsonp-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // The simplest and most robust transport, using the well-know cross
              // domain hack - JSONP. This transport is quite inefficient - one
              // mssage could use up to one http request. But at least it works almost
              // everywhere.
              // Known limitations:
              //   o you will get a spinning cursor
              //   o for Konqueror a dumb timer is needed to detect errors


              var JsonPTransport = SockJS['jsonp-polling'] = function (ri, trans_url) {
                utils.polluteGlobalNamespace();
                var that = this;
                that.ri = ri;
                that.trans_url = trans_url;
                that.send_constructor(jsonPGenericSender);

                that._schedule_recv();
              }; // Inheritnace


              JsonPTransport.prototype = new BufferedSender();

              JsonPTransport.prototype._schedule_recv = function () {
                var that = this;

                var callback = function (data) {
                  that._recv_stop = null;

                  if (data) {
                    // no data - heartbeat;
                    if (!that._is_closing) {
                      that.ri._didMessage(data);
                    }
                  } // The message can be a close message, and change is_closing state.


                  if (!that._is_closing) {
                    that._schedule_recv();
                  }
                };

                that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp', jsonPGenericReceiver, callback);
              };

              JsonPTransport.enabled = function () {
                return true;
              };

              JsonPTransport.need_body = true;

              JsonPTransport.prototype.doCleanup = function () {
                var that = this;
                that._is_closing = true;

                if (that._recv_stop) {
                  that._recv_stop();
                }

                that.ri = that._recv_stop = null;
                that.send_destructor();
              }; // Abstract away code that handles global namespace pollution.


              var jsonPReceiverWrapper = function (url, constructReceiver, user_callback) {
                var id = 'a' + utils.random_string(6);
                var url_id = url + '?c=' + escape(WPrefix + '.' + id); // Unfortunately it is not possible to abort loading of the
                // script. We need to keep track of frake close frames.

                var aborting = 0; // Callback will be called exactly once.

                var callback = function (frame) {
                  switch (aborting) {
                    case 0:
                      // Normal behaviour - delete hook _and_ emit message.
                      delete _window[WPrefix][id];
                      user_callback(frame);
                      break;

                    case 1:
                      // Fake close frame - emit but don't delete hook.
                      user_callback(frame);
                      aborting = 2;
                      break;

                    case 2:
                      // Got frame after connection was closed, delete hook, don't emit.
                      delete _window[WPrefix][id];
                      break;
                  }
                };

                var close_script = constructReceiver(url_id, callback);
                _window[WPrefix][id] = close_script;

                var stop = function () {
                  if (_window[WPrefix][id]) {
                    aborting = 1;

                    _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read"));
                  }
                };

                return stop;
              }; //         [*] End of lib/trans-jsonp-polling.js
              //         [*] Including lib/trans-xhr.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var AjaxBasedTransport = function () {};

              AjaxBasedTransport.prototype = new BufferedSender();

              AjaxBasedTransport.prototype.run = function (ri, trans_url, url_suffix, Receiver, AjaxObject) {
                var that = this;
                that.ri = ri;
                that.trans_url = trans_url;
                that.send_constructor(createAjaxSender(AjaxObject));
                that.poll = new Polling(ri, Receiver, trans_url + url_suffix, AjaxObject);
              };

              AjaxBasedTransport.prototype.doCleanup = function () {
                var that = this;

                if (that.poll) {
                  that.poll.abort();
                  that.poll = null;
                }
              }; // xhr-streaming


              var XhrStreamingTransport = SockJS['xhr-streaming'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);
              };

              XhrStreamingTransport.prototype = new AjaxBasedTransport();

              XhrStreamingTransport.enabled = function () {
                // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but
                // doesn't do streaming.
                return _window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest() && !/opera/i.test(navigator.userAgent);
              };

              XhrStreamingTransport.roundTrips = 2; // preflight, ajax
              // Safari gets confused when a streaming ajax request is started
              // before onload. This causes the load indicator to spin indefinetely.

              XhrStreamingTransport.need_body = true; // According to:
              //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
              //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/
              // xdr-streaming

              var XdrStreamingTransport = SockJS['xdr-streaming'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);
              };

              XdrStreamingTransport.prototype = new AjaxBasedTransport();

              XdrStreamingTransport.enabled = function () {
                return !!_window.XDomainRequest;
              };

              XdrStreamingTransport.roundTrips = 2; // preflight, ajax
              // xhr-polling

              var XhrPollingTransport = SockJS['xhr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);
              };

              XhrPollingTransport.prototype = new AjaxBasedTransport();
              XhrPollingTransport.enabled = XhrStreamingTransport.enabled;
              XhrPollingTransport.roundTrips = 2; // preflight, ajax
              // xdr-polling

              var XdrPollingTransport = SockJS['xdr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);
              };

              XdrPollingTransport.prototype = new AjaxBasedTransport();
              XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
              XdrPollingTransport.roundTrips = 2; // preflight, ajax
              //         [*] End of lib/trans-xhr.js
              //         [*] Including lib/trans-iframe.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // Few cool transports do work only for same-origin. In order to make
              // them working cross-domain we shall use iframe, served form the
              // remote domain. New browsers, have capabilities to communicate with
              // cross domain iframe, using postMessage(). In IE it was implemented
              // from IE 8+, but of course, IE got some details wrong:
              //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
              //    http://stevesouders.com/misc/test-postmessage.php

              var IframeTransport = function () {};

              IframeTransport.prototype.i_constructor = function (ri, trans_url, base_url) {
                var that = this;
                that.ri = ri;
                that.origin = utils.getOrigin(base_url);
                that.base_url = base_url;
                that.trans_url = trans_url;
                var iframe_url = base_url + '/iframe.html';

                if (that.ri._options.devel) {
                  iframe_url += '?t=' + +new Date();
                }

                that.window_id = utils.random_string(8);
                iframe_url += '#' + that.window_id;
                that.iframeObj = utils.createIframe(iframe_url, function (r) {
                  that.ri._didClose(1006, "Unable to load an iframe (" + r + ")");
                });
                that.onmessage_cb = utils.bind(that.onmessage, that);
                utils.attachMessage(that.onmessage_cb);
              };

              IframeTransport.prototype.doCleanup = function () {
                var that = this;

                if (that.iframeObj) {
                  utils.detachMessage(that.onmessage_cb);

                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (that.iframeObj.iframe.contentWindow) {
                      that.postMessage('c');
                    }
                  } catch (x) {}

                  that.iframeObj.cleanup();
                  that.iframeObj = null;
                  that.onmessage_cb = that.iframeObj = null;
                }
              };

              IframeTransport.prototype.onmessage = function (e) {
                var that = this;
                if (e.origin !== that.origin) return;
                var window_id = e.data.slice(0, 8);
                var type = e.data.slice(8, 9);
                var data = e.data.slice(9);
                if (window_id !== that.window_id) return;

                switch (type) {
                  case 's':
                    that.iframeObj.loaded();
                    that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));
                    break;

                  case 't':
                    that.ri._didMessage(data);

                    break;
                }
              };

              IframeTransport.prototype.postMessage = function (type, data) {
                var that = this;
                that.iframeObj.post(that.window_id + type + (data || ''), that.origin);
              };

              IframeTransport.prototype.doSend = function (message) {
                this.postMessage('m', message);
              };

              IframeTransport.enabled = function () {
                // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
                // huge delay, or not at all.
                var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;
                return (typeof _window.postMessage === 'function' || typeof _window.postMessage === 'object') && !konqueror;
              }; //         [*] End of lib/trans-iframe.js
              //         [*] Including lib/trans-iframe-within.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var curr_window_id;

              var postMessage = function (type, data) {
                if (parent !== _window) {
                  parent.postMessage(curr_window_id + type + (data || ''), '*');
                } else {
                  utils.log("Can't postMessage, no parent window.", type, data);
                }
              };

              var FacadeJS = function () {};

              FacadeJS.prototype._didClose = function (code, reason) {
                postMessage('t', utils.closeFrame(code, reason));
              };

              FacadeJS.prototype._didMessage = function (frame) {
                postMessage('t', frame);
              };

              FacadeJS.prototype._doSend = function (data) {
                this._transport.doSend(data);
              };

              FacadeJS.prototype._doCleanup = function () {
                this._transport.doCleanup();
              };

              utils.parent_origin = undefined;

              SockJS.bootstrap_iframe = function () {
                var facade;
                curr_window_id = _document.location.hash.slice(1);

                var onMessage = function (e) {
                  if (e.source !== parent) return;
                  if (typeof utils.parent_origin === 'undefined') utils.parent_origin = e.origin;
                  if (e.origin !== utils.parent_origin) return;
                  var window_id = e.data.slice(0, 8);
                  var type = e.data.slice(8, 9);
                  var data = e.data.slice(9);
                  if (window_id !== curr_window_id) return;

                  switch (type) {
                    case 's':
                      var p = JSON.parse(data);
                      var version = p[0];
                      var protocol = p[1];
                      var trans_url = p[2];
                      var base_url = p[3];

                      if (version !== SockJS.version) {
                        utils.log("Incompatibile SockJS! Main site uses:" + " \"" + version + "\", the iframe:" + " \"" + SockJS.version + "\".");
                      }

                      if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {
                        utils.log("Only basic urls are supported in SockJS");
                        return;
                      }

                      if (!utils.isSameOriginUrl(trans_url) || !utils.isSameOriginUrl(base_url)) {
                        utils.log("Can't connect to different domain from within an " + "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) + ")");
                        return;
                      }

                      facade = new FacadeJS();
                      facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);
                      break;

                    case 'm':
                      facade._doSend(data);

                      break;

                    case 'c':
                      if (facade) facade._doCleanup();
                      facade = null;
                      break;
                  }
                }; // alert('test ticker');
                // facade = new FacadeJS();
                // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');


                utils.attachMessage(onMessage); // Start

                postMessage('s');
              }; //         [*] End of lib/trans-iframe-within.js
              //         [*] Including lib/info.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var InfoReceiver = function (base_url, AjaxObject) {
                var that = this;
                utils.delay(function () {
                  that.doXhr(base_url, AjaxObject);
                });
              };

              InfoReceiver.prototype = new EventEmitter(['finish']);

              InfoReceiver.prototype.doXhr = function (base_url, AjaxObject) {
                var that = this;
                var t0 = new Date().getTime(); // <METEOR>
                // https://github.com/sockjs/sockjs-client/pull/129
                // var xo = new AjaxObject('GET', base_url + '/info');

                var xo = new AjaxObject( // add cachebusting parameter to url to work around a chrome bug:
                // https://code.google.com/p/chromium/issues/detail?id=263981
                // or misbehaving proxies.
                'GET', base_url + '/info?cb=' + utils.random_string(10)); // </METEOR>

                var tref = utils.delay(8000, function () {
                  xo.ontimeout();
                });

                xo.onfinish = function (status, text) {
                  clearTimeout(tref);
                  tref = null;

                  if (status === 200) {
                    var rtt = new Date().getTime() - t0;
                    var info = JSON.parse(text);
                    if (typeof info !== 'object') info = {};
                    that.emit('finish', info, rtt);
                  } else {
                    that.emit('finish');
                  }
                };

                xo.ontimeout = function () {
                  xo.close();
                  that.emit('finish');
                };
              };

              var InfoReceiverIframe = function (base_url) {
                var that = this;

                var go = function () {
                  var ifr = new IframeTransport();
                  ifr.protocol = 'w-iframe-info-receiver';

                  var fun = function (r) {
                    if (typeof r === 'string' && r.substr(0, 1) === 'm') {
                      var d = JSON.parse(r.substr(1));
                      var info = d[0],
                          rtt = d[1];
                      that.emit('finish', info, rtt);
                    } else {
                      that.emit('finish');
                    }

                    ifr.doCleanup();
                    ifr = null;
                  };

                  var mock_ri = {
                    _options: {},
                    _didClose: fun,
                    _didMessage: fun
                  };
                  ifr.i_constructor(mock_ri, base_url, base_url);
                };

                if (!_document.body) {
                  utils.attachEvent('load', go);
                } else {
                  go();
                }
              };

              InfoReceiverIframe.prototype = new EventEmitter(['finish']);

              var InfoReceiverFake = function () {
                // It may not be possible to do cross domain AJAX to get the info
                // data, for example for IE7. But we want to run JSONP, so let's
                // fake the response, with rtt=2s (rto=6s).
                var that = this;
                utils.delay(function () {
                  that.emit('finish', {}, 2000);
                });
              };

              InfoReceiverFake.prototype = new EventEmitter(['finish']);

              var createInfoReceiver = function (base_url) {
                if (utils.isSameOriginUrl(base_url)) {
                  // If, for some reason, we have SockJS locally - there's no
                  // need to start up the complex machinery. Just use ajax.
                  return new InfoReceiver(base_url, utils.XHRLocalObject);
                }

                switch (utils.isXHRCorsCapable()) {
                  case 1:
                    // XHRLocalObject -> no_credentials=true
                    return new InfoReceiver(base_url, utils.XHRLocalObject);

                  case 2:
                    // <METEOR>
                    // https://github.com/sockjs/sockjs-client/issues/79
                    // XDR doesn't work across different schemes
                    // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
                    if (utils.isSameOriginScheme(base_url)) return new InfoReceiver(base_url, utils.XDRObject);else return new InfoReceiverFake();
                  // </METEOR>

                  case 3:
                    // Opera
                    return new InfoReceiverIframe(base_url);

                  default:
                    // IE 7
                    return new InfoReceiverFake();
                }

                ;
              };

              var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function (ri, _trans_url, base_url) {
                var ir = new InfoReceiver(base_url, utils.XHRLocalObject);

                ir.onfinish = function (info, rtt) {
                  ri._didMessage('m' + JSON.stringify([info, rtt]));

                  ri._didClose();
                };
              };

              WInfoReceiverIframe.prototype.doCleanup = function () {}; //         [*] End of lib/info.js
              //         [*] Including lib/trans-iframe-eventsource.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {
                var that = this;
                that.protocol = 'w-iframe-eventsource';
                that.i_constructor.apply(that, arguments);
              };

              EventSourceIframeTransport.prototype = new IframeTransport();

              EventSourceIframeTransport.enabled = function () {
                return 'EventSource' in _window && IframeTransport.enabled();
              };

              EventSourceIframeTransport.need_body = true;
              EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource
              // w-iframe-eventsource

              var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);
              };

              EventSourceTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-eventsource.js
              //         [*] Including lib/trans-iframe-xhr-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {
                var that = this;
                that.protocol = 'w-iframe-xhr-polling';
                that.i_constructor.apply(that, arguments);
              };

              XhrPollingIframeTransport.prototype = new IframeTransport();

              XhrPollingIframeTransport.enabled = function () {
                return _window.XMLHttpRequest && IframeTransport.enabled();
              };

              XhrPollingIframeTransport.need_body = true;
              XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr
              // w-iframe-xhr-polling

              var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);
              };

              XhrPollingITransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-xhr-polling.js
              //         [*] Including lib/trans-iframe-htmlfile.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // This transport generally works in any browser, but will cause a
              // spinning cursor to appear in any browser other than IE.
              // We may test this transport in all browsers - why not, but in
              // production it should be only run in IE.

              var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {
                var that = this;
                that.protocol = 'w-iframe-htmlfile';
                that.i_constructor.apply(that, arguments);
              }; // Inheritance.


              HtmlFileIframeTransport.prototype = new IframeTransport();

              HtmlFileIframeTransport.enabled = function () {
                return IframeTransport.enabled();
              };

              HtmlFileIframeTransport.need_body = true;
              HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile
              // w-iframe-htmlfile

              var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);
              };

              HtmlFileTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-htmlfile.js
              //         [*] Including lib/trans-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var Polling = function (ri, Receiver, recv_url, AjaxObject) {
                var that = this;
                that.ri = ri;
                that.Receiver = Receiver;
                that.recv_url = recv_url;
                that.AjaxObject = AjaxObject;

                that._scheduleRecv();
              };

              Polling.prototype._scheduleRecv = function () {
                var that = this;
                var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);
                var msg_counter = 0;

                poll.onmessage = function (e) {
                  msg_counter += 1;

                  that.ri._didMessage(e.data);
                };

                poll.onclose = function (e) {
                  that.poll = poll = poll.onmessage = poll.onclose = null;

                  if (!that.poll_is_closing) {
                    if (e.reason === 'permanent') {
                      that.ri._didClose(1006, 'Polling error (' + e.reason + ')');
                    } else {
                      that._scheduleRecv();
                    }
                  }
                };
              };

              Polling.prototype.abort = function () {
                var that = this;
                that.poll_is_closing = true;

                if (that.poll) {
                  that.poll.abort();
                }
              }; //         [*] End of lib/trans-polling.js
              //         [*] Including lib/trans-receiver-eventsource.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventSourceReceiver = function (url) {
                var that = this;
                var es = new EventSource(url);

                es.onmessage = function (e) {
                  that.dispatchEvent(new SimpleEvent('message', {
                    'data': unescape(e.data)
                  }));
                };

                that.es_close = es.onerror = function (e, abort_reason) {
                  // ES on reconnection has readyState = 0 or 1.
                  // on network error it's CLOSED = 2
                  var reason = abort_reason ? 'user' : es.readyState !== 2 ? 'network' : 'permanent';
                  that.es_close = es.onmessage = es.onerror = null; // EventSource reconnects automatically.

                  es.close();
                  es = null; // Safari and chrome < 15 crash if we close window before
                  // waiting for ES cleanup. See:
                  //   https://code.google.com/p/chromium/issues/detail?id=89155

                  utils.delay(200, function () {
                    that.dispatchEvent(new SimpleEvent('close', {
                      reason: reason
                    }));
                  });
                };
              };

              EventSourceReceiver.prototype = new REventTarget();

              EventSourceReceiver.prototype.abort = function () {
                var that = this;

                if (that.es_close) {
                  that.es_close({}, true);
                }
              }; //         [*] End of lib/trans-receiver-eventsource.js
              //         [*] Including lib/trans-receiver-htmlfile.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var _is_ie_htmlfile_capable;

              var isIeHtmlfileCapable = function () {
                if (_is_ie_htmlfile_capable === undefined) {
                  if ('ActiveXObject' in _window) {
                    try {
                      _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');
                    } catch (x) {}
                  } else {
                    _is_ie_htmlfile_capable = false;
                  }
                }

                return _is_ie_htmlfile_capable;
              };

              var HtmlfileReceiver = function (url) {
                var that = this;
                utils.polluteGlobalNamespace();
                that.id = 'a' + utils.random_string(6, 26);
                url += (url.indexOf('?') === -1 ? '?' : '&') + 'c=' + escape(WPrefix + '.' + that.id);
                var constructor = isIeHtmlfileCapable() ? utils.createHtmlfile : utils.createIframe;
                var iframeObj;
                _window[WPrefix][that.id] = {
                  start: function () {
                    iframeObj.loaded();
                  },
                  message: function (data) {
                    that.dispatchEvent(new SimpleEvent('message', {
                      'data': data
                    }));
                  },
                  stop: function () {
                    that.iframe_close({}, 'network');
                  }
                };

                that.iframe_close = function (e, abort_reason) {
                  iframeObj.cleanup();
                  that.iframe_close = iframeObj = null;
                  delete _window[WPrefix][that.id];
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: abort_reason
                  }));
                };

                iframeObj = constructor(url, function (e) {
                  that.iframe_close({}, 'permanent');
                });
              };

              HtmlfileReceiver.prototype = new REventTarget();

              HtmlfileReceiver.prototype.abort = function () {
                var that = this;

                if (that.iframe_close) {
                  that.iframe_close({}, 'user');
                }
              }; //         [*] End of lib/trans-receiver-htmlfile.js
              //         [*] Including lib/trans-receiver-xhr.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var XhrReceiver = function (url, AjaxObject) {
                var that = this;
                var buf_pos = 0;
                that.xo = new AjaxObject('POST', url, null);

                that.xo.onchunk = function (status, text) {
                  if (status !== 200) return;

                  while (1) {
                    var buf = text.slice(buf_pos);
                    var p = buf.indexOf('\n');
                    if (p === -1) break;
                    buf_pos += p + 1;
                    var msg = buf.slice(0, p);
                    that.dispatchEvent(new SimpleEvent('message', {
                      data: msg
                    }));
                  }
                };

                that.xo.onfinish = function (status, text) {
                  that.xo.onchunk(status, text);
                  that.xo = null;
                  var reason = status === 200 ? 'network' : 'permanent';
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: reason
                  }));
                };
              };

              XhrReceiver.prototype = new REventTarget();

              XhrReceiver.prototype.abort = function () {
                var that = this;

                if (that.xo) {
                  that.xo.close();
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: 'user'
                  }));
                  that.xo = null;
                }
              }; //         [*] End of lib/trans-receiver-xhr.js
              //         [*] Including lib/test-hooks.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // For testing


              SockJS.getUtils = function () {
                return utils;
              };

              SockJS.getIframeTransport = function () {
                return IframeTransport;
              }; //         [*] End of lib/test-hooks.js


              return SockJS;
            }();

            if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1); // AMD compliance

            if (typeof define === 'function' && define.amd) {
              define('sockjs', [], function () {
                return SockJS;
              });
            } //     [*] End of lib/index.js
            // [*] End of lib/all.js
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "urls.js": function (_require5, _exports3, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/urls.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              toSockjsUrl: () => toSockjsUrl,
              toWebsocketUrl: () => toWebsocketUrl
            });

            // @param url {String} URL to Meteor app, eg:
            //   "/" or "madewith.meteor.com" or "https://foo.meteor.com"
            //   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"
            // @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.
            // for scheme "http" and subPath "sockjs"
            //   "http://subdomain.meteor.com/sockjs" or "/sockjs"
            //   or "https://ddp--1234-foo.meteor.com/sockjs"
            function translateUrl(url, newSchemeBase, subPath) {
              if (!newSchemeBase) {
                newSchemeBase = 'http';
              }

              if (subPath !== "sockjs" && url.startsWith("/")) {
                url = Meteor.absoluteUrl(url.substr(1));
              }

              var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//);
              var httpUrlMatch = url.match(/^http(s?):\/\//);
              var newScheme;

              if (ddpUrlMatch) {
                // Remove scheme and split off the host.
                var urlAfterDDP = url.substr(ddpUrlMatch[0].length);
                newScheme = ddpUrlMatch[1] === 'i' ? newSchemeBase : newSchemeBase + 's';
                var slashPos = urlAfterDDP.indexOf('/');
                var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);
                var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos); // In the host (ONLY!), change '*' characters into random digits. This
                // allows different stream connections to connect to different hostnames
                // and avoid browser per-hostname connection limits.

                host = host.replace(/\*/g, () => Math.floor(Math.random() * 10));
                return newScheme + '://' + host + rest;
              } else if (httpUrlMatch) {
                newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + 's';
                var urlAfterHttp = url.substr(httpUrlMatch[0].length);
                url = newScheme + '://' + urlAfterHttp;
              } // Prefix FQDNs but not relative URLs


              if (url.indexOf('://') === -1 && !url.startsWith('/')) {
                url = newSchemeBase + '://' + url;
              } // XXX This is not what we should be doing: if I have a site
              // deployed at "/foo", then DDP.connect("/") should actually connect
              // to "/", not to "/foo". "/" is an absolute path. (Contrast: if
              // deployed at "/foo", it would be reasonable for DDP.connect("bar")
              // to connect to "/foo/bar").
              //
              // We should make this properly honor absolute paths rather than
              // forcing the path to be relative to the site root. Simultaneously,
              // we should set DDP_DEFAULT_CONNECTION_URL to include the site
              // root. See also client_convenience.js #RationalizingRelativeDDPURLs


              url = Meteor._relativeToSiteRootUrl(url);
              if (url.endsWith('/')) return url + subPath;else return url + '/' + subPath;
            }

            function toSockjsUrl(url) {
              return translateUrl(url, 'http', 'sockjs');
            }

            function toWebsocketUrl(url) {
              return translateUrl(url, 'ws', 'websocket');
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  /* Exports */
  Package._define("socket-stream-client");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var IdMap = Package['id-map'].IdMap;
  var Hook = Package['callback-hook'].Hook;
  var DDPCommon = Package['ddp-common'].DDPCommon;
  var Reload = Package.reload.Reload;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, DDP;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ddp-client": { "client": { "client.js": function (_require, _exports, _module) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/client/client.js                                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module.link("../common/namespace.js", {
                DDP: "DDP"
              }, 0);
              _module.link("../common/livedata_connection");
              _module.link("./client_convenience");
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "client_convenience.js": function (_require3, _exports3, _module2) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/client/client_convenience.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              let DDP;
              _module2.link("../common/namespace.js", {
                DDP(v) {
                  DDP = v;
                }

              }, 0);
              let Meteor;
              _module2.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 1);

              // Meteor.refresh can be called on the client (if you're in common code) but it
              // only has an effect on the server.
              Meteor.refresh = () => {}; // By default, try to connect back to the same endpoint as the page
              // was served from.
              //
              // XXX We should be doing this a different way. Right now we don't
              // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't
              // include it on the server when computing
              // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our
              // default, '/'.) We get by with this because DDP.connect then
              // forces the URL passed to it to be interpreted relative to the
              // app's deploy path, even if it is absolute. Instead, we should
              // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;
              // make the default ddpUrl be '' rather that '/'; and make
              // _translateUrl in stream_client_common.js not force absolute paths
              // to be treated like relative paths. See also
              // stream_client_common.js #RationalizingRelativeDDPURLs


              var ddpUrl = '/';

              if (typeof __meteor_runtime_config__ !== 'undefined') {
                if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL) ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;
              }

              var retry = new Retry();

              function onDDPVersionNegotiationFailure(description) {
                Meteor._debug(description);

                if (Package.reload) {
                  var migrationData = Package.reload.Reload._migrationData('livedata') || Object.create(null);
                  var failures = migrationData.DDPVersionNegotiationFailures || 0;
                  ++failures;

                  Package.reload.Reload._onMigrate('livedata', () => {
                    return [true, {
                      DDPVersionNegotiationFailures: failures
                    }];
                  });

                  retry.retryLater(failures, () => {
                    Package.reload.Reload._reload();
                  });
                }
              }

              Meteor.connection = DDP.connect(ddpUrl, {
                onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure
              }); // Proxy the public methods of Meteor.connection so they can
              // be called directly on Meteor.

              ['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect', 'disconnect'].forEach(name => {
                Meteor[name] = Meteor.connection[name].bind(Meteor.connection);
              }); // Meteor.connection used to be called
              // Meteor.default_connection. Provide backcompat as a courtesy even
              // though it was never documented.
              // XXX COMPAT WITH 0.6.4

              Meteor.default_connection = Meteor.connection; // We should transition from Meteor.connect to DDP.connect.
              // XXX COMPAT WITH 0.6.4

              Meteor.connect = DDP.connect;
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "common": { "MethodInvoker.js": function (_require4, _exports4, _module3) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/MethodInvoker.js                                                                         //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module3.export({
                default: () => MethodInvoker
              });

              class MethodInvoker {
                constructor(options) {
                  // Public (within this file) fields.
                  this.methodId = options.methodId;
                  this.sentMessage = false;
                  this._callback = options.callback;
                  this._connection = options.connection;
                  this._message = options.message;

                  this._onResultReceived = options.onResultReceived || (() => {});

                  this._wait = options.wait;
                  this.noRetry = options.noRetry;
                  this._methodResult = null;
                  this._dataVisible = false; // Register with the connection.

                  this._connection._methodInvokers[this.methodId] = this;
                } // Sends the method message to the server. May be called additional times if
                // we lose the connection and reconnect before receiving a result.


                sendMessage() {
                  // This function is called before sending a method (including resending on
                  // reconnect). We should only (re)send methods where we don't already have a
                  // result!
                  if (this.gotResult()) throw new Error('sendingMethod is called on method with result'); // If we're re-sending it, it doesn't matter if data was written the first
                  // time.

                  this._dataVisible = false;
                  this.sentMessage = true; // If this is a wait method, make all data messages be buffered until it is
                  // done.

                  if (this._wait) this._connection._methodsBlockingQuiescence[this.methodId] = true; // Actually send the message.

                  this._connection._send(this._message);
                } // Invoke the callback, if we have both a result and know that all data has
                // been written to the local cache.


                _maybeInvokeCallback() {
                  if (this._methodResult && this._dataVisible) {
                    // Call the callback. (This won't throw: the callback was wrapped with
                    // bindEnvironment.)
                    this._callback(this._methodResult[0], this._methodResult[1]); // Forget about this method.


                    delete this._connection._methodInvokers[this.methodId]; // Let the connection know that this method is finished, so it can try to
                    // move on to the next block of methods.

                    this._connection._outstandingMethodFinished();
                  }
                } // Call with the result of the method from the server. Only may be called
                // once; once it is called, you should not call sendMessage again.
                // If the user provided an onResultReceived callback, call it immediately.
                // Then invoke the main callback if data is also visible.


                receiveResult(err, result) {
                  if (this.gotResult()) throw new Error('Methods should only receive results once');
                  this._methodResult = [err, result];

                  this._onResultReceived(err, result);

                  this._maybeInvokeCallback();
                } // Call this when all data written by the method is visible. This means that
                // the method has returns its "data is done" message *AND* all server
                // documents that are buffered at that time have been written to the local
                // cache. Invokes the main callback if the result has been received.


                dataVisible() {
                  this._dataVisible = true;

                  this._maybeInvokeCallback();
                } // True if receiveResult has been called.


                gotResult() {
                  return !!this._methodResult;
                }

              }
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "livedata_connection.js": function (_require5, _exports5, _module4) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/livedata_connection.js                                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

              var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

              _module4.export({
                Connection: () => Connection
              });
              let Meteor;
              _module4.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 0);
              let DDPCommon;
              _module4.link("meteor/ddp-common", {
                DDPCommon(v) {
                  DDPCommon = v;
                }

              }, 1);
              let Tracker;
              _module4.link("meteor/tracker", {
                Tracker(v) {
                  Tracker = v;
                }

              }, 2);
              let EJSON;
              _module4.link("meteor/ejson", {
                EJSON(v) {
                  EJSON = v;
                }

              }, 3);
              let Random;
              _module4.link("meteor/random", {
                Random(v) {
                  Random = v;
                }

              }, 4);
              let Hook;
              _module4.link("meteor/callback-hook", {
                Hook(v) {
                  Hook = v;
                }

              }, 5);
              let MongoID;
              _module4.link("meteor/mongo-id", {
                MongoID(v) {
                  MongoID = v;
                }

              }, 6);
              let DDP;
              _module4.link("./namespace.js", {
                DDP(v) {
                  DDP = v;
                }

              }, 7);
              let MethodInvoker;
              _module4.link("./MethodInvoker.js", {
                default(v) {
                  MethodInvoker = v;
                }

              }, 8);
              let hasOwn, slice, keys, isEmpty, last;
              _module4.link("meteor/ddp-common/utils.js", {
                hasOwn(v) {
                  hasOwn = v;
                },

                slice(v) {
                  slice = v;
                },

                keys(v) {
                  keys = v;
                },

                isEmpty(v) {
                  isEmpty = v;
                },

                last(v) {
                  last = v;
                }

              }, 9);

              if (Meteor.isServer) {
                var Fiber = Npm.require('fibers');

                var Future = Npm.require('fibers/future');
              }

              class MongoIDMap extends IdMap {
                constructor() {
                  super(MongoID.idStringify, MongoID.idParse);
                }

              } // @param url {String|Object} URL to Meteor app,
              //   or an object as a test hook (see code)
              // Options:
              //   reloadWithOutstanding: is it OK to reload if there are outstanding methods?
              //   headers: extra headers to send on the websockets connection, for
              //     server-to-server DDP only
              //   _sockjsOptions: Specifies options to pass through to the sockjs client
              //   onDDPNegotiationVersionFailure: callback when version negotiation fails.
              //
              // XXX There should be a way to destroy a DDP connection, causing all
              // outstanding method calls to fail.
              //
              // XXX Our current way of handling failure and reconnection is great
              // for an app (where we want to tolerate being disconnected as an
              // expect state, and keep trying forever to reconnect) but cumbersome
              // for something like a command line tool that wants to make a
              // connection, call a method, and print an error if connection
              // fails. We should have better usability in the latter case (while
              // still transparently reconnecting if it's just a transient failure
              // or the server migrating us).


              class Connection {
                constructor(url, options) {
                  var self = this;
                  this.options = options = (0, _objectSpread2.default)({
                    onConnected() {},

                    onDDPVersionNegotiationFailure(description) {
                      Meteor._debug(description);
                    },

                    heartbeatInterval: 17500,
                    heartbeatTimeout: 15000,
                    npmFayeOptions: Object.create(null),
                    // These options are only for testing.
                    reloadWithOutstanding: false,
                    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,
                    retry: true,
                    respondToPings: true,
                    // When updates are coming within this ms interval, batch them together.
                    bufferedWritesInterval: 5,
                    // Flush buffers immediately if writes are happening continuously for more than this many ms.
                    bufferedWritesMaxAge: 500
                  }, options); // If set, called when we reconnect, queuing method calls _before_ the
                  // existing outstanding ones.
                  // NOTE: This feature has been preserved for backwards compatibility. The
                  // preferred method of setting a callback on reconnect is to use
                  // DDP.onReconnect.

                  self.onReconnect = null; // as a test hook, allow passing a stream instead of a url.

                  if (typeof url === 'object') {
                    self._stream = url;
                  } else {
                    const {
                      ClientStream
                    } = _require5("meteor/socket-stream-client");

                    self._stream = new ClientStream(url, {
                      retry: options.retry,
                      ConnectionError: DDP.ConnectionError,
                      headers: options.headers,
                      _sockjsOptions: options._sockjsOptions,
                      // Used to keep some tests quiet, or for other cases in which
                      // the right thing to do with connection errors is to silently
                      // fail (e.g. sending package usage stats). At some point we
                      // should have a real API for handling client-stream-level
                      // errors.
                      _dontPrintErrors: options._dontPrintErrors,
                      connectTimeoutMs: options.connectTimeoutMs,
                      npmFayeOptions: options.npmFayeOptions
                    });
                  }

                  self._lastSessionId = null;
                  self._versionSuggestion = null; // The last proposed DDP version.

                  self._version = null; // The DDP version agreed on by client and server.

                  self._stores = Object.create(null); // name -> object with methods

                  self._methodHandlers = Object.create(null); // name -> func

                  self._nextMethodId = 1;
                  self._supportedDDPVersions = options.supportedDDPVersions;
                  self._heartbeatInterval = options.heartbeatInterval;
                  self._heartbeatTimeout = options.heartbeatTimeout; // Tracks methods which the user has tried to call but which have not yet
                  // called their user callback (ie, they are waiting on their result or for all
                  // of their writes to be written to the local cache). Map from method ID to
                  // MethodInvoker object.

                  self._methodInvokers = Object.create(null); // Tracks methods which the user has called but whose result messages have not
                  // arrived yet.
                  //
                  // _outstandingMethodBlocks is an array of blocks of methods. Each block
                  // represents a set of methods that can run at the same time. The first block
                  // represents the methods which are currently in flight; subsequent blocks
                  // must wait for previous blocks to be fully finished before they can be sent
                  // to the server.
                  //
                  // Each block is an object with the following fields:
                  // - methods: a list of MethodInvoker objects
                  // - wait: a boolean; if true, this block had a single method invoked with
                  //         the "wait" option
                  //
                  // There will never be adjacent blocks with wait=false, because the only thing
                  // that makes methods need to be serialized is a wait method.
                  //
                  // Methods are removed from the first block when their "result" is
                  // received. The entire first block is only removed when all of the in-flight
                  // methods have received their results (so the "methods" list is empty) *AND*
                  // all of the data written by those methods are visible in the local cache. So
                  // it is possible for the first block's methods list to be empty, if we are
                  // still waiting for some objects to quiesce.
                  //
                  // Example:
                  //  _outstandingMethodBlocks = [
                  //    {wait: false, methods: []},
                  //    {wait: true, methods: [<MethodInvoker for 'login'>]},
                  //    {wait: false, methods: [<MethodInvoker for 'foo'>,
                  //                            <MethodInvoker for 'bar'>]}]
                  // This means that there were some methods which were sent to the server and
                  // which have returned their results, but some of the data written by
                  // the methods may not be visible in the local cache. Once all that data is
                  // visible, we will send a 'login' method. Once the login method has returned
                  // and all the data is visible (including re-running subs if userId changes),
                  // we will send the 'foo' and 'bar' methods in parallel.

                  self._outstandingMethodBlocks = []; // method ID -> array of objects with keys 'collection' and 'id', listing
                  // documents written by a given method's stub. keys are associated with
                  // methods whose stub wrote at least one document, and whose data-done message
                  // has not yet been received.

                  self._documentsWrittenByStub = Object.create(null); // collection -> IdMap of "server document" object. A "server document" has:
                  // - "document": the version of the document according the
                  //   server (ie, the snapshot before a stub wrote it, amended by any changes
                  //   received from the server)
                  //   It is undefined if we think the document does not exist
                  // - "writtenByStubs": a set of method IDs whose stubs wrote to the document
                  //   whose "data done" messages have not yet been processed

                  self._serverDocuments = Object.create(null); // Array of callbacks to be called after the next update of the local
                  // cache. Used for:
                  //  - Calling methodInvoker.dataVisible and sub ready callbacks after
                  //    the relevant data is flushed.
                  //  - Invoking the callbacks of "half-finished" methods after reconnect
                  //    quiescence. Specifically, methods whose result was received over the old
                  //    connection (so we don't re-send it) but whose data had not been made
                  //    visible.

                  self._afterUpdateCallbacks = []; // In two contexts, we buffer all incoming data messages and then process them
                  // all at once in a single update:
                  //   - During reconnect, we buffer all data messages until all subs that had
                  //     been ready before reconnect are ready again, and all methods that are
                  //     active have returned their "data done message"; then
                  //   - During the execution of a "wait" method, we buffer all data messages
                  //     until the wait method gets its "data done" message. (If the wait method
                  //     occurs during reconnect, it doesn't get any special handling.)
                  // all data messages are processed in one update.
                  //
                  // The following fields are used for this "quiescence" process.
                  // This buffers the messages that aren't being processed yet.

                  self._messagesBufferedUntilQuiescence = []; // Map from method ID -> true. Methods are removed from this when their
                  // "data done" message is received, and we will not quiesce until it is
                  // empty.

                  self._methodsBlockingQuiescence = Object.create(null); // map from sub ID -> true for subs that were ready (ie, called the sub
                  // ready callback) before reconnect but haven't become ready again yet

                  self._subsBeingRevived = Object.create(null); // map from sub._id -> true
                  // if true, the next data update should reset all stores. (set during
                  // reconnect.)

                  self._resetStores = false; // name -> array of updates for (yet to be created) collections

                  self._updatesForUnknownStores = Object.create(null); // if we're blocking a migration, the retry func

                  self._retryMigrate = null;
                  self.__flushBufferedWrites = Meteor.bindEnvironment(self._flushBufferedWrites, 'flushing DDP buffered writes', self); // Collection name -> array of messages.

                  self._bufferedWrites = Object.create(null); // When current buffer of updates must be flushed at, in ms timestamp.

                  self._bufferedWritesFlushAt = null; // Timeout handle for the next processing of all pending writes

                  self._bufferedWritesFlushHandle = null;
                  self._bufferedWritesInterval = options.bufferedWritesInterval;
                  self._bufferedWritesMaxAge = options.bufferedWritesMaxAge; // metadata for subscriptions.  Map from sub ID to object with keys:
                  //   - id
                  //   - name
                  //   - params
                  //   - inactive (if true, will be cleaned up if not reused in re-run)
                  //   - ready (has the 'ready' message been received?)
                  //   - readyCallback (an optional callback to call when ready)
                  //   - errorCallback (an optional callback to call if the sub terminates with
                  //                    an error, XXX COMPAT WITH 1.0.3.1)
                  //   - stopCallback (an optional callback to call when the sub terminates
                  //     for any reason, with an error argument if an error triggered the stop)

                  self._subscriptions = Object.create(null); // Reactive userId.

                  self._userId = null;
                  self._userIdDeps = new Tracker.Dependency(); // Block auto-reload while we're waiting for method responses.

                  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {
                    Package.reload.Reload._onMigrate(retry => {
                      if (!self._readyToMigrate()) {
                        if (self._retryMigrate) throw new Error('Two migrations in progress?');
                        self._retryMigrate = retry;
                        return false;
                      } else {
                        return [true];
                      }
                    });
                  }

                  var onDisconnect = () => {
                    if (self._heartbeat) {
                      self._heartbeat.stop();

                      self._heartbeat = null;
                    }
                  };

                  if (Meteor.isServer) {
                    self._stream.on('message', Meteor.bindEnvironment(this.onMessage.bind(this), 'handling DDP message'));

                    self._stream.on('reset', Meteor.bindEnvironment(this.onReset.bind(this), 'handling DDP reset'));

                    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, 'handling DDP disconnect'));
                  } else {
                    self._stream.on('message', this.onMessage.bind(this));

                    self._stream.on('reset', this.onReset.bind(this));

                    self._stream.on('disconnect', onDisconnect);
                  }
                } // 'name' is the name of the data on the wire that should go in the
                // store. 'wrappedStore' should be an object with methods beginUpdate, update,
                // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.


                registerStore(name, wrappedStore) {
                  var self = this;
                  if (name in self._stores) return false; // Wrap the input object in an object which makes any store method not
                  // implemented by 'store' into a no-op.

                  var store = Object.create(null);
                  ['update', 'beginUpdate', 'endUpdate', 'saveOriginals', 'retrieveOriginals', 'getDoc', '_getCollection'].forEach(method => {
                    store[method] = function () {
                      if (wrappedStore[method]) {
                        return wrappedStore[method](...arguments);
                      }
                    };
                  });
                  self._stores[name] = store;
                  var queued = self._updatesForUnknownStores[name];

                  if (queued) {
                    store.beginUpdate(queued.length, false);
                    queued.forEach(msg => {
                      store.update(msg);
                    });
                    store.endUpdate();
                    delete self._updatesForUnknownStores[name];
                  }

                  return true;
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.subscribe
                 * @summary Subscribe to a record set.  Returns a handle that provides
                 * `stop()` and `ready()` methods.
                 * @locus Client
                 * @param {String} name Name of the subscription.  Matches the name of the
                 * server's `publish()` call.
                 * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher
                 * function on server.
                 * @param {Function|Object} [callbacks] Optional. May include `onStop`
                 * and `onReady` callbacks. If there is an error, it is passed as an
                 * argument to `onStop`. If a function is passed instead of an object, it
                 * is interpreted as an `onReady` callback.
                 */

                subscribe(name
                /* .. [arguments] .. (callback|callbacks) */
                ) {
                  var self = this;
                  var params = slice.call(arguments, 1);
                  var callbacks = Object.create(null);

                  if (params.length) {
                    var lastParam = params[params.length - 1];

                    if (typeof lastParam === 'function') {
                      callbacks.onReady = params.pop();
                    } else if (lastParam && [lastParam.onReady, // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use
                    // onStop with an error callback instead.
                    lastParam.onError, lastParam.onStop].some(f => typeof f === "function")) {
                      callbacks = params.pop();
                    }
                  } // Is there an existing sub with the same name and param, run in an
                  // invalidated Computation? This will happen if we are rerunning an
                  // existing computation.
                  //
                  // For example, consider a rerun of:
                  //
                  //     Tracker.autorun(function () {
                  //       Meteor.subscribe("foo", Session.get("foo"));
                  //       Meteor.subscribe("bar", Session.get("bar"));
                  //     });
                  //
                  // If "foo" has changed but "bar" has not, we will match the "bar"
                  // subcribe to an existing inactive subscription in order to not
                  // unsub and resub the subscription unnecessarily.
                  //
                  // We only look for one such sub; if there are N apparently-identical subs
                  // being invalidated, we will require N matching subscribe calls to keep
                  // them all active.


                  var existing;
                  keys(self._subscriptions).some(id => {
                    const sub = self._subscriptions[id];

                    if (sub.inactive && sub.name === name && EJSON.equals(sub.params, params)) {
                      return existing = sub;
                    }
                  });
                  var id;

                  if (existing) {
                    id = existing.id;
                    existing.inactive = false; // reactivate

                    if (callbacks.onReady) {
                      // If the sub is not already ready, replace any ready callback with the
                      // one provided now. (It's not really clear what users would expect for
                      // an onReady callback inside an autorun; the semantics we provide is
                      // that at the time the sub first becomes ready, we call the last
                      // onReady callback provided, if any.)
                      // If the sub is already ready, run the ready callback right away.
                      // It seems that users would expect an onReady callback inside an
                      // autorun to trigger once the the sub first becomes ready and also
                      // when re-subs happens.
                      if (existing.ready) {
                        callbacks.onReady();
                      } else {
                        existing.readyCallback = callbacks.onReady;
                      }
                    } // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call
                    // onStop with an optional error argument


                    if (callbacks.onError) {
                      // Replace existing callback if any, so that errors aren't
                      // double-reported.
                      existing.errorCallback = callbacks.onError;
                    }

                    if (callbacks.onStop) {
                      existing.stopCallback = callbacks.onStop;
                    }
                  } else {
                    // New sub! Generate an id, save it locally, and send message.
                    id = Random.id();
                    self._subscriptions[id] = {
                      id: id,
                      name: name,
                      params: EJSON.clone(params),
                      inactive: false,
                      ready: false,
                      readyDeps: new Tracker.Dependency(),
                      readyCallback: callbacks.onReady,
                      // XXX COMPAT WITH 1.0.3.1 #errorCallback
                      errorCallback: callbacks.onError,
                      stopCallback: callbacks.onStop,
                      connection: self,

                      remove() {
                        delete this.connection._subscriptions[this.id];
                        this.ready && this.readyDeps.changed();
                      },

                      stop() {
                        this.connection._send({
                          msg: 'unsub',
                          id: id
                        });

                        this.remove();

                        if (callbacks.onStop) {
                          callbacks.onStop();
                        }
                      }

                    };

                    self._send({
                      msg: 'sub',
                      id: id,
                      name: name,
                      params: params
                    });
                  } // return a handle to the application.


                  var handle = {
                    stop() {
                      if (!hasOwn.call(self._subscriptions, id)) {
                        return;
                      }

                      self._subscriptions[id].stop();
                    },

                    ready() {
                      // return false if we've unsubscribed.
                      if (!hasOwn.call(self._subscriptions, id)) {
                        return false;
                      }

                      var record = self._subscriptions[id];
                      record.readyDeps.depend();
                      return record.ready;
                    },

                    subscriptionId: id
                  };

                  if (Tracker.active) {
                    // We're in a reactive computation, so we'd like to unsubscribe when the
                    // computation is invalidated... but not if the rerun just re-subscribes
                    // to the same subscription!  When a rerun happens, we use onInvalidate
                    // as a change to mark the subscription "inactive" so that it can
                    // be reused from the rerun.  If it isn't reused, it's killed from
                    // an afterFlush.
                    Tracker.onInvalidate(c => {
                      if (hasOwn.call(self._subscriptions, id)) {
                        self._subscriptions[id].inactive = true;
                      }

                      Tracker.afterFlush(() => {
                        if (hasOwn.call(self._subscriptions, id) && self._subscriptions[id].inactive) {
                          handle.stop();
                        }
                      });
                    });
                  }

                  return handle;
                } // options:
                // - onLateError {Function(error)} called if an error was received after the ready event.
                //     (errors received before ready cause an error to be thrown)


                _subscribeAndWait(name, args, options) {
                  var self = this;
                  var f = new Future();
                  var ready = false;
                  var handle;
                  args = args || [];
                  args.push({
                    onReady() {
                      ready = true;
                      f['return']();
                    },

                    onError(e) {
                      if (!ready) f['throw'](e);else options && options.onLateError && options.onLateError(e);
                    }

                  });
                  handle = self.subscribe.apply(self, [name].concat(args));
                  f.wait();
                  return handle;
                }

                methods(methods) {
                  keys(methods).forEach(name => {
                    const func = methods[name];

                    if (typeof func !== 'function') {
                      throw new Error("Method '" + name + "' must be a function");
                    }

                    if (this._methodHandlers[name]) {
                      throw new Error("A method named '" + name + "' is already defined");
                    }

                    this._methodHandlers[name] = func;
                  });
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.call
                 * @summary Invokes a method passing any number of arguments.
                 * @locus Anywhere
                 * @param {String} name Name of method to invoke
                 * @param {EJSONable} [arg1,arg2...] Optional method arguments
                 * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
                 */

                call(name
                /* .. [arguments] .. callback */
                ) {
                  // if it's a function, the last argument is the result callback,
                  // not a parameter to the remote method.
                  var args = slice.call(arguments, 1);
                  if (args.length && typeof args[args.length - 1] === 'function') var callback = args.pop();
                  return this.apply(name, args, callback);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.apply
                 * @summary Invoke a method passing an array of arguments.
                 * @locus Anywhere
                 * @param {String} name Name of method to invoke
                 * @param {EJSONable[]} args Method arguments
                 * @param {Object} [options]
                 * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
                 * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
                 * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.
                 * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.
                 * @param {Boolean} options.returnStubValue (Client only) If true then in cases where we would have otherwise discarded the stub's return value and returned undefined, instead we go ahead and return it. Specifically, this is any time other than when (a) we are already inside a stub or (b) we are in Node and no callback was provided. Currently we require this flag to be explicitly passed to reduce the likelihood that stub return values will be confused with server return values; we may improve this in future.
                 * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).
                 */

                apply(name, args, options, callback) {
                  var self = this; // We were passed 3 arguments. They may be either (name, args, options)
                  // or (name, args, callback)

                  if (!callback && typeof options === 'function') {
                    callback = options;
                    options = Object.create(null);
                  }

                  options = options || Object.create(null);

                  if (callback) {
                    // XXX would it be better form to do the binding in stream.on,
                    // or caller, instead of here?
                    // XXX improve error message (and how we report it)
                    callback = Meteor.bindEnvironment(callback, "delivering result of invoking '" + name + "'");
                  } // Keep our args safe from mutation (eg if we don't send the message for a
                  // while because of a wait method).


                  args = EJSON.clone(args);

                  var enclosing = DDP._CurrentMethodInvocation.get();

                  var alreadyInSimulation = enclosing && enclosing.isSimulation; // Lazily generate a randomSeed, only if it is requested by the stub.
                  // The random streams only have utility if they're used on both the client
                  // and the server; if the client doesn't generate any 'random' values
                  // then we don't expect the server to generate any either.
                  // Less commonly, the server may perform different actions from the client,
                  // and may in fact generate values where the client did not, but we don't
                  // have any client-side values to match, so even here we may as well just
                  // use a random seed on the server.  In that case, we don't pass the
                  // randomSeed to save bandwidth, and we don't even generate it to save a
                  // bit of CPU and to avoid consuming entropy.

                  var randomSeed = null;

                  var randomSeedGenerator = () => {
                    if (randomSeed === null) {
                      randomSeed = DDPCommon.makeRpcSeed(enclosing, name);
                    }

                    return randomSeed;
                  }; // Run the stub, if we have one. The stub is supposed to make some
                  // temporary writes to the database to give the user a smooth experience
                  // until the actual result of executing the method comes back from the
                  // server (whereupon the temporary writes to the database will be reversed
                  // during the beginUpdate/endUpdate process.)
                  //
                  // Normally, we ignore the return value of the stub (even if it is an
                  // exception), in favor of the real return value from the server. The
                  // exception is if the *caller* is a stub. In that case, we're not going
                  // to do a RPC, so we use the return value of the stub as our return
                  // value.


                  var stub = self._methodHandlers[name];

                  if (stub) {
                    var setUserId = userId => {
                      self.setUserId(userId);
                    };

                    var invocation = new DDPCommon.MethodInvocation({
                      isSimulation: true,
                      userId: self.userId(),
                      setUserId: setUserId,

                      randomSeed() {
                        return randomSeedGenerator();
                      }

                    });
                    if (!alreadyInSimulation) self._saveOriginals();

                    try {
                      // Note that unlike in the corresponding server code, we never audit
                      // that stubs check() their arguments.
                      var stubReturnValue = DDP._CurrentMethodInvocation.withValue(invocation, () => {
                        if (Meteor.isServer) {
                          // Because saveOriginals and retrieveOriginals aren't reentrant,
                          // don't allow stubs to yield.
                          return Meteor._noYieldsAllowed(() => {
                            // re-clone, so that the stub can't affect our caller's values
                            return stub.apply(invocation, EJSON.clone(args));
                          });
                        } else {
                          return stub.apply(invocation, EJSON.clone(args));
                        }
                      });
                    } catch (e) {
                      var exception = e;
                    }
                  } // If we're in a simulation, stop and return the result we have,
                  // rather than going on to do an RPC. If there was no stub,
                  // we'll end up returning undefined.


                  if (alreadyInSimulation) {
                    if (callback) {
                      callback(exception, stubReturnValue);
                      return undefined;
                    }

                    if (exception) throw exception;
                    return stubReturnValue;
                  } // We only create the methodId here because we don't actually need one if
                  // we're already in a simulation


                  const methodId = '' + self._nextMethodId++;

                  if (stub) {
                    self._retrieveAndStoreOriginals(methodId);
                  } // Generate the DDP message for the method call. Note that on the client,
                  // it is important that the stub have finished before we send the RPC, so
                  // that we know we have a complete list of which local documents the stub
                  // wrote.


                  var message = {
                    msg: 'method',
                    method: name,
                    params: args,
                    id: methodId
                  }; // If an exception occurred in a stub, and we're ignoring it
                  // because we're doing an RPC and want to use what the server
                  // returns instead, log it so the developer knows
                  // (unless they explicitly ask to see the error).
                  //
                  // Tests can set the '_expectedByTest' flag on an exception so it won't
                  // go to log.

                  if (exception) {
                    if (options.throwStubExceptions) {
                      throw exception;
                    } else if (!exception._expectedByTest) {
                      Meteor._debug("Exception while simulating the effect of invoking '" + name + "'", exception);
                    }
                  } // At this point we're definitely doing an RPC, and we're going to
                  // return the value of the RPC to the caller.
                  // If the caller didn't give a callback, decide what to do.


                  if (!callback) {
                    if (Meteor.isClient) {
                      // On the client, we don't have fibers, so we can't block. The
                      // only thing we can do is to return undefined and discard the
                      // result of the RPC. If an error occurred then print the error
                      // to the console.
                      callback = err => {
                        err && Meteor._debug("Error invoking Method '" + name + "'", err);
                      };
                    } else {
                      // On the server, make the function synchronous. Throw on
                      // errors, return on success.
                      var future = new Future();
                      callback = future.resolver();
                    }
                  } // Send the randomSeed only if we used it


                  if (randomSeed !== null) {
                    message.randomSeed = randomSeed;
                  }

                  var methodInvoker = new MethodInvoker({
                    methodId,
                    callback: callback,
                    connection: self,
                    onResultReceived: options.onResultReceived,
                    wait: !!options.wait,
                    message: message,
                    noRetry: !!options.noRetry
                  });

                  if (options.wait) {
                    // It's a wait method! Wait methods go in their own block.
                    self._outstandingMethodBlocks.push({
                      wait: true,
                      methods: [methodInvoker]
                    });
                  } else {
                    // Not a wait method. Start a new block if the previous block was a wait
                    // block, and add it to the last block of methods.
                    if (isEmpty(self._outstandingMethodBlocks) || last(self._outstandingMethodBlocks).wait) {
                      self._outstandingMethodBlocks.push({
                        wait: false,
                        methods: []
                      });
                    }

                    last(self._outstandingMethodBlocks).methods.push(methodInvoker);
                  } // If we added it to the first block, send it out now.


                  if (self._outstandingMethodBlocks.length === 1) methodInvoker.sendMessage(); // If we're using the default callback on the server,
                  // block waiting for the result.

                  if (future) {
                    return future.wait();
                  }

                  return options.returnStubValue ? stubReturnValue : undefined;
                } // Before calling a method stub, prepare all stores to track changes and allow
                // _retrieveAndStoreOriginals to get the original versions of changed
                // documents.


                _saveOriginals() {
                  if (!this._waitingForQuiescence()) {
                    this._flushBufferedWrites();
                  }

                  keys(this._stores).forEach(storeName => {
                    this._stores[storeName].saveOriginals();
                  });
                } // Retrieves the original versions of all documents modified by the stub for
                // method 'methodId' from all stores and saves them to _serverDocuments (keyed
                // by document) and _documentsWrittenByStub (keyed by method ID).


                _retrieveAndStoreOriginals(methodId) {
                  var self = this;
                  if (self._documentsWrittenByStub[methodId]) throw new Error('Duplicate methodId in _retrieveAndStoreOriginals');
                  var docsWritten = [];
                  keys(self._stores).forEach(collection => {
                    var originals = self._stores[collection].retrieveOriginals(); // not all stores define retrieveOriginals


                    if (!originals) return;
                    originals.forEach((doc, id) => {
                      docsWritten.push({
                        collection,
                        id
                      });

                      if (!hasOwn.call(self._serverDocuments, collection)) {
                        self._serverDocuments[collection] = new MongoIDMap();
                      }

                      var serverDoc = self._serverDocuments[collection].setDefault(id, Object.create(null));

                      if (serverDoc.writtenByStubs) {
                        // We're not the first stub to write this doc. Just add our method ID
                        // to the record.
                        serverDoc.writtenByStubs[methodId] = true;
                      } else {
                        // First stub! Save the original value and our method ID.
                        serverDoc.document = doc;
                        serverDoc.flushCallbacks = [];
                        serverDoc.writtenByStubs = Object.create(null);
                        serverDoc.writtenByStubs[methodId] = true;
                      }
                    });
                  });

                  if (!isEmpty(docsWritten)) {
                    self._documentsWrittenByStub[methodId] = docsWritten;
                  }
                } // This is very much a private function we use to make the tests
                // take up fewer server resources after they complete.


                _unsubscribeAll() {
                  keys(this._subscriptions).forEach(id => {
                    const sub = this._subscriptions[id]; // Avoid killing the autoupdate subscription so that developers
                    // still get hot code pushes when writing tests.
                    //
                    // XXX it's a hack to encode knowledge about autoupdate here,
                    // but it doesn't seem worth it yet to have a special API for
                    // subscriptions to preserve after unit tests.

                    if (sub.name !== 'meteor_autoupdate_clientVersions') {
                      sub.stop();
                    }
                  });
                } // Sends the DDP stringification of the given message object


                _send(obj) {
                  this._stream.send(DDPCommon.stringifyDDP(obj));
                } // We detected via DDP-level heartbeats that we've lost the
                // connection.  Unlike `disconnect` or `close`, a lost connection
                // will be automatically retried.


                _lostConnection(error) {
                  this._stream._lostConnection(error);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.status
                 * @summary Get the current connection status. A reactive data source.
                 * @locus Client
                 */

                status() {
                  return this._stream.status(...arguments);
                }
                /**
                 * @summary Force an immediate reconnection attempt if the client is not connected to the server.
                 This method does nothing if the client is already connected.
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.reconnect
                 * @locus Client
                 */

                reconnect() {
                  return this._stream.reconnect(...arguments);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.disconnect
                 * @summary Disconnect the client from the server.
                 * @locus Client
                 */

                disconnect() {
                  return this._stream.disconnect(...arguments);
                }

                close() {
                  return this._stream.disconnect({
                    _permanent: true
                  });
                } ///
                /// Reactive user system
                ///


                userId() {
                  if (this._userIdDeps) this._userIdDeps.depend();
                  return this._userId;
                }

                setUserId(userId) {
                  // Avoid invalidating dependents if setUserId is called with current value.
                  if (this._userId === userId) return;
                  this._userId = userId;
                  if (this._userIdDeps) this._userIdDeps.changed();
                } // Returns true if we are in a state after reconnect of waiting for subs to be
                // revived or early methods to finish their data, or we are waiting for a
                // "wait" method to finish.


                _waitingForQuiescence() {
                  return !isEmpty(this._subsBeingRevived) || !isEmpty(this._methodsBlockingQuiescence);
                } // Returns true if any method whose message has been sent to the server has
                // not yet invoked its user callback.


                _anyMethodsAreOutstanding() {
                  const invokers = this._methodInvokers;
                  return keys(invokers).some(id => {
                    return invokers[id].sentMessage;
                  });
                }

                _livedata_connected(msg) {
                  var self = this;

                  if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {
                    self._heartbeat = new DDPCommon.Heartbeat({
                      heartbeatInterval: self._heartbeatInterval,
                      heartbeatTimeout: self._heartbeatTimeout,

                      onTimeout() {
                        self._lostConnection(new DDP.ConnectionError('DDP heartbeat timed out'));
                      },

                      sendPing() {
                        self._send({
                          msg: 'ping'
                        });
                      }

                    });

                    self._heartbeat.start();
                  } // If this is a reconnect, we'll have to reset all stores.


                  if (self._lastSessionId) self._resetStores = true;

                  if (typeof msg.session === 'string') {
                    var reconnectedToPreviousSession = self._lastSessionId === msg.session;
                    self._lastSessionId = msg.session;
                  }

                  if (reconnectedToPreviousSession) {
                    // Successful reconnection -- pick up where we left off.  Note that right
                    // now, this never happens: the server never connects us to a previous
                    // session, because DDP doesn't provide enough data for the server to know
                    // what messages the client has processed. We need to improve DDP to make
                    // this possible, at which point we'll probably need more code here.
                    return;
                  } // Server doesn't have our data any more. Re-sync a new session.
                  // Forget about messages we were buffering for unknown collections. They'll
                  // be resent if still relevant.


                  self._updatesForUnknownStores = Object.create(null);

                  if (self._resetStores) {
                    // Forget about the effects of stubs. We'll be resetting all collections
                    // anyway.
                    self._documentsWrittenByStub = Object.create(null);
                    self._serverDocuments = Object.create(null);
                  } // Clear _afterUpdateCallbacks.


                  self._afterUpdateCallbacks = []; // Mark all named subscriptions which are ready (ie, we already called the
                  // ready callback) as needing to be revived.
                  // XXX We should also block reconnect quiescence until unnamed subscriptions
                  //     (eg, autopublish) are done re-publishing to avoid flicker!

                  self._subsBeingRevived = Object.create(null);
                  keys(self._subscriptions).forEach(id => {
                    if (self._subscriptions[id].ready) {
                      self._subsBeingRevived[id] = true;
                    }
                  }); // Arrange for "half-finished" methods to have their callbacks run, and
                  // track methods that were sent on this connection so that we don't
                  // quiesce until they are all done.
                  //
                  // Start by clearing _methodsBlockingQuiescence: methods sent before
                  // reconnect don't matter, and any "wait" methods sent on the new connection
                  // that we drop here will be restored by the loop below.

                  self._methodsBlockingQuiescence = Object.create(null);

                  if (self._resetStores) {
                    const invokers = self._methodInvokers;
                    keys(invokers).forEach(id => {
                      const invoker = invokers[id];

                      if (invoker.gotResult()) {
                        // This method already got its result, but it didn't call its callback
                        // because its data didn't become visible. We did not resend the
                        // method RPC. We'll call its callback when we get a full quiesce,
                        // since that's as close as we'll get to "data must be visible".
                        self._afterUpdateCallbacks.push(function () {
                          return invoker.dataVisible(...arguments);
                        });
                      } else if (invoker.sentMessage) {
                        // This method has been sent on this connection (maybe as a resend
                        // from the last connection, maybe from onReconnect, maybe just very
                        // quickly before processing the connected message).
                        //
                        // We don't need to do anything special to ensure its callbacks get
                        // called, but we'll count it as a method which is preventing
                        // reconnect quiescence. (eg, it might be a login method that was run
                        // from onReconnect, and we don't want to see flicker by seeing a
                        // logged-out state.)
                        self._methodsBlockingQuiescence[invoker.methodId] = true;
                      }
                    });
                  }

                  self._messagesBufferedUntilQuiescence = []; // If we're not waiting on any methods or subs, we can reset the stores and
                  // call the callbacks immediately.

                  if (!self._waitingForQuiescence()) {
                    if (self._resetStores) {
                      keys(self._stores).forEach(storeName => {
                        const s = self._stores[storeName];
                        s.beginUpdate(0, true);
                        s.endUpdate();
                      });
                      self._resetStores = false;
                    }

                    self._runAfterUpdateCallbacks();
                  }
                }

                _processOneDataMessage(msg, updates) {
                  const messageType = msg.msg; // msg is one of ['added', 'changed', 'removed', 'ready', 'updated']

                  if (messageType === 'added') {
                    this._process_added(msg, updates);
                  } else if (messageType === 'changed') {
                    this._process_changed(msg, updates);
                  } else if (messageType === 'removed') {
                    this._process_removed(msg, updates);
                  } else if (messageType === 'ready') {
                    this._process_ready(msg, updates);
                  } else if (messageType === 'updated') {
                    this._process_updated(msg, updates);
                  } else if (messageType === 'nosub') {// ignore this
                  } else {
                    Meteor._debug('discarding unknown livedata data message type', msg);
                  }
                }

                _livedata_data(msg) {
                  var self = this;

                  if (self._waitingForQuiescence()) {
                    self._messagesBufferedUntilQuiescence.push(msg);

                    if (msg.msg === 'nosub') {
                      delete self._subsBeingRevived[msg.id];
                    }

                    if (msg.subs) {
                      msg.subs.forEach(subId => {
                        delete self._subsBeingRevived[subId];
                      });
                    }

                    if (msg.methods) {
                      msg.methods.forEach(methodId => {
                        delete self._methodsBlockingQuiescence[methodId];
                      });
                    }

                    if (self._waitingForQuiescence()) {
                      return;
                    } // No methods or subs are blocking quiescence!
                    // We'll now process and all of our buffered messages, reset all stores,
                    // and apply them all at once.


                    const bufferedMessages = self._messagesBufferedUntilQuiescence;
                    keys(bufferedMessages).forEach(id => {
                      self._processOneDataMessage(bufferedMessages[id], self._bufferedWrites);
                    });
                    self._messagesBufferedUntilQuiescence = [];
                  } else {
                    self._processOneDataMessage(msg, self._bufferedWrites);
                  } // Immediately flush writes when:
                  //  1. Buffering is disabled. Or;
                  //  2. any non-(added/changed/removed) message arrives.


                  var standardWrite = msg.msg === "added" || msg.msg === "changed" || msg.msg === "removed";

                  if (self._bufferedWritesInterval === 0 || !standardWrite) {
                    self._flushBufferedWrites();

                    return;
                  }

                  if (self._bufferedWritesFlushAt === null) {
                    self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;
                  } else if (self._bufferedWritesFlushAt < new Date().valueOf()) {
                    self._flushBufferedWrites();

                    return;
                  }

                  if (self._bufferedWritesFlushHandle) {
                    clearTimeout(self._bufferedWritesFlushHandle);
                  }

                  self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites, self._bufferedWritesInterval);
                }

                _flushBufferedWrites() {
                  var self = this;

                  if (self._bufferedWritesFlushHandle) {
                    clearTimeout(self._bufferedWritesFlushHandle);
                    self._bufferedWritesFlushHandle = null;
                  }

                  self._bufferedWritesFlushAt = null; // We need to clear the buffer before passing it to
                  //  performWrites. As there's no guarantee that it
                  //  will exit cleanly.

                  var writes = self._bufferedWrites;
                  self._bufferedWrites = Object.create(null);

                  self._performWrites(writes);
                }

                _performWrites(updates) {
                  var self = this;

                  if (self._resetStores || !isEmpty(updates)) {
                    // Begin a transactional update of each store.
                    keys(self._stores).forEach(storeName => {
                      self._stores[storeName].beginUpdate(hasOwn.call(updates, storeName) ? updates[storeName].length : 0, self._resetStores);
                    });
                    self._resetStores = false;
                    keys(updates).forEach(storeName => {
                      const updateMessages = updates[storeName];
                      var store = self._stores[storeName];

                      if (store) {
                        updateMessages.forEach(updateMessage => {
                          store.update(updateMessage);
                        });
                      } else {
                        // Nobody's listening for this data. Queue it up until
                        // someone wants it.
                        // XXX memory use will grow without bound if you forget to
                        // create a collection or just don't care about it... going
                        // to have to do something about that.
                        const updates = self._updatesForUnknownStores;

                        if (!hasOwn.call(updates, storeName)) {
                          updates[storeName] = [];
                        }

                        updates[storeName].push(...updateMessages);
                      }
                    }); // End update transaction.

                    keys(self._stores).forEach(storeName => {
                      self._stores[storeName].endUpdate();
                    });
                  }

                  self._runAfterUpdateCallbacks();
                } // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose
                // relevant docs have been flushed, as well as dataVisible callbacks at
                // reconnect-quiescence time.


                _runAfterUpdateCallbacks() {
                  var self = this;
                  var callbacks = self._afterUpdateCallbacks;
                  self._afterUpdateCallbacks = [];
                  callbacks.forEach(c => {
                    c();
                  });
                }

                _pushUpdate(updates, collection, msg) {
                  if (!hasOwn.call(updates, collection)) {
                    updates[collection] = [];
                  }

                  updates[collection].push(msg);
                }

                _getServerDoc(collection, id) {
                  var self = this;

                  if (!hasOwn.call(self._serverDocuments, collection)) {
                    return null;
                  }

                  var serverDocsForCollection = self._serverDocuments[collection];
                  return serverDocsForCollection.get(id) || null;
                }

                _process_added(msg, updates) {
                  var self = this;
                  var id = MongoID.idParse(msg.id);

                  var serverDoc = self._getServerDoc(msg.collection, id);

                  if (serverDoc) {
                    // Some outstanding stub wrote here.
                    var isExisting = serverDoc.document !== undefined;
                    serverDoc.document = msg.fields || Object.create(null);
                    serverDoc.document._id = id;

                    if (self._resetStores) {
                      // During reconnect the server is sending adds for existing ids.
                      // Always push an update so that document stays in the store after
                      // reset. Use current version of the document for this update, so
                      // that stub-written values are preserved.
                      var currentDoc = self._stores[msg.collection].getDoc(msg.id);

                      if (currentDoc !== undefined) msg.fields = currentDoc;

                      self._pushUpdate(updates, msg.collection, msg);
                    } else if (isExisting) {
                      throw new Error('Server sent add for existing id: ' + msg.id);
                    }
                  } else {
                    self._pushUpdate(updates, msg.collection, msg);
                  }
                }

                _process_changed(msg, updates) {
                  var self = this;

                  var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));

                  if (serverDoc) {
                    if (serverDoc.document === undefined) throw new Error('Server sent changed for nonexisting id: ' + msg.id);
                    DiffSequence.applyChanges(serverDoc.document, msg.fields);
                  } else {
                    self._pushUpdate(updates, msg.collection, msg);
                  }
                }

                _process_removed(msg, updates) {
                  var self = this;

                  var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));

                  if (serverDoc) {
                    // Some outstanding stub wrote here.
                    if (serverDoc.document === undefined) throw new Error('Server sent removed for nonexisting id:' + msg.id);
                    serverDoc.document = undefined;
                  } else {
                    self._pushUpdate(updates, msg.collection, {
                      msg: 'removed',
                      collection: msg.collection,
                      id: msg.id
                    });
                  }
                }

                _process_updated(msg, updates) {
                  var self = this; // Process "method done" messages.

                  msg.methods.forEach(methodId => {
                    const docs = self._documentsWrittenByStub[methodId];
                    keys(docs).forEach(id => {
                      const written = docs[id];

                      const serverDoc = self._getServerDoc(written.collection, written.id);

                      if (!serverDoc) {
                        throw new Error('Lost serverDoc for ' + JSON.stringify(written));
                      }

                      if (!serverDoc.writtenByStubs[methodId]) {
                        throw new Error('Doc ' + JSON.stringify(written) + ' not written by  method ' + methodId);
                      }

                      delete serverDoc.writtenByStubs[methodId];

                      if (isEmpty(serverDoc.writtenByStubs)) {
                        // All methods whose stubs wrote this method have completed! We can
                        // now copy the saved document to the database (reverting the stub's
                        // change if the server did not write to this object, or applying the
                        // server's writes if it did).
                        // This is a fake ddp 'replace' message.  It's just for talking
                        // between livedata connections and minimongo.  (We have to stringify
                        // the ID because it's supposed to look like a wire message.)
                        self._pushUpdate(updates, written.collection, {
                          msg: 'replace',
                          id: MongoID.idStringify(written.id),
                          replace: serverDoc.document
                        }); // Call all flush callbacks.


                        serverDoc.flushCallbacks.forEach(c => {
                          c();
                        }); // Delete this completed serverDocument. Don't bother to GC empty
                        // IdMaps inside self._serverDocuments, since there probably aren't
                        // many collections and they'll be written repeatedly.

                        self._serverDocuments[written.collection].remove(written.id);
                      }
                    });
                    delete self._documentsWrittenByStub[methodId]; // We want to call the data-written callback, but we can't do so until all
                    // currently buffered messages are flushed.

                    const callbackInvoker = self._methodInvokers[methodId];

                    if (!callbackInvoker) {
                      throw new Error('No callback invoker for method ' + methodId);
                    }

                    self._runWhenAllServerDocsAreFlushed(function () {
                      return callbackInvoker.dataVisible(...arguments);
                    });
                  });
                }

                _process_ready(msg, updates) {
                  var self = this; // Process "sub ready" messages. "sub ready" messages don't take effect
                  // until all current server documents have been flushed to the local
                  // database. We can use a write fence to implement this.

                  msg.subs.forEach(subId => {
                    self._runWhenAllServerDocsAreFlushed(() => {
                      var subRecord = self._subscriptions[subId]; // Did we already unsubscribe?

                      if (!subRecord) return; // Did we already receive a ready message? (Oops!)

                      if (subRecord.ready) return;
                      subRecord.ready = true;
                      subRecord.readyCallback && subRecord.readyCallback();
                      subRecord.readyDeps.changed();
                    });
                  });
                } // Ensures that "f" will be called after all documents currently in
                // _serverDocuments have been written to the local cache. f will not be called
                // if the connection is lost before then!


                _runWhenAllServerDocsAreFlushed(f) {
                  var self = this;

                  var runFAfterUpdates = () => {
                    self._afterUpdateCallbacks.push(f);
                  };

                  var unflushedServerDocCount = 0;

                  var onServerDocFlush = () => {
                    --unflushedServerDocCount;

                    if (unflushedServerDocCount === 0) {
                      // This was the last doc to flush! Arrange to run f after the updates
                      // have been applied.
                      runFAfterUpdates();
                    }
                  };

                  keys(self._serverDocuments).forEach(collection => {
                    self._serverDocuments[collection].forEach(serverDoc => {
                      const writtenByStubForAMethodWithSentMessage = keys(serverDoc.writtenByStubs).some(methodId => {
                        var invoker = self._methodInvokers[methodId];
                        return invoker && invoker.sentMessage;
                      });

                      if (writtenByStubForAMethodWithSentMessage) {
                        ++unflushedServerDocCount;
                        serverDoc.flushCallbacks.push(onServerDocFlush);
                      }
                    });
                  });

                  if (unflushedServerDocCount === 0) {
                    // There aren't any buffered docs --- we can call f as soon as the current
                    // round of updates is applied!
                    runFAfterUpdates();
                  }
                }

                _livedata_nosub(msg) {
                  var self = this; // First pass it through _livedata_data, which only uses it to help get
                  // towards quiescence.

                  self._livedata_data(msg); // Do the rest of our processing immediately, with no
                  // buffering-until-quiescence.
                  // we weren't subbed anyway, or we initiated the unsub.


                  if (!hasOwn.call(self._subscriptions, msg.id)) {
                    return;
                  } // XXX COMPAT WITH 1.0.3.1 #errorCallback


                  var errorCallback = self._subscriptions[msg.id].errorCallback;
                  var stopCallback = self._subscriptions[msg.id].stopCallback;

                  self._subscriptions[msg.id].remove();

                  var meteorErrorFromMsg = msgArg => {
                    return msgArg && msgArg.error && new Meteor.Error(msgArg.error.error, msgArg.error.reason, msgArg.error.details);
                  }; // XXX COMPAT WITH 1.0.3.1 #errorCallback


                  if (errorCallback && msg.error) {
                    errorCallback(meteorErrorFromMsg(msg));
                  }

                  if (stopCallback) {
                    stopCallback(meteorErrorFromMsg(msg));
                  }
                }

                _livedata_result(msg) {
                  // id, result or error. error has error (code), reason, details
                  var self = this; // Lets make sure there are no buffered writes before returning result.

                  if (!isEmpty(self._bufferedWrites)) {
                    self._flushBufferedWrites();
                  } // find the outstanding request
                  // should be O(1) in nearly all realistic use cases


                  if (isEmpty(self._outstandingMethodBlocks)) {
                    Meteor._debug('Received method result but no methods outstanding');

                    return;
                  }

                  var currentMethodBlock = self._outstandingMethodBlocks[0].methods;
                  var m;

                  for (var i = 0; i < currentMethodBlock.length; i++) {
                    m = currentMethodBlock[i];
                    if (m.methodId === msg.id) break;
                  }

                  if (!m) {
                    Meteor._debug("Can't match method response to original method call", msg);

                    return;
                  } // Remove from current method block. This may leave the block empty, but we
                  // don't move on to the next block until the callback has been delivered, in
                  // _outstandingMethodFinished.


                  currentMethodBlock.splice(i, 1);

                  if (hasOwn.call(msg, 'error')) {
                    m.receiveResult(new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details));
                  } else {
                    // msg.result may be undefined if the method didn't return a
                    // value
                    m.receiveResult(undefined, msg.result);
                  }
                } // Called by MethodInvoker after a method's callback is invoked.  If this was
                // the last outstanding method in the current block, runs the next block. If
                // there are no more methods, consider accepting a hot code push.


                _outstandingMethodFinished() {
                  var self = this;
                  if (self._anyMethodsAreOutstanding()) return; // No methods are outstanding. This should mean that the first block of
                  // methods is empty. (Or it might not exist, if this was a method that
                  // half-finished before disconnect/reconnect.)

                  if (!isEmpty(self._outstandingMethodBlocks)) {
                    var firstBlock = self._outstandingMethodBlocks.shift();

                    if (!isEmpty(firstBlock.methods)) throw new Error('No methods outstanding but nonempty block: ' + JSON.stringify(firstBlock)); // Send the outstanding methods now in the first block.

                    if (!isEmpty(self._outstandingMethodBlocks)) self._sendOutstandingMethods();
                  } // Maybe accept a hot code push.


                  self._maybeMigrate();
                } // Sends messages for all the methods in the first block in
                // _outstandingMethodBlocks.


                _sendOutstandingMethods() {
                  var self = this;

                  if (isEmpty(self._outstandingMethodBlocks)) {
                    return;
                  }

                  self._outstandingMethodBlocks[0].methods.forEach(m => {
                    m.sendMessage();
                  });
                }

                _livedata_error(msg) {
                  Meteor._debug('Received error from server: ', msg.reason);

                  if (msg.offendingMessage) Meteor._debug('For: ', msg.offendingMessage);
                }

                _callOnReconnectAndSendAppropriateOutstandingMethods() {
                  var self = this;
                  var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;
                  self._outstandingMethodBlocks = [];
                  self.onReconnect && self.onReconnect();

                  DDP._reconnectHook.each(callback => {
                    callback(self);
                    return true;
                  });

                  if (isEmpty(oldOutstandingMethodBlocks)) return; // We have at least one block worth of old outstanding methods to try
                  // again. First: did onReconnect actually send anything? If not, we just
                  // restore all outstanding methods and run the first block.

                  if (isEmpty(self._outstandingMethodBlocks)) {
                    self._outstandingMethodBlocks = oldOutstandingMethodBlocks;

                    self._sendOutstandingMethods();

                    return;
                  } // OK, there are blocks on both sides. Special case: merge the last block of
                  // the reconnect methods with the first block of the original methods, if
                  // neither of them are "wait" blocks.


                  if (!last(self._outstandingMethodBlocks).wait && !oldOutstandingMethodBlocks[0].wait) {
                    oldOutstandingMethodBlocks[0].methods.forEach(m => {
                      last(self._outstandingMethodBlocks).methods.push(m); // If this "last block" is also the first block, send the message.

                      if (self._outstandingMethodBlocks.length === 1) {
                        m.sendMessage();
                      }
                    });
                    oldOutstandingMethodBlocks.shift();
                  } // Now add the rest of the original blocks on.


                  oldOutstandingMethodBlocks.forEach(block => {
                    self._outstandingMethodBlocks.push(block);
                  });
                } // We can accept a hot code push if there are no methods in flight.


                _readyToMigrate() {
                  return isEmpty(this._methodInvokers);
                } // If we were blocking a migration, see if it's now possible to continue.
                // Call whenever the set of outstanding/blocked methods shrinks.


                _maybeMigrate() {
                  var self = this;

                  if (self._retryMigrate && self._readyToMigrate()) {
                    self._retryMigrate();

                    self._retryMigrate = null;
                  }
                }

                onMessage(raw_msg) {
                  try {
                    var msg = DDPCommon.parseDDP(raw_msg);
                  } catch (e) {
                    Meteor._debug('Exception while parsing DDP', e);

                    return;
                  } // Any message counts as receiving a pong, as it demonstrates that
                  // the server is still alive.


                  if (this._heartbeat) {
                    this._heartbeat.messageReceived();
                  }

                  if (msg === null || !msg.msg) {
                    // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back
                    // compat.  Remove this 'if' once the server stops sending welcome
                    // messages (stream_server.js).
                    if (!(msg && msg.server_id)) Meteor._debug('discarding invalid livedata message', msg);
                    return;
                  }

                  if (msg.msg === 'connected') {
                    this._version = this._versionSuggestion;

                    this._livedata_connected(msg);

                    this.options.onConnected();
                  } else if (msg.msg === 'failed') {
                    if (this._supportedDDPVersions.indexOf(msg.version) >= 0) {
                      this._versionSuggestion = msg.version;

                      this._stream.reconnect({
                        _force: true
                      });
                    } else {
                      var description = 'DDP version negotiation failed; server requested version ' + msg.version;

                      this._stream.disconnect({
                        _permanent: true,
                        _error: description
                      });

                      this.options.onDDPVersionNegotiationFailure(description);
                    }
                  } else if (msg.msg === 'ping' && this.options.respondToPings) {
                    this._send({
                      msg: 'pong',
                      id: msg.id
                    });
                  } else if (msg.msg === 'pong') {// noop, as we assume everything's a pong
                  } else if (['added', 'changed', 'removed', 'ready', 'updated'].includes(msg.msg)) {
                    this._livedata_data(msg);
                  } else if (msg.msg === 'nosub') {
                    this._livedata_nosub(msg);
                  } else if (msg.msg === 'result') {
                    this._livedata_result(msg);
                  } else if (msg.msg === 'error') {
                    this._livedata_error(msg);
                  } else {
                    Meteor._debug('discarding unknown livedata message type', msg);
                  }
                }

                onReset() {
                  // Send a connect message at the beginning of the stream.
                  // NOTE: reset is called even on the first connection, so this is
                  // the only place we send this message.
                  var msg = {
                    msg: 'connect'
                  };
                  if (this._lastSessionId) msg.session = this._lastSessionId;
                  msg.version = this._versionSuggestion || this._supportedDDPVersions[0];
                  this._versionSuggestion = msg.version;
                  msg.support = this._supportedDDPVersions;

                  this._send(msg); // Mark non-retry calls as failed. This has to be done early as getting these methods out of the
                  // current block is pretty important to making sure that quiescence is properly calculated, as
                  // well as possibly moving on to another useful block.
                  // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if
                  // we are connecting for the first time.


                  if (this._outstandingMethodBlocks.length > 0) {
                    // If there is an outstanding method block, we only care about the first one as that is the
                    // one that could have already sent messages with no response, that are not allowed to retry.
                    const currentMethodBlock = this._outstandingMethodBlocks[0].methods;
                    this._outstandingMethodBlocks[0].methods = currentMethodBlock.filter(methodInvoker => {
                      // Methods with 'noRetry' option set are not allowed to re-send after
                      // recovering dropped connection.
                      if (methodInvoker.sentMessage && methodInvoker.noRetry) {
                        // Make sure that the method is told that it failed.
                        methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));
                      } // Only keep a method if it wasn't sent or it's allowed to retry.
                      // This may leave the block empty, but we don't move on to the next
                      // block until the callback has been delivered, in _outstandingMethodFinished.


                      return !(methodInvoker.sentMessage && methodInvoker.noRetry);
                    });
                  } // Now, to minimize setup latency, go ahead and blast out all of
                  // our pending methods ands subscriptions before we've even taken
                  // the necessary RTT to know if we successfully reconnected. (1)
                  // They're supposed to be idempotent, and where they are not,
                  // they can block retry in apply; (2) even if we did reconnect,
                  // we're not sure what messages might have gotten lost
                  // (in either direction) since we were disconnected (TCP being
                  // sloppy about that.)
                  // If the current block of methods all got their results (but didn't all get
                  // their data visible), discard the empty block now.


                  if (this._outstandingMethodBlocks.length > 0 && this._outstandingMethodBlocks[0].methods.length === 0) {
                    this._outstandingMethodBlocks.shift();
                  } // Mark all messages as unsent, they have not yet been sent on this
                  // connection.


                  keys(this._methodInvokers).forEach(id => {
                    this._methodInvokers[id].sentMessage = false;
                  }); // If an `onReconnect` handler is set, call it first. Go through
                  // some hoops to ensure that methods that are called from within
                  // `onReconnect` get executed _before_ ones that were originally
                  // outstanding (since `onReconnect` is used to re-establish auth
                  // certificates)

                  this._callOnReconnectAndSendAppropriateOutstandingMethods(); // add new subscriptions at the end. this way they take effect after
                  // the handlers and we don't see flicker.


                  keys(this._subscriptions).forEach(id => {
                    const sub = this._subscriptions[id];

                    this._send({
                      msg: 'sub',
                      id: id,
                      name: sub.name,
                      params: sub.params
                    });
                  });
                }

              }
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "namespace.js": function (_require6, _exports6, _module5) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/namespace.js                                                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module5.export({
                DDP: () => DDP
              });
              let DDPCommon;
              _module5.link("meteor/ddp-common", {
                DDPCommon(v) {
                  DDPCommon = v;
                }

              }, 0);
              let Meteor;
              _module5.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 1);
              let keys;
              _module5.link("meteor/ddp-common/utils.js", {
                keys(v) {
                  keys = v;
                }

              }, 2);
              let Connection;
              _module5.link("./livedata_connection.js", {
                Connection(v) {
                  Connection = v;
                }

              }, 3);
              // This array allows the `_allSubscriptionsReady` method below, which
              // is used by the `spiderable` package, to keep track of whether all
              // data is ready.
              const allConnections = [];
              /**
               * @namespace DDP
               * @summary Namespace for DDP-related methods/classes.
               */

              const DDP = {};
              // This is private but it's used in a few places. accounts-base uses
              // it to get the current user. Meteor.setTimeout and friends clear
              // it. We can probably find a better way to factor this.
              DDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable();
              DDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable(); // XXX: Keep DDP._CurrentInvocation for backwards-compatibility.

              DDP._CurrentInvocation = DDP._CurrentMethodInvocation; // This is passed into a weird `makeErrorType` function that expects its thing
              // to be a constructor

              function connectionErrorConstructor(message) {
                this.message = message;
              }

              DDP.ConnectionError = Meteor.makeErrorType('DDP.ConnectionError', connectionErrorConstructor);
              DDP.ForcedReconnectError = Meteor.makeErrorType('DDP.ForcedReconnectError', () => {}); // Returns the named sequence of pseudo-random values.
              // The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce
              // consistent values for method calls on the client and server.

              DDP.randomStream = name => {
                var scope = DDP._CurrentMethodInvocation.get();

                return DDPCommon.RandomStream.get(scope, name);
              }; // @param url {String} URL to Meteor app,
              //     e.g.:
              //     "subdomain.meteor.com",
              //     "http://subdomain.meteor.com",
              //     "/",
              //     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"

              /**
               * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
               * @locus Anywhere
               * @param {String} url The URL of another Meteor application.
               */

              DDP.connect = (url, options) => {
                var ret = new Connection(url, options);
                allConnections.push(ret); // hack. see below.

                return ret;
              };

              DDP._reconnectHook = new Hook({
                bindEnvironment: false
              });
              /**
               * @summary Register a function to call as the first step of
               * reconnecting. This function can call methods which will be executed before
               * any other outstanding methods. For example, this can be used to re-establish
               * the appropriate authentication context on the connection.
               * @locus Anywhere
               * @param {Function} callback The function to call. It will be called with a
               * single argument, the [connection object](#ddp_connect) that is reconnecting.
               */

              DDP.onReconnect = callback => {
                return DDP._reconnectHook.register(callback);
              }; // Hack for `spiderable` package: a way to see if the page is done
              // loading all the data it needs.
              //


              DDP._allSubscriptionsReady = () => {
                return allConnections.every(conn => {
                  return keys(conn._subscriptions).every(id => {
                    return conn._subscriptions[id].ready;
                  });
                });
              };
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ddp-client/client/client.js");

  /* Exports */
  Package._define("ddp-client", _exports2, {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Exports */
  Package._define("ddp", {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ddp-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var AllowDeny;

  var _require = meteorInstall({ "node_modules": { "meteor": { "allow-deny": { "allow-deny.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/allow-deny/allow-deny.js                                                                                  //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            ///
            /// Remote methods and access control.
            ///
            const hasOwn = Object.prototype.hasOwnProperty; // Restrict default mutators on collection. allow() and deny() take the
            // same options:
            //
            // options.insert {Function(userId, doc)}
            //   return true to allow/deny adding this document
            //
            // options.update {Function(userId, docs, fields, modifier)}
            //   return true to allow/deny updating these documents.
            //   `fields` is passed as an array of fields that are to be modified
            //
            // options.remove {Function(userId, docs)}
            //   return true to allow/deny removing these documents
            //
            // options.fetch {Array}
            //   Fields to fetch for these validators. If any call to allow or deny
            //   does not have this option then all fields are loaded.
            //
            // allow and deny can be called multiple times. The validators are
            // evaluated as follows:
            // - If neither deny() nor allow() has been called on the collection,
            //   then the request is allowed if and only if the "insecure" smart
            //   package is in use.
            // - Otherwise, if any deny() function returns true, the request is denied.
            // - Otherwise, if any allow() function returns true, the request is allowed.
            // - Otherwise, the request is denied.
            //
            // Meteor may call your deny() and allow() functions in any order, and may not
            // call all of them if it is able to make a decision without calling them all
            // (so don't include side effects).

            AllowDeny = {
              CollectionPrototype: {}
            }; // In the `mongo` package, we will extend Mongo.Collection.prototype with these
            // methods

            const CollectionPrototype = AllowDeny.CollectionPrototype;
            /**
             * @summary Allow users to write directly to this collection from client code, subject to limitations you define.
             * @locus Server
             * @method allow
             * @memberOf Mongo.Collection
             * @instance
             * @param {Object} options
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */

            CollectionPrototype.allow = function (options) {
              addValidator(this, 'allow', options);
            };
            /**
             * @summary Override `allow` rules.
             * @locus Server
             * @method deny
             * @memberOf Mongo.Collection
             * @instance
             * @param {Object} options
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */

            CollectionPrototype.deny = function (options) {
              addValidator(this, 'deny', options);
            };

            CollectionPrototype._defineMutationMethods = function (options) {
              const self = this;
              options = options || {}; // set to true once we call any allow or deny methods. If true, use
              // allow/deny semantics. If false, use insecure mode semantics.

              self._restricted = false; // Insecure mode (default to allowing writes). Defaults to 'undefined' which
              // means insecure iff the insecure package is loaded. This property can be
              // overriden by tests or packages wishing to change insecure mode behavior of
              // their collections.

              self._insecure = undefined;
              self._validators = {
                insert: {
                  allow: [],
                  deny: []
                },
                update: {
                  allow: [],
                  deny: []
                },
                remove: {
                  allow: [],
                  deny: []
                },
                upsert: {
                  allow: [],
                  deny: []
                },
                // dummy arrays; can't set these!
                fetch: [],
                fetchAllFields: false
              };
              if (!self._name) return; // anonymous collection
              // XXX Think about method namespacing. Maybe methods should be
              // "Meteor:Mongo:insert/NAME"?

              self._prefix = '/' + self._name + '/'; // Mutation Methods
              // Minimongo on the server gets no stubs; instead, by default
              // it wait()s until its result is ready, yielding.
              // This matches the behavior of macromongo on the server better.
              // XXX see #MeteorServerNull

              if (self._connection && (self._connection === Meteor.server || Meteor.isClient)) {
                const m = {};
                ['insert', 'update', 'remove'].forEach(method => {
                  const methodName = self._prefix + method;

                  if (options.useExisting) {
                    const handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers'; // Do not try to create additional methods if this has already been called.
                    // (Otherwise the .methods() call below will throw an error.)

                    if (self._connection[handlerPropName] && typeof self._connection[handlerPropName][methodName] === 'function') return;
                  }

                  m[methodName] = function ()
                  /* ... */
                  {
                    // All the methods do their own validation, instead of using check().
                    check(arguments, [Match.Any]);
                    const args = Array.from(arguments);

                    try {
                      // For an insert, if the client didn't specify an _id, generate one
                      // now; because this uses DDP.randomStream, it will be consistent with
                      // what the client generated. We generate it now rather than later so
                      // that if (eg) an allow/deny rule does an insert to the same
                      // collection (not that it really should), the generated _id will
                      // still be the first use of the stream and will be consistent.
                      //
                      // However, we don't actually stick the _id onto the document yet,
                      // because we want allow/deny rules to be able to differentiate
                      // between arbitrary client-specified _id fields and merely
                      // client-controlled-via-randomSeed fields.
                      let generatedId = null;

                      if (method === "insert" && !hasOwn.call(args[0], '_id')) {
                        generatedId = self._makeNewID();
                      }

                      if (this.isSimulation) {
                        // In a client simulation, you can do any mutation (even with a
                        // complex selector).
                        if (generatedId !== null) args[0]._id = generatedId;
                        return self._collection[method].apply(self._collection, args);
                      } // This is the server receiving a method call from the client.
                      // We don't allow arbitrary selectors in mutations from the client: only
                      // single-ID selectors.


                      if (method !== 'insert') throwIfSelectorIsNotId(args[0], method);

                      if (self._restricted) {
                        // short circuit if there is no way it will pass.
                        if (self._validators[method].allow.length === 0) {
                          throw new Meteor.Error(403, "Access denied. No allow validators set on restricted " + "collection for method '" + method + "'.");
                        }

                        const validatedMethodName = '_validated' + method.charAt(0).toUpperCase() + method.slice(1);
                        args.unshift(this.userId);
                        method === 'insert' && args.push(generatedId);
                        return self[validatedMethodName].apply(self, args);
                      } else if (self._isInsecure()) {
                        if (generatedId !== null) args[0]._id = generatedId; // In insecure mode, allow any mutation (with a simple selector).
                        // XXX This is kind of bogus.  Instead of blindly passing whatever
                        //     we get from the network to this function, we should actually
                        //     know the correct arguments for the function and pass just
                        //     them.  For example, if you have an extraneous extra null
                        //     argument and this is Mongo on the server, the .wrapAsync'd
                        //     functions like update will get confused and pass the
                        //     "fut.resolver()" in the wrong slot, where _update will never
                        //     invoke it. Bam, broken DDP connection.  Probably should just
                        //     take this whole method and write it three times, invoking
                        //     helpers for the common code.

                        return self._collection[method].apply(self._collection, args);
                      } else {
                        // In secure mode, if we haven't called allow or deny, then nothing
                        // is permitted.
                        throw new Meteor.Error(403, "Access denied");
                      }
                    } catch (e) {
                      if (e.name === 'MongoError' || e.name === 'MinimongoError') {
                        throw new Meteor.Error(409, e.toString());
                      } else {
                        throw e;
                      }
                    }
                  };
                });

                self._connection.methods(m);
              }
            };

            CollectionPrototype._updateFetch = function (fields) {
              const self = this;

              if (!self._validators.fetchAllFields) {
                if (fields) {
                  const union = Object.create(null);

                  const add = names => names && names.forEach(name => union[name] = 1);

                  add(self._validators.fetch);
                  add(fields);
                  self._validators.fetch = Object.keys(union);
                } else {
                  self._validators.fetchAllFields = true; // clear fetch just to make sure we don't accidentally read it

                  self._validators.fetch = null;
                }
              }
            };

            CollectionPrototype._isInsecure = function () {
              const self = this;
              if (self._insecure === undefined) return !!Package.insecure;
              return self._insecure;
            };

            CollectionPrototype._validatedInsert = function (userId, doc, generatedId) {
              const self = this; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.insert.deny.some(validator => {
                return validator(userId, docToValidate(validator, doc, generatedId));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.insert.allow.every(validator => {
                return !validator(userId, docToValidate(validator, doc, generatedId));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // If we generated an ID above, insert it now: after the validation, but
              // before actually inserting.


              if (generatedId !== null) doc._id = generatedId;

              self._collection.insert.call(self._collection, doc);
            }; // Simulate a mongo `update` operation while validating that the access
            // control rules set by calls to `allow/deny` are satisfied. If all
            // pass, rewrite the mongo operation to use $in to set the list of
            // document ids to change ##ValidatedChange


            CollectionPrototype._validatedUpdate = function (userId, selector, mutator, options) {
              const self = this;
              check(mutator, Object);
              options = Object.assign(Object.create(null), options);
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) throw new Error("validated update should be of a single ID"); // We don't support upserts because they don't fit nicely into allow/deny
              // rules.

              if (options.upsert) throw new Meteor.Error(403, "Access denied. Upserts not " + "allowed in a restricted collection.");
              const noReplaceError = "Access denied. In a restricted collection you can only" + " update documents, not replace them. Use a Mongo update operator, such " + "as '$set'.";
              const mutatorKeys = Object.keys(mutator); // compute modified fields

              const modifiedFields = {};

              if (mutatorKeys.length === 0) {
                throw new Meteor.Error(403, noReplaceError);
              }

              mutatorKeys.forEach(op => {
                const params = mutator[op];

                if (op.charAt(0) !== '$') {
                  throw new Meteor.Error(403, noReplaceError);
                } else if (!hasOwn.call(ALLOWED_UPDATE_OPERATIONS, op)) {
                  throw new Meteor.Error(403, "Access denied. Operator " + op + " not allowed in a restricted collection.");
                } else {
                  Object.keys(params).forEach(field => {
                    // treat dotted fields as if they are replacing their
                    // top-level part
                    if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.')); // record the field we are trying to change

                    modifiedFields[field] = true;
                  });
                }
              });
              const fields = Object.keys(modifiedFields);
              const findOptions = {
                transform: null
              };

              if (!self._validators.fetchAllFields) {
                findOptions.fields = {};

                self._validators.fetch.forEach(fieldName => {
                  findOptions.fields[fieldName] = 1;
                });
              }

              const doc = self._collection.findOne(selector, findOptions);

              if (!doc) // none satisfied!
                return 0; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.update.deny.some(validator => {
                const factoriedDoc = transformDoc(validator, doc);
                return validator(userId, factoriedDoc, fields, mutator);
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.update.allow.every(validator => {
                const factoriedDoc = transformDoc(validator, doc);
                return !validator(userId, factoriedDoc, fields, mutator);
              })) {
                throw new Meteor.Error(403, "Access denied");
              }

              options._forbidReplace = true; // Back when we supported arbitrary client-provided selectors, we actually
              // rewrote the selector to include an _id clause before passing to Mongo to
              // avoid races, but since selector is guaranteed to already just be an ID, we
              // don't have to any more.

              return self._collection.update.call(self._collection, selector, mutator, options);
            }; // Only allow these operations in validated updates. Specifically
            // whitelist operations, rather than blacklist, so new complex
            // operations that are added aren't automatically allowed. A complex
            // operation is one that does more than just modify its target
            // field. For now this contains all update operations except '$rename'.
            // http://docs.mongodb.org/manual/reference/operators/#update


            const ALLOWED_UPDATE_OPERATIONS = {
              $inc: 1,
              $set: 1,
              $unset: 1,
              $addToSet: 1,
              $pop: 1,
              $pullAll: 1,
              $pull: 1,
              $pushAll: 1,
              $push: 1,
              $bit: 1
            }; // Simulate a mongo `remove` operation while validating access control
            // rules. See #ValidatedChange

            CollectionPrototype._validatedRemove = function (userId, selector) {
              const self = this;
              const findOptions = {
                transform: null
              };

              if (!self._validators.fetchAllFields) {
                findOptions.fields = {};

                self._validators.fetch.forEach(fieldName => {
                  findOptions.fields[fieldName] = 1;
                });
              }

              const doc = self._collection.findOne(selector, findOptions);

              if (!doc) return 0; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.remove.deny.some(validator => {
                return validator(userId, transformDoc(validator, doc));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.remove.allow.every(validator => {
                return !validator(userId, transformDoc(validator, doc));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Back when we supported arbitrary client-provided selectors, we actually
              // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to
              // Mongo to avoid races, but since selector is guaranteed to already just be
              // an ID, we don't have to any more.


              return self._collection.remove.call(self._collection, selector);
            };

            CollectionPrototype._callMutatorMethod = function _callMutatorMethod(name, args, callback) {
              if (Meteor.isClient && !callback && !alreadyInSimulation()) {
                // Client can't block, so it can't report errors by exception,
                // only by callback. If they forget the callback, give them a
                // default one that logs the error, so they aren't totally
                // baffled if their writes don't work because their database is
                // down.
                // Don't give a default callback in simulation, because inside stubs we
                // want to return the results from the local collection immediately and
                // not force a callback.
                callback = function (err) {
                  if (err) Meteor._debug(name + " failed: " + (err.reason || err.stack));
                };
              } // For two out of three mutator methods, the first argument is a selector


              const firstArgIsSelector = name === "update" || name === "remove";

              if (firstArgIsSelector && !alreadyInSimulation()) {
                // If we're about to actually send an RPC, we should throw an error if
                // this is a non-ID selector, because the mutation methods only allow
                // single-ID selectors. (If we don't throw here, we'll see flicker.)
                throwIfSelectorIsNotId(args[0], name);
              }

              const mutatorMethodName = this._prefix + name;
              return this._connection.apply(mutatorMethodName, args, {
                returnStubValue: true
              }, callback);
            };

            function transformDoc(validator, doc) {
              if (validator.transform) return validator.transform(doc);
              return doc;
            }

            function docToValidate(validator, doc, generatedId) {
              let ret = doc;

              if (validator.transform) {
                ret = EJSON.clone(doc); // If you set a server-side transform on your collection, then you don't get
                // to tell the difference between "client specified the ID" and "server
                // generated the ID", because transforms expect to get _id.  If you want to
                // do that check, you can do it with a specific
                // `C.allow({insert: f, transform: null})` validator.

                if (generatedId !== null) {
                  ret._id = generatedId;
                }

                ret = validator.transform(ret);
              }

              return ret;
            }

            function addValidator(collection, allowOrDeny, options) {
              // validate keys
              const validKeysRegEx = /^(?:insert|update|remove|fetch|transform)$/;
              Object.keys(options).forEach(key => {
                if (!validKeysRegEx.test(key)) throw new Error(allowOrDeny + ": Invalid key: " + key);
              });
              collection._restricted = true;
              ['insert', 'update', 'remove'].forEach(name => {
                if (hasOwn.call(options, name)) {
                  if (!(options[name] instanceof Function)) {
                    throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function");
                  } // If the transform is specified at all (including as 'null') in this
                  // call, then take that; otherwise, take the transform from the
                  // collection.


                  if (options.transform === undefined) {
                    options[name].transform = collection._transform; // already wrapped
                  } else {
                    options[name].transform = LocalCollection.wrapTransform(options.transform);
                  }

                  collection._validators[name][allowOrDeny].push(options[name]);
                }
              }); // Only update the fetch fields if we're passed things that affect
              // fetching. This way allow({}) and allow({insert: f}) don't result in
              // setting fetchAllFields

              if (options.update || options.remove || options.fetch) {
                if (options.fetch && !(options.fetch instanceof Array)) {
                  throw new Error(allowOrDeny + ": Value for `fetch` must be an array");
                }

                collection._updateFetch(options.fetch);
              }
            }

            function throwIfSelectorIsNotId(selector, methodName) {
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                throw new Meteor.Error(403, "Not permitted. Untrusted code may only " + methodName + " documents by ID.");
              }
            }

            ; // Determine if we are in a DDP method simulation

            function alreadyInSimulation() {
              var CurrentInvocation = DDP._CurrentMethodInvocation || // For backwards compatibility, as explained in this issue:
              // https://github.com/meteor/meteor/issues/8947
              DDP._CurrentInvocation;
              const enclosing = CurrentInvocation.get();
              return enclosing && enclosing.isSimulation;
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/allow-deny/allow-deny.js");

  /* Exports */
  Package._define("allow-deny", {
    AllowDeny: AllowDeny
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("mongo-dev-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var AllowDeny = Package['allow-deny'].AllowDeny;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var DDP = Package['ddp-client'].DDP;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Mongo, selector, callback, options;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "mongo": { "local_collection_driver.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/mongo/local_collection_driver.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              LocalCollectionDriver: () => LocalCollectionDriver
            });
            const LocalCollectionDriver = new class LocalCollectionDriver {
              constructor() {
                this.noConnCollections = Object.create(null);
              }

              open(name, conn) {
                if (!name) {
                  return new LocalCollection();
                }

                if (!conn) {
                  return ensureCollection(name, this.noConnCollections);
                }

                if (!conn._mongo_livedata_collections) {
                  conn._mongo_livedata_collections = Object.create(null);
                } // XXX is there a way to keep track of a connection's collections without
                // dangling it off the connection object?


                return ensureCollection(name, conn._mongo_livedata_collections);
              }

            }();

            function ensureCollection(name, collections) {
              return name in collections ? collections[name] : collections[name] = new LocalCollection(name);
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "collection.js": function (_require3, _exports2, _module2) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/mongo/collection.js                                                                                       //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

            var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

            // options.connection, if given, is a LivedataClient or LivedataServer
            // XXX presently there is no way to destroy/clean up a Collection

            /**
             * @summary Namespace for MongoDB-related items
             * @namespace
             */
            Mongo = {};
            /**
             * @summary Constructor for a Collection
             * @locus Anywhere
             * @instancename collection
             * @class
             * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
             * @param {Object} [options]
             * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
             * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
            
             - **`'STRING'`**: random strings
             - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values
            
            The default id generation technique is `'STRING'`.
             * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
             * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.
             */

            Mongo.Collection = function Collection(name, options) {
              if (!name && name !== null) {
                Meteor._debug("Warning: creating anonymous collection. It will not be " + "saved or synchronized over the network. (Pass null for " + "the collection name to turn off this warning.)");

                name = null;
              }

              if (name !== null && typeof name !== "string") {
                throw new Error("First argument to new Mongo.Collection must be a string or null");
              }

              if (options && options.methods) {
                // Backwards compatibility hack with original signature (which passed
                // "connection" directly instead of in options. (Connections must have a "methods"
                // method.)
                // XXX remove before 1.0
                options = {
                  connection: options
                };
              } // Backwards compatibility: "connection" used to be called "manager".


              if (options && options.manager && !options.connection) {
                options.connection = options.manager;
              }

              options = (0, _objectSpread2.default)({
                connection: undefined,
                idGeneration: 'STRING',
                transform: null,
                _driver: undefined,
                _preventAutopublish: false
              }, options);

              switch (options.idGeneration) {
                case 'MONGO':
                  this._makeNewID = function () {
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;
                    return new Mongo.ObjectID(src.hexString(24));
                  };

                  break;

                case 'STRING':
                default:
                  this._makeNewID = function () {
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;
                    return src.id();
                  };

                  break;
              }

              this._transform = LocalCollection.wrapTransform(options.transform);
              if (!name || options.connection === null) // note: nameless collections never have a connection
                this._connection = null;else if (options.connection) this._connection = options.connection;else if (Meteor.isClient) this._connection = Meteor.connection;else this._connection = Meteor.server;

              if (!options._driver) {
                // XXX This check assumes that webapp is loaded so that Meteor.server !==
                // null. We should fully support the case of "want to use a Mongo-backed
                // collection from Node code without webapp", but we don't yet.
                // #MeteorServerNull
                if (name && this._connection === Meteor.server && typeof MongoInternals !== "undefined" && MongoInternals.defaultRemoteCollectionDriver) {
                  options._driver = MongoInternals.defaultRemoteCollectionDriver();
                } else {
                  const {
                    LocalCollectionDriver
                  } = _require3("./local_collection_driver.js");

                  options._driver = LocalCollectionDriver;
                }
              }

              this._collection = options._driver.open(name, this._connection);
              this._name = name;
              this._driver = options._driver;

              this._maybeSetUpReplication(name, options); // XXX don't define these until allow or deny is actually used for this
              // collection. Could be hard if the security rules are only defined on the
              // server.


              if (options.defineMutationMethods !== false) {
                try {
                  this._defineMutationMethods({
                    useExisting: options._suppressSameNameError === true
                  });
                } catch (error) {
                  // Throw a more understandable error on the server for same collection name
                  if (error.message === "A method named '/".concat(name, "/insert' is already defined")) throw new Error("There is already a collection named \"".concat(name, "\""));
                  throw error;
                }
              } // autopublish


              if (Package.autopublish && !options._preventAutopublish && this._connection && this._connection.publish) {
                this._connection.publish(null, () => this.find(), {
                  is_auto: true
                });
              }
            };

            Object.assign(Mongo.Collection.prototype, {
              _maybeSetUpReplication(name, _ref) {
                let {
                  _suppressSameNameError = false
                } = _ref;
                const self = this;

                if (!(self._connection && self._connection.registerStore)) {
                  return;
                } // OK, we're going to be a slave, replicating some remote
                // database, except possibly with some temporary divergence while
                // we have unacknowledged RPC's.


                const ok = self._connection.registerStore(name, {
                  // Called at the beginning of a batch of updates. batchSize is the number
                  // of update calls to expect.
                  //
                  // XXX This interface is pretty janky. reset probably ought to go back to
                  // being its own function, and callers shouldn't have to calculate
                  // batchSize. The optimization of not calling pause/remove should be
                  // delayed until later: the first call to update() should buffer its
                  // message, and then we can either directly apply it at endUpdate time if
                  // it was the only update, or do pauseObservers/apply/apply at the next
                  // update() if there's another one.
                  beginUpdate(batchSize, reset) {
                    // pause observers so users don't see flicker when updating several
                    // objects at once (including the post-reconnect reset-and-reapply
                    // stage), and so that a re-sorting of a query can take advantage of the
                    // full _diffQuery moved calculation instead of applying change one at a
                    // time.
                    if (batchSize > 1 || reset) self._collection.pauseObservers();
                    if (reset) self._collection.remove({});
                  },

                  // Apply an update.
                  // XXX better specify this interface (not in terms of a wire message)?
                  update(msg) {
                    var mongoId = MongoID.idParse(msg.id);

                    var doc = self._collection.findOne(mongoId); // Is this a "replace the whole doc" message coming from the quiescence
                    // of method writes to an object? (Note that 'undefined' is a valid
                    // value meaning "remove it".)


                    if (msg.msg === 'replace') {
                      var replace = msg.replace;

                      if (!replace) {
                        if (doc) self._collection.remove(mongoId);
                      } else if (!doc) {
                        self._collection.insert(replace);
                      } else {
                        // XXX check that replace has no $ ops
                        self._collection.update(mongoId, replace);
                      }

                      return;
                    } else if (msg.msg === 'added') {
                      if (doc) {
                        throw new Error("Expected not to find a document already present for an add");
                      }

                      self._collection.insert((0, _objectSpread2.default)({
                        _id: mongoId
                      }, msg.fields));
                    } else if (msg.msg === 'removed') {
                      if (!doc) throw new Error("Expected to find a document already present for removed");

                      self._collection.remove(mongoId);
                    } else if (msg.msg === 'changed') {
                      if (!doc) throw new Error("Expected to find a document to change");
                      const keys = Object.keys(msg.fields);

                      if (keys.length > 0) {
                        var modifier = {};
                        keys.forEach(key => {
                          const value = msg.fields[key];

                          if (EJSON.equals(doc[key], value)) {
                            return;
                          }

                          if (typeof value === "undefined") {
                            if (!modifier.$unset) {
                              modifier.$unset = {};
                            }

                            modifier.$unset[key] = 1;
                          } else {
                            if (!modifier.$set) {
                              modifier.$set = {};
                            }

                            modifier.$set[key] = value;
                          }
                        });

                        if (Object.keys(modifier).length > 0) {
                          self._collection.update(mongoId, modifier);
                        }
                      }
                    } else {
                      throw new Error("I don't know how to deal with this message");
                    }
                  },

                  // Called at the end of a batch of updates.
                  endUpdate() {
                    self._collection.resumeObservers();
                  },

                  // Called around method stub invocations to capture the original versions
                  // of modified documents.
                  saveOriginals() {
                    self._collection.saveOriginals();
                  },

                  retrieveOriginals() {
                    return self._collection.retrieveOriginals();
                  },

                  // Used to preserve current versions of documents across a store reset.
                  getDoc(id) {
                    return self.findOne(id);
                  },

                  // To be able to get back to the collection from the store.
                  _getCollection() {
                    return self;
                  }

                });

                if (!ok) {
                  const message = "There is already a collection named \"".concat(name, "\"");

                  if (_suppressSameNameError === true) {
                    // XXX In theory we do not have to throw when `ok` is falsy. The
                    // store is already defined for this collection name, but this
                    // will simply be another reference to it and everything should
                    // work. However, we have historically thrown an error here, so
                    // for now we will skip the error only when _suppressSameNameError
                    // is `true`, allowing people to opt in and give this some real
                    // world testing.
                    console.warn ? console.warn(message) : console.log(message);
                  } else {
                    throw new Error(message);
                  }
                }
              },

              ///
              /// Main collection API
              ///
              _getFindSelector(args) {
                if (args.length == 0) return {};else return args[0];
              },

              _getFindOptions(args) {
                var self = this;

                if (args.length < 2) {
                  return {
                    transform: self._transform
                  };
                } else {
                  check(args[1], Match.Optional(Match.ObjectIncluding({
                    fields: Match.Optional(Match.OneOf(Object, undefined)),
                    sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),
                    limit: Match.Optional(Match.OneOf(Number, undefined)),
                    skip: Match.Optional(Match.OneOf(Number, undefined))
                  })));
                  return (0, _objectSpread2.default)({
                    transform: self._transform
                  }, args[1]);
                }
              },

              /**
               * @summary Find the documents in a collection that match the selector.
               * @locus Anywhere
               * @method find
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} [selector] A query describing the documents to find
               * @param {Object} [options]
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)
               * @param {Number} options.skip Number of results to skip at the beginning
               * @param {Number} options.limit Maximum number of results to return
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
               * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity
               * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.
               * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).
               * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.
               * @param {Number} options.maxTimeMs (Server only) If set, instructs MongoDB to set a time limit for this cursor's operations. If the operation reaches the specified time limit (in milliseconds) without the having been completed, an exception will be thrown. Useful to prevent an (accidental or malicious) unoptimized query from causing a full collection scan that would disrupt other database users, at the expense of needing to handle the resulting error.
               * @param {String|Object} options.hint (Server only) Overrides MongoDB's default index selection and query optimization process. Specify an index to force its use, either by its name or index specification. You can also specify `{ $natural : 1 }` to force a forwards collection scan, or `{ $natural : -1 }` for a reverse collection scan. Setting this is only recommended for advanced users.
               * @returns {Mongo.Cursor}
               */
              find() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                // Collection.find() (return all docs) behaves differently
                // from Collection.find(undefined) (return 0 docs).  so be
                // careful about the length of arguments.
                return this._collection.find(this._getFindSelector(args), this._getFindOptions(args));
              },

              /**
               * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.
               * @locus Anywhere
               * @method findOne
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} [selector] A query describing the documents to find
               * @param {Object} [options]
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)
               * @param {Number} options.skip Number of results to skip at the beginning
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
               * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity
               * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @returns {Object}
               */
              findOne() {
                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = arguments[_key2];
                }

                return this._collection.findOne(this._getFindSelector(args), this._getFindOptions(args));
              }

            });
            Object.assign(Mongo.Collection, {
              _publishCursor(cursor, sub, collection) {
                var observeHandle = cursor.observeChanges({
                  added: function (id, fields) {
                    sub.added(collection, id, fields);
                  },
                  changed: function (id, fields) {
                    sub.changed(collection, id, fields);
                  },
                  removed: function (id) {
                    sub.removed(collection, id);
                  }
                }); // We don't call sub.ready() here: it gets called in livedata_server, after
                // possibly calling _publishCursor on multiple returned cursors.
                // register stop callback (expects lambda w/ no args).

                sub.onStop(function () {
                  observeHandle.stop();
                }); // return the observeHandle in case it needs to be stopped early

                return observeHandle;
              },

              // protect against dangerous selectors.  falsey and {_id: falsey} are both
              // likely programmer error, and not what you want, particularly for destructive
              // operations. If a falsey _id is sent in, a new string _id will be
              // generated and returned; if a fallbackId is provided, it will be returned
              // instead.
              _rewriteSelector(selector) {
                let {
                  fallbackId
                } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                // shorthand -- scalars match _id
                if (LocalCollection._selectorIsId(selector)) selector = {
                  _id: selector
                };

                if (Array.isArray(selector)) {
                  // This is consistent with the Mongo console itself; if we don't do this
                  // check passing an empty array ends up selecting all items
                  throw new Error("Mongo selector can't be an array.");
                }

                if (!selector || '_id' in selector && !selector._id) {
                  // can't match anything
                  return {
                    _id: fallbackId || Random.id()
                  };
                }

                return selector;
              }

            });
            Object.assign(Mongo.Collection.prototype, {
              // 'insert' immediately returns the inserted document's new _id.
              // The others return values immediately if you are in a stub, an in-memory
              // unmanaged collection, or a mongo-backed collection and you don't pass a
              // callback. 'update' and 'remove' return the number of affected
              // documents. 'upsert' returns an object with keys 'numberAffected' and, if an
              // insert happened, 'insertedId'.
              //
              // Otherwise, the semantics are exactly like other methods: they take
              // a callback as an optional last argument; if no callback is
              // provided, they block until the operation is complete, and throw an
              // exception if it fails; if a callback is provided, then they don't
              // necessarily block, and they call the callback when they finish with error and
              // result arguments.  (The insert method provides the document ID as its result;
              // update and remove provide the number of affected docs as the result; upsert
              // provides an object with numberAffected and maybe insertedId.)
              //
              // On the client, blocking is impossible, so if a callback
              // isn't provided, they just return immediately and any error
              // information is lost.
              //
              // There's one more tweak. On the client, if you don't provide a
              // callback, then if there is an error, a message will be logged with
              // Meteor._debug.
              //
              // The intent (though this is actually determined by the underlying
              // drivers) is that the operations should be done synchronously, not
              // generating their result until the database has acknowledged
              // them. In the future maybe we should provide a flag to turn this
              // off.

              /**
               * @summary Insert a document in the collection.  Returns its unique _id.
               * @locus Anywhere
               * @method  insert
               * @memberof Mongo.Collection
               * @instance
               * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
               * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
               */
              insert(doc, callback) {
                // Make sure we were passed a document to insert
                if (!doc) {
                  throw new Error("insert requires an argument");
                } // Make a shallow clone of the document, preserving its prototype.


                doc = Object.create(Object.getPrototypeOf(doc), Object.getOwnPropertyDescriptors(doc));

                if ('_id' in doc) {
                  if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {
                    throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs");
                  }
                } else {
                  let generateId = true; // Don't generate the id if we're the client and the 'outermost' call
                  // This optimization saves us passing both the randomSeed and the id
                  // Passing both is redundant.

                  if (this._isRemoteCollection()) {
                    const enclosing = DDP._CurrentMethodInvocation.get();

                    if (!enclosing) {
                      generateId = false;
                    }
                  }

                  if (generateId) {
                    doc._id = this._makeNewID();
                  }
                } // On inserts, always return the id that we generated; on all other
                // operations, just return the result from the collection.


                var chooseReturnValueFromCollectionResult = function (result) {
                  if (doc._id) {
                    return doc._id;
                  } // XXX what is this for??
                  // It's some iteraction between the callback to _callMutatorMethod and
                  // the return value conversion


                  doc._id = result;
                  return result;
                };

                const wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);

                if (this._isRemoteCollection()) {
                  const result = this._callMutatorMethod("insert", [doc], wrappedCallback);

                  return chooseReturnValueFromCollectionResult(result);
                } // it's my collection.  descend into the collection object
                // and propagate any exception.


                try {
                  // If the user provided a callback and the collection implements this
                  // operation asynchronously, then queryRet will be undefined, and the
                  // result will be returned through the callback instead.
                  const result = this._collection.insert(doc, wrappedCallback);

                  return chooseReturnValueFromCollectionResult(result);
                } catch (e) {
                  if (callback) {
                    callback(e);
                    return null;
                  }

                  throw e;
                }
              },

              /**
               * @summary Modify one or more documents in the collection. Returns the number of matched documents.
               * @locus Anywhere
               * @method update
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} selector Specifies which documents to modify
               * @param {MongoModifier} modifier Specifies how to modify the documents
               * @param {Object} [options]
               * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
               * @param {Boolean} options.upsert True to insert a document if no matching documents are found.
               * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
               */
              update(selector, modifier) {
                for (var _len3 = arguments.length, optionsAndCallback = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                  optionsAndCallback[_key3 - 2] = arguments[_key3];
                }

                const callback = popCallbackFromArgs(optionsAndCallback); // We've already popped off the callback, so we are left with an array
                // of one or zero items

                const options = (0, _objectSpread2.default)({}, optionsAndCallback[0] || null);
                let insertedId;

                if (options && options.upsert) {
                  // set `insertedId` if absent.  `insertedId` is a Meteor extension.
                  if (options.insertedId) {
                    if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error("insertedId must be string or ObjectID");
                    insertedId = options.insertedId;
                  } else if (!selector || !selector._id) {
                    insertedId = this._makeNewID();
                    options.generatedId = true;
                    options.insertedId = insertedId;
                  }
                }

                selector = Mongo.Collection._rewriteSelector(selector, {
                  fallbackId: insertedId
                });
                const wrappedCallback = wrapCallback(callback);

                if (this._isRemoteCollection()) {
                  const args = [selector, modifier, options];
                  return this._callMutatorMethod("update", args, wrappedCallback);
                } // it's my collection.  descend into the collection object
                // and propagate any exception.


                try {
                  // If the user provided a callback and the collection implements this
                  // operation asynchronously, then queryRet will be undefined, and the
                  // result will be returned through the callback instead.
                  return this._collection.update(selector, modifier, options, wrappedCallback);
                } catch (e) {
                  if (callback) {
                    callback(e);
                    return null;
                  }

                  throw e;
                }
              },

              /**
               * @summary Remove documents from the collection
               * @locus Anywhere
               * @method remove
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} selector Specifies which documents to remove
               * @param {Function} [callback] Optional.  If present, called with an error object as its argument.
               */
              remove(selector, callback) {
                selector = Mongo.Collection._rewriteSelector(selector);
                const wrappedCallback = wrapCallback(callback);

                if (this._isRemoteCollection()) {
                  return this._callMutatorMethod("remove", [selector], wrappedCallback);
                } // it's my collection.  descend into the collection object
                // and propagate any exception.


                try {
                  // If the user provided a callback and the collection implements this
                  // operation asynchronously, then queryRet will be undefined, and the
                  // result will be returned through the callback instead.
                  return this._collection.remove(selector, wrappedCallback);
                } catch (e) {
                  if (callback) {
                    callback(e);
                    return null;
                  }

                  throw e;
                }
              },

              // Determine if this collection is simply a minimongo representation of a real
              // database on another server
              _isRemoteCollection() {
                // XXX see #MeteorServerNull
                return this._connection && this._connection !== Meteor.server;
              },

              /**
               * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
               * @locus Anywhere
               * @method upsert
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} selector Specifies which documents to modify
               * @param {MongoModifier} modifier Specifies how to modify the documents
               * @param {Object} [options]
               * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
               * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
               */
              upsert(selector, modifier, options, callback) {
                if (!callback && typeof options === "function") {
                  callback = options;
                  options = {};
                }

                return this.update(selector, modifier, (0, _objectSpread2.default)({}, options, {
                  _returnObject: true,
                  upsert: true
                }), callback);
              },

              // We'll actually design an index API later. For now, we just pass through to
              // Mongo's, but make it synchronous.
              _ensureIndex(index, options) {
                var self = this;
                if (!self._collection._ensureIndex) throw new Error("Can only call _ensureIndex on server collections");

                self._collection._ensureIndex(index, options);
              },

              _dropIndex(index) {
                var self = this;
                if (!self._collection._dropIndex) throw new Error("Can only call _dropIndex on server collections");

                self._collection._dropIndex(index);
              },

              _dropCollection() {
                var self = this;
                if (!self._collection.dropCollection) throw new Error("Can only call _dropCollection on server collections");

                self._collection.dropCollection();
              },

              _createCappedCollection(byteSize, maxDocuments) {
                var self = this;
                if (!self._collection._createCappedCollection) throw new Error("Can only call _createCappedCollection on server collections");

                self._collection._createCappedCollection(byteSize, maxDocuments);
              },

              /**
               * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
               * @locus Server
               * @memberof Mongo.Collection
               * @instance
               */
              rawCollection() {
                var self = this;

                if (!self._collection.rawCollection) {
                  throw new Error("Can only call rawCollection on server collections");
                }

                return self._collection.rawCollection();
              },

              /**
               * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/3.0/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
               * @locus Server
               * @memberof Mongo.Collection
               * @instance
               */
              rawDatabase() {
                var self = this;

                if (!(self._driver.mongo && self._driver.mongo.db)) {
                  throw new Error("Can only call rawDatabase on server collections");
                }

                return self._driver.mongo.db;
              }

            }); // Convert the callback to not return a result if there is an error

            function wrapCallback(callback, convertResult) {
              return callback && function (error, result) {
                if (error) {
                  callback(error);
                } else if (typeof convertResult === "function") {
                  callback(error, convertResult(result));
                } else {
                  callback(error, result);
                }
              };
            }
            /**
             * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
             * @locus Anywhere
             * @class
             * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create
             */

            Mongo.ObjectID = MongoID.ObjectID;
            /**
             * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.
             * @class
             * @instanceName cursor
             */

            Mongo.Cursor = LocalCollection.Cursor;
            /**
             * @deprecated in 0.9.1
             */

            Mongo.Collection.Cursor = Mongo.Cursor;
            /**
             * @deprecated in 0.9.1
             */

            Mongo.Collection.ObjectID = Mongo.ObjectID;
            /**
             * @deprecated in 0.9.1
             */

            Meteor.Collection = Mongo.Collection; // Allow deny stuff is now in the allow-deny package

            Object.assign(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);

            function popCallbackFromArgs(args) {
              // Pull off any callback (or perhaps a 'callback' variable that was passed
              // in undefined, like how 'upsert' does it).
              if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {
                return args.pop();
              }
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/mongo/local_collection_driver.js");
  _require2("/node_modules/meteor/mongo/collection.js");

  /* Exports */
  Package._define("mongo", {
    Mongo: Mongo
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("cfs:standard-packages");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Exports */
  Package._define("deps", {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var _exports, _;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/pre.js                                                                            //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Define an object named exports. This will cause underscore.js to put `_` as a
    // field on it, instead of in the global namespace.  See also post.js.
    _exports = {};

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/underscore.js                                                                     //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //     Underscore.js 1.5.2
    //     http://underscorejs.org
    //     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.

    (function () {

      // Baseline setup
      // --------------

      // Establish the root object, `window` in the browser, or `exports` on the server.
      var root = this;

      // Save the previous value of the `_` variable.
      var previousUnderscore = root._;

      // Establish the object that gets returned to break out of a loop iteration.
      var breaker = {};

      // Save bytes in the minified (but not gzipped) version:
      var ArrayProto = Array.prototype,
          ObjProto = Object.prototype,
          FuncProto = Function.prototype;

      // Create quick reference variables for speed access to core prototypes.
      var push = ArrayProto.push,
          slice = ArrayProto.slice,
          concat = ArrayProto.concat,
          toString = ObjProto.toString,
          hasOwnProperty = ObjProto.hasOwnProperty;

      // All **ECMAScript 5** native function implementations that we hope to use
      // are declared here.
      var nativeForEach = ArrayProto.forEach,
          nativeMap = ArrayProto.map,
          nativeReduce = ArrayProto.reduce,
          nativeReduceRight = ArrayProto.reduceRight,
          nativeFilter = ArrayProto.filter,
          nativeEvery = ArrayProto.every,
          nativeSome = ArrayProto.some,
          nativeIndexOf = ArrayProto.indexOf,
          nativeLastIndexOf = ArrayProto.lastIndexOf,
          nativeIsArray = Array.isArray,
          nativeKeys = Object.keys,
          nativeBind = FuncProto.bind;

      // Create a safe reference to the Underscore object for use below.
      var _ = function (obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
      };

      // Export the Underscore object for **Node.js**, with
      // backwards-compatibility for the old `require()` API. If we're in
      // the browser, add `_` as a global object via a string identifier,
      // for Closure Compiler "advanced" mode.
      if (typeof _exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          _exports = module.exports = _;
        }
        _exports._ = _;
      } else {
        root._ = _;
      }

      // Current version.
      _.VERSION = '1.5.2';

      // Collection Functions
      // --------------------

      // METEOR CHANGE: Define _isArguments instead of depending on
      // _.isArguments which is defined using each. In looksLikeArray
      // (which each depends on), we then use _isArguments instead of
      // _.isArguments.
      var _isArguments = function (obj) {
        return toString.call(obj) === '[object Arguments]';
      };
      // Define a fallback version of the method in browsers (ahem, IE), where
      // there isn't any inspectable "Arguments" type.
      if (!_isArguments(arguments)) {
        _isArguments = function (obj) {
          return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function');
        };
      }

      // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an
      // array. This looksLikeArray function is introduced by Meteor, and replaces
      // all instances of `obj.length === +obj.length`.
      // https://github.com/meteor/meteor/issues/594
      // https://github.com/jashkenas/underscore/issues/770
      var looksLikeArray = function (obj) {
        return obj.length === +obj.length
        // _.isArguments not yet necessarily defined here
        && (_isArguments(obj) || obj.constructor !== Object);
      };

      // The cornerstone, an `each` implementation, aka `forEach`.
      // Handles objects with the built-in `forEach`, arrays, and raw objects.
      // Delegates to **ECMAScript 5**'s native `forEach` if available.
      var each = _.each = _.forEach = function (obj, iterator, context) {
        if (obj == null) return;
        if (nativeForEach && obj.forEach === nativeForEach) {
          obj.forEach(iterator, context);
        } else if (looksLikeArray(obj)) {
          for (var i = 0, length = obj.length; i < length; i++) {
            if (iterator.call(context, obj[i], i, obj) === breaker) return;
          }
        } else {
          var keys = _.keys(obj);
          for (var i = 0, length = keys.length; i < length; i++) {
            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
          }
        }
      };

      // Return the results of applying the iterator to each element.
      // Delegates to **ECMAScript 5**'s native `map` if available.
      _.map = _.collect = function (obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function (value, index, list) {
          results.push(iterator.call(context, value, index, list));
        });
        return results;
      };

      var reduceError = 'Reduce of empty array with no initial value';

      // **Reduce** builds up a single result from a list of values, aka `inject`,
      // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
      _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
          if (context) iterator = _.bind(iterator, context);
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function (value, index, list) {
          if (!initial) {
            memo = value;
            initial = true;
          } else {
            memo = iterator.call(context, memo, value, index, list);
          }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
      };

      // The right-associative version of reduce, also known as `foldr`.
      // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
      _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
          if (context) iterator = _.bind(iterator, context);
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (!looksLikeArray(obj)) {
          var keys = _.keys(obj);
          length = keys.length;
        }
        each(obj, function (value, index, list) {
          index = keys ? keys[--length] : --length;
          if (!initial) {
            memo = obj[index];
            initial = true;
          } else {
            memo = iterator.call(context, memo, obj[index], index, list);
          }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
      };

      // Return the first value which passes a truth test. Aliased as `detect`.
      _.find = _.detect = function (obj, iterator, context) {
        var result;
        any(obj, function (value, index, list) {
          if (iterator.call(context, value, index, list)) {
            result = value;
            return true;
          }
        });
        return result;
      };

      // Return all the elements that pass a truth test.
      // Delegates to **ECMAScript 5**'s native `filter` if available.
      // Aliased as `select`.
      _.filter = _.select = function (obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
        each(obj, function (value, index, list) {
          if (iterator.call(context, value, index, list)) results.push(value);
        });
        return results;
      };

      // Return all the elements for which a truth test fails.
      _.reject = function (obj, iterator, context) {
        return _.filter(obj, function (value, index, list) {
          return !iterator.call(context, value, index, list);
        }, context);
      };

      // Determine whether all of the elements match a truth test.
      // Delegates to **ECMAScript 5**'s native `every` if available.
      // Aliased as `all`.
      _.every = _.all = function (obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = true;
        if (obj == null) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
        each(obj, function (value, index, list) {
          if (!(result = result && iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
      };

      // Determine if at least one element in the object matches a truth test.
      // Delegates to **ECMAScript 5**'s native `some` if available.
      // Aliased as `any`.
      var any = _.some = _.any = function (obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = false;
        if (obj == null) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
        each(obj, function (value, index, list) {
          if (result || (result = iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
      };

      // Determine if the array or object contains a given value (using `===`).
      // Aliased as `include`.
      _.contains = _.include = function (obj, target) {
        if (obj == null) return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        return any(obj, function (value) {
          return value === target;
        });
      };

      // Invoke a method (with arguments) on every item in a collection.
      _.invoke = function (obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
          return (isFunc ? method : value[method]).apply(value, args);
        });
      };

      // Convenience version of a common use case of `map`: fetching a property.
      _.pluck = function (obj, key) {
        return _.map(obj, function (value) {
          return value[key];
        });
      };

      // Convenience version of a common use case of `filter`: selecting only objects
      // containing specific `key:value` pairs.
      _.where = function (obj, attrs, first) {
        if (_.isEmpty(attrs)) return first ? void 0 : [];
        return _[first ? 'find' : 'filter'](obj, function (value) {
          for (var key in attrs) {
            if (attrs[key] !== value[key]) return false;
          }
          return true;
        });
      };

      // Convenience version of a common use case of `find`: getting the first object
      // containing specific `key:value` pairs.
      _.findWhere = function (obj, attrs) {
        return _.where(obj, attrs, true);
      };

      // Return the maximum element or (element-based computation).
      // Can't optimize arrays of integers longer than 65,535 elements.
      // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
      _.max = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.max.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return -Infinity;
        var result = { computed: -Infinity, value: -Infinity };
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed > result.computed && (result = { value: value, computed: computed });
        });
        return result.value;
      };

      // Return the minimum element (or element-based computation).
      _.min = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.min.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return Infinity;
        var result = { computed: Infinity, value: Infinity };
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed < result.computed && (result = { value: value, computed: computed });
        });
        return result.value;
      };

      // Shuffle an array, using the modern version of the 
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
      _.shuffle = function (obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function (value) {
          rand = _.random(index++);
          shuffled[index - 1] = shuffled[rand];
          shuffled[rand] = value;
        });
        return shuffled;
      };

      // Sample **n** random values from an array.
      // If **n** is not specified, returns a single random element from the array.
      // The internal `guard` argument allows it to work with `map`.
      _.sample = function (obj, n, guard) {
        if (arguments.length < 2 || guard) {
          return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
      };

      // An internal function to generate lookup iterators.
      var lookupIterator = function (value) {
        return _.isFunction(value) ? value : function (obj) {
          return obj[value];
        };
      };

      // Sort the object's values by a criterion produced by an iterator.
      _.sortBy = function (obj, value, context) {
        var iterator = lookupIterator(value);
        return _.pluck(_.map(obj, function (value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iterator.call(context, value, index, list)
          };
        }).sort(function (left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0) return 1;
            if (a < b || b === void 0) return -1;
          }
          return left.index - right.index;
        }), 'value');
      };

      // An internal function used for aggregate "group by" operations.
      var group = function (behavior) {
        return function (obj, value, context) {
          var result = {};
          var iterator = value == null ? _.identity : lookupIterator(value);
          each(obj, function (value, index) {
            var key = iterator.call(context, value, index, obj);
            behavior(result, key, value);
          });
          return result;
        };
      };

      // Groups the object's values by a criterion. Pass either a string attribute
      // to group by, or a function that returns the criterion.
      _.groupBy = group(function (result, key, value) {
        (_.has(result, key) ? result[key] : result[key] = []).push(value);
      });

      // Indexes the object's values by a criterion, similar to `groupBy`, but for
      // when you know that your index values will be unique.
      _.indexBy = group(function (result, key, value) {
        result[key] = value;
      });

      // Counts instances of an object that group by a certain criterion. Pass
      // either a string attribute to count by, or a function that returns the
      // criterion.
      _.countBy = group(function (result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
      });

      // Use a comparator function to figure out the smallest index at which
      // an object should be inserted so as to maintain order. Uses binary search.
      _.sortedIndex = function (array, obj, iterator, context) {
        iterator = iterator == null ? _.identity : lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0,
            high = array.length;
        while (low < high) {
          var mid = low + high >>> 1;
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
      };

      // Safely create a real, live array from anything iterable.
      _.toArray = function (obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (looksLikeArray(obj)) return _.map(obj, _.identity);
        return _.values(obj);
      };

      // Return the number of elements in an object.
      _.size = function (obj) {
        if (obj == null) return 0;
        return looksLikeArray(obj) ? obj.length : _.keys(obj).length;
      };

      // Array Functions
      // ---------------

      // Get the first element of an array. Passing **n** will return the first N
      // values in the array. Aliased as `head` and `take`. The **guard** check
      // allows it to work with `_.map`.
      _.first = _.head = _.take = function (array, n, guard) {
        if (array == null) return void 0;
        return n == null || guard ? array[0] : slice.call(array, 0, n);
      };

      // Returns everything but the last entry of the array. Especially useful on
      // the arguments object. Passing **n** will return all the values in
      // the array, excluding the last N. The **guard** check allows it to work with
      // `_.map`.
      _.initial = function (array, n, guard) {
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
      };

      // Get the last element of an array. Passing **n** will return the last N
      // values in the array. The **guard** check allows it to work with `_.map`.
      _.last = function (array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) {
          return array[array.length - 1];
        } else {
          return slice.call(array, Math.max(array.length - n, 0));
        }
      };

      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
      // Especially useful on the arguments object. Passing an **n** will return
      // the rest N values in the array. The **guard**
      // check allows it to work with `_.map`.
      _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };

      // Trim out all falsy values from an array.
      _.compact = function (array) {
        return _.filter(array, _.identity);
      };

      // Internal implementation of a recursive `flatten` function.
      var flatten = function (input, shallow, output) {
        if (shallow && _.every(input, _.isArray)) {
          return concat.apply(output, input);
        }
        each(input, function (value) {
          if (_.isArray(value) || _.isArguments(value)) {
            shallow ? push.apply(output, value) : flatten(value, shallow, output);
          } else {
            output.push(value);
          }
        });
        return output;
      };

      // Flatten out an array, either recursively (by default), or just one level.
      _.flatten = function (array, shallow) {
        return flatten(array, shallow, []);
      };

      // Return a version of the array that does not contain the specified value(s).
      _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1));
      };

      // Produce a duplicate-free version of the array. If the array has already
      // been sorted, you have the option of using a faster algorithm.
      // Aliased as `unique`.
      _.uniq = _.unique = function (array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
          context = iterator;
          iterator = isSorted;
          isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function (value, index) {
          if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
            seen.push(value);
            results.push(array[index]);
          }
        });
        return results;
      };

      // Produce an array that contains the union: each distinct element from all of
      // the passed-in arrays.
      _.union = function () {
        return _.uniq(_.flatten(arguments, true));
      };

      // Produce an array that contains every item shared between all the
      // passed-in arrays.
      _.intersection = function (array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function (item) {
          return _.every(rest, function (other) {
            return _.indexOf(other, item) >= 0;
          });
        });
      };

      // Take the difference between one array and a number of other arrays.
      // Only the elements present in just the first array will remain.
      _.difference = function (array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function (value) {
          return !_.contains(rest, value);
        });
      };

      // Zip together multiple lists into a single array -- elements that share
      // an index go together.
      _.zip = function () {
        var length = _.max(_.pluck(arguments, "length").concat(0));
        var results = new Array(length);
        for (var i = 0; i < length; i++) {
          results[i] = _.pluck(arguments, '' + i);
        }
        return results;
      };

      // Converts lists into objects. Pass either a single array of `[key, value]`
      // pairs, or two parallel arrays of the same length -- one of keys, and one of
      // the corresponding values.
      _.object = function (list, values) {
        if (list == null) return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };

      // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
      // we need this function. Return the position of the first occurrence of an
      // item in an array, or -1 if the item is not included in the array.
      // Delegates to **ECMAScript 5**'s native `indexOf` if available.
      // If the array is large and already in sort order, pass `true`
      // for **isSorted** to use binary search.
      _.indexOf = function (array, item, isSorted) {
        if (array == null) return -1;
        var i = 0,
            length = array.length;
        if (isSorted) {
          if (typeof isSorted == 'number') {
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
          } else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
          }
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
        for (; i < length; i++) if (array[i] === item) return i;
        return -1;
      };

      // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
      _.lastIndexOf = function (array, item, from) {
        if (array == null) return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        }
        var i = hasIndex ? from : array.length;
        while (i--) if (array[i] === item) return i;
        return -1;
      };

      // Generate an integer Array containing an arithmetic progression. A port of
      // the native Python `range()` function. See
      // [the Python documentation](http://docs.python.org/library/functions.html#range).
      _.range = function (start, stop, step) {
        if (arguments.length <= 1) {
          stop = start || 0;
          start = 0;
        }
        step = arguments[2] || 1;

        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(length);

        while (idx < length) {
          range[idx++] = start;
          start += step;
        }

        return range;
      };

      // Function (ahem) Functions
      // ------------------

      // Reusable constructor function for prototype setting.
      var ctor = function () {};

      // Create a function bound to a given object (assigning `this`, and arguments,
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
      // available.
      _.bind = function (func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError();
        args = slice.call(arguments, 2);
        return bound = function () {
          if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
          ctor.prototype = func.prototype;
          var self = new ctor();
          ctor.prototype = null;
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (Object(result) === result) return result;
          return self;
        };
      };

      // Partially apply a function by creating a version that has had some of its
      // arguments pre-filled, without changing its dynamic `this` context.
      _.partial = function (func) {
        var args = slice.call(arguments, 1);
        return function () {
          return func.apply(this, args.concat(slice.call(arguments)));
        };
      };

      // Bind all of an object's methods to that object. Useful for ensuring that
      // all callbacks defined on an object belong to it.
      _.bindAll = function (obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0) throw new Error("bindAll must be passed function names");
        each(funcs, function (f) {
          obj[f] = _.bind(obj[f], obj);
        });
        return obj;
      };

      // Memoize an expensive function by storing its results.
      _.memoize = function (func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function () {
          var key = hasher.apply(this, arguments);
          return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
      };

      // Delays a function for the given number of milliseconds, and then calls
      // it with the arguments supplied.
      _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
          return func.apply(null, args);
        }, wait);
      };

      // Defers a function, scheduling it to run after the current call stack has
      // cleared.
      _.defer = function (func) {
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
      };

      // Returns a function, that, when invoked, will only be triggered at most once
      // during a given window of time. Normally, the throttled function will run
      // as much as it can, without ever going more than once per `wait` duration;
      // but if you'd like to disable the execution on the leading edge, pass
      // `{leading: false}`. To disable execution on the trailing edge, ditto.
      _.throttle = function (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function () {
          previous = options.leading === false ? 0 : new Date();
          timeout = null;
          result = func.apply(context, args);
        };
        return function () {
          var now = new Date();
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      };

      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      _.debounce = function (func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        return function () {
          context = this;
          args = arguments;
          timestamp = new Date();
          var later = function () {
            var last = new Date() - timestamp;
            if (last < wait) {
              timeout = setTimeout(later, wait - last);
            } else {
              timeout = null;
              if (!immediate) result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          if (!timeout) {
            timeout = setTimeout(later, wait);
          }
          if (callNow) result = func.apply(context, args);
          return result;
        };
      };

      // Returns a function that will be executed at most one time, no matter how
      // often you call it. Useful for lazy initialization.
      _.once = function (func) {
        var ran = false,
            memo;
        return function () {
          if (ran) return memo;
          ran = true;
          memo = func.apply(this, arguments);
          func = null;
          return memo;
        };
      };

      // Returns the first function passed as an argument to the second,
      // allowing you to adjust arguments, run code before and after, and
      // conditionally execute the original function.
      _.wrap = function (func, wrapper) {
        return function () {
          var args = [func];
          push.apply(args, arguments);
          return wrapper.apply(this, args);
        };
      };

      // Returns a function that is the composition of a list of functions, each
      // consuming the return value of the function that follows.
      _.compose = function () {
        var funcs = arguments;
        return function () {
          var args = arguments;
          for (var i = funcs.length - 1; i >= 0; i--) {
            args = [funcs[i].apply(this, args)];
          }
          return args[0];
        };
      };

      // Returns a function that will only be executed after being called N times.
      _.after = function (times, func) {
        return function () {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };

      // Object Functions
      // ----------------

      // Retrieve the names of an object's properties.
      // Delegates to **ECMAScript 5**'s native `Object.keys`
      _.keys = nativeKeys || function (obj) {
        if (obj !== Object(obj)) throw new TypeError('Invalid object');
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys.push(key);
        return keys;
      };

      // Retrieve the values of an object's properties.
      _.values = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = new Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };

      // Convert an object into a list of `[key, value]` pairs.
      _.pairs = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = new Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [keys[i], obj[keys[i]]];
        }
        return pairs;
      };

      // Invert the keys and values of an object. The values must be serializable.
      _.invert = function (obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };

      // Return a sorted list of the function names available on the object.
      // Aliased as `methods`
      _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
      };

      // Extend a given object with all the properties in passed-in object(s).
      _.extend = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };

      // Return a copy of the object only containing the whitelisted properties.
      _.pick = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function (key) {
          if (key in obj) copy[key] = obj[key];
        });
        return copy;
      };

      // Return a copy of the object without the blacklisted properties.
      _.omit = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) {
          if (!_.contains(keys, key)) copy[key] = obj[key];
        }
        return copy;
      };

      // Fill in a given object with default properties.
      _.defaults = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              if (obj[prop] === void 0) obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };

      // Create a (shallow-cloned) duplicate of an object.
      _.clone = function (obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };

      // Invokes interceptor with the obj, and then returns obj.
      // The primary purpose of this method is to "tap into" a method chain, in
      // order to perform operations on intermediate results within the chain.
      _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj;
      };

      // Internal recursive comparison function for `isEqual`.
      var eq = function (a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a == 1 / b;
        // A strict comparison is necessary because `null == undefined`.
        if (a == null || b == null) return a === b;
        // Unwrap any wrapped objects.
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
          // Strings, numbers, dates, and booleans are compared by value.
          case '[object String]':
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return a == String(b);
          case '[object Number]':
            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
            // other numeric values.
            return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
          case '[object Date]':
          case '[object Boolean]':
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a == +b;
          // RegExps are compared by their source patterns and flags.
          case '[object RegExp]':
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object') return false;
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] == a) return bStack[length] == b;
        }
        // Objects with different constructors are not equivalent, but `Object`s
        // from different frames are.
        var aCtor = a.constructor,
            bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
          return false;
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        var size = 0,
            result = true;
        // Recursively compare objects and arrays.
        if (className == '[object Array]') {
          // Compare array lengths to determine if a deep comparison is necessary.
          size = a.length;
          result = size == b.length;
          if (result) {
            // Deep compare the contents, ignoring non-numeric properties.
            while (size--) {
              if (!(result = eq(a[size], b[size], aStack, bStack))) break;
            }
          }
        } else {
          // Deep compare objects.
          for (var key in a) {
            if (_.has(a, key)) {
              // Count the expected number of properties.
              size++;
              // Deep compare each member.
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
            }
          }
          // Ensure that both objects contain the same number of properties.
          if (result) {
            for (key in b) {
              if (_.has(b, key) && !size--) break;
            }
            result = !size;
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return result;
      };

      // Perform a deep comparison to check if two objects are equal.
      _.isEqual = function (a, b) {
        return eq(a, b, [], []);
      };

      // Is a given array, string, or object empty?
      // An "empty" object has no enumerable own-properties.
      _.isEmpty = function (obj) {
        if (obj == null) return true;
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
        for (var key in obj) if (_.has(obj, key)) return false;
        return true;
      };

      // Is a given value a DOM element?
      _.isElement = function (obj) {
        return !!(obj && obj.nodeType === 1);
      };

      // Is a given value an array?
      // Delegates to ECMA5's native Array.isArray
      _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) == '[object Array]';
      };

      // Is a given variable an object?
      _.isObject = function (obj) {
        return obj === Object(obj);
      };

      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
      each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {
        _['is' + name] = function (obj) {
          return toString.call(obj) == '[object ' + name + ']';
        };
      });

      // Define a fallback version of the method in browsers (ahem, IE), where
      // there isn't any inspectable "Arguments" type.
      if (!_.isArguments(arguments)) {
        _.isArguments = function (obj) {
          return !!(obj && _.has(obj, 'callee'));
        };
      }

      // Optimize `isFunction` if appropriate.
      if (typeof /./ !== 'function') {
        _.isFunction = function (obj) {
          return typeof obj === 'function';
        };
      }

      // Is a given object a finite number?
      _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
      };

      // Is the given value `NaN`? (NaN is the only number which does not equal itself).
      _.isNaN = function (obj) {
        return _.isNumber(obj) && obj != +obj;
      };

      // Is a given value a boolean?
      _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
      };

      // Is a given value equal to null?
      _.isNull = function (obj) {
        return obj === null;
      };

      // Is a given variable undefined?
      _.isUndefined = function (obj) {
        return obj === void 0;
      };

      // Shortcut function for checking if an object has a given property directly
      // on itself (in other words, not on a prototype).
      _.has = function (obj, key) {
        return hasOwnProperty.call(obj, key);
      };

      // Utility Functions
      // -----------------

      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
      // previous owner. Returns a reference to the Underscore object.
      _.noConflict = function () {
        root._ = previousUnderscore;
        return this;
      };

      // Keep the identity function around for default iterators.
      _.identity = function (value) {
        return value;
      };

      // Run a function **n** times.
      _.times = function (n, iterator, context) {
        var accum = Array(Math.max(0, n));
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
        return accum;
      };

      // Return a random integer between min and max (inclusive).
      _.random = function (min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };

      // List of HTML entities for escaping.
      var entityMap = {
        escape: {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#x27;'
        }
      };
      entityMap.unescape = _.invert(entityMap.escape);

      // Regexes containing the keys and values listed immediately above.
      var entityRegexes = {
        escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
      };

      // Functions for escaping and unescaping strings to/from HTML interpolation.
      _.each(['escape', 'unescape'], function (method) {
        _[method] = function (string) {
          if (string == null) return '';
          return ('' + string).replace(entityRegexes[method], function (match) {
            return entityMap[method][match];
          });
        };
      });

      // If the value of the named `property` is a function then invoke it with the
      // `object` as context; otherwise, return it.
      _.result = function (object, property) {
        if (object == null) return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
      };

      // Add your own custom functions to the Underscore object.
      _.mixin = function (obj) {
        each(_.functions(obj), function (name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function () {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result.call(this, func.apply(_, args));
          };
        });
      };

      // Generate a unique integer id (unique within the entire client session).
      // Useful for temporary DOM ids.
      var idCounter = 0;
      _.uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };

      // By default, Underscore uses ERB-style template delimiters, change the
      // following template settings to use alternative delimiters.
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };

      // When customizing `templateSettings`, if you don't want to define an
      // interpolation, evaluation or escaping regex, we need one that is
      // guaranteed not to match.
      var noMatch = /(.)^/;

      // Certain characters need to be escaped so that they can be put into a
      // string literal.
      var escapes = {
        "'": "'",
        '\\': '\\',
        '\r': 'r',
        '\n': 'n',
        '\t': 't',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };

      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

      // JavaScript micro-templating, similar to John Resig's implementation.
      // Underscore templating handles arbitrary delimiters, preserves whitespace,
      // and correctly escapes quotes within interpolated code.
      _.template = function (text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);

        // Combine delimiters into one regular expression via alternation.
        var matcher = new RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g');

        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escaper, function (match) {
            return '\\' + escapes[match];
          });

          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          }
          if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          }
          if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";

        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";

        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }

        if (data) return render(data, _);
        var template = function (data) {
          return render.call(this, data, _);
        };

        // Provide the compiled function source as a convenience for precompilation.
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

        return template;
      };

      // Add a "chain" function, which will delegate to the wrapper.
      _.chain = function (obj) {
        return _(obj).chain();
      };

      // OOP
      // ---------------
      // If Underscore is called as a function, it returns a wrapped object that
      // can be used OO-style. This wrapper holds altered versions of all the
      // underscore functions. Wrapped objects may be chained.

      // Helper function to continue chaining intermediate results.
      var result = function (obj) {
        return this._chain ? _(obj).chain() : obj;
      };

      // Add all of the Underscore functions to the wrapper object.
      _.mixin(_);

      // Add all mutator Array functions to the wrapper.
      each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
          return result.call(this, obj);
        };
      });

      // Add all accessor Array functions to the wrapper.
      each(['concat', 'join', 'slice'], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          return result.call(this, method.apply(this._wrapped, arguments));
        };
      });

      _.extend(_.prototype, {

        // Start chaining a wrapped Underscore object.
        chain: function () {
          this._chain = true;
          return this;
        },

        // Extracts the result from a wrapped and chained object.
        value: function () {
          return this._wrapped;
        }

      });
    }).call(this);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/post.js                                                                           //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This exports object was created in pre.js.  Now copy the `_` object from it
    // into the package-scope variable `_`, which will get exported.
    _ = _exports._;

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("underscore", {
    _: _
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var FS, _Utility;

  (function () {

    ///////////////////////////////////////////////////////////////////////
    //                                                                   //
    // packages/cfs_base-package/packages/cfs_base-package.js            //
    //                                                                   //
    ///////////////////////////////////////////////////////////////////////
    //
    (function () {

      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                   //
      // packages/cfs:base-package/base-common.js                                                                          //
      //                                                                                                                   //
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Exported namespace                                                                                                // 1
      FS = {}; // 2
      // 3
      // namespace for adapters; XXX should this be added by cfs-storage-adapter pkg instead?                              // 4
      FS.Store = { // 5
        GridFS: function () {
          // 6
          throw new Error('To use FS.Store.GridFS, you must add the "cfs-gridfs" package.'); // 7
        }, // 8
        FileSystem: function () {
          // 9
          throw new Error('To use FS.Store.FileSystem, you must add the "cfs-filesystem" package.'); // 10
        }, // 11
        S3: function () {
          // 12
          throw new Error('To use FS.Store.S3, you must add the "cfs-s3" package.'); // 13
        } // 14
      }; // 15
      // 16
      // namespace for access points                                                                                       // 17
      FS.AccessPoint = {}; // 18
      // 19
      // namespace for utillities                                                                                          // 20
      FS.Utility = {}; // 21
      // 22
      // A general place for any package to store global config settings                                                   // 23
      FS.config = {}; // 24
      // 25
      // An internal collection reference                                                                                  // 26
      FS._collections = {}; // 27
      // 28
      // Test scope                                                                                                        // 29
      _Utility = {}; // 30
      // 31
      // #############################################################################                                     // 32
      //                                                                                                                   // 33
      // HELPERS                                                                                                           // 34
      //                                                                                                                   // 35
      // #############################################################################                                     // 36
      // 37
      /** @method _Utility.defaultZero                                                                                     // 38
       * @private                                                                                                          // 39
        * @param {Any} val Returns number or 0 if value is a falsy                                                         // 40
        */ // 41
      _Utility.defaultZero = function (val) {
        // 42
        return +(val || 0); // 43
      }; // 44
      // 45
      /**                                                                                                                  // 46
       * @method FS.Utility.cloneFileRecord                                                                                // 47
       * @public                                                                                                           // 48
       * @param {FS.File|FS.Collection filerecord} rec                                                                     // 49
       * @param {Object} [options]                                                                                         // 50
       * @param {Boolean} [options.full=false] Set `true` to prevent certain properties from being omitted from the clone. // 51
       * @returns {Object} Cloned filerecord                                                                               // 52
       *                                                                                                                   // 53
       * Makes a shallow clone of `rec`, filtering out some properties that might be present if                            // 54
       * it's an FS.File instance, but which we never want to be part of the stored                                        // 55
       * filerecord.                                                                                                       // 56
       *                                                                                                                   // 57
       * This is a blacklist clone rather than a whitelist because we want the user to be able                             // 58
       * to specify whatever additional properties they wish.                                                              // 59
       *                                                                                                                   // 60
       * In general, we expect the following whitelist properties used by the internal and                                 // 61
       * external APIs:                                                                                                    // 62
       *                                                                                                                   // 63
       * _id, name, size, type, chunkCount, chunkSize, chunkSum, copies, createdAt, updatedAt, uploadedAt                  // 64
       *                                                                                                                   // 65
       * Those properties, and any additional properties added by the user, should be present                              // 66
       * in the returned object, which is suitable for inserting into the backing collection or                            // 67
       * extending an FS.File instance.                                                                                    // 68
       *                                                                                                                   // 69
       */ // 70
      FS.Utility.cloneFileRecord = function (rec, options) {
        // 71
        options = options || {}; // 72
        var result = {}; // 73
        // We use this method for two purposes. If using it to clone one FS.File into another, then                        // 74
        // we want a full clone. But if using it to get a filerecord object for inserting into the                         // 75
        // internal collection, then there are certain properties we want to omit so that they aren't                      // 76
        // stored in the collection.                                                                                       // 77
        var omit = options.full ? [] : ['collectionName', 'collection', 'data', 'createdByTransform']; // 78
        for (var prop in rec) {
          // 79
          if (rec.hasOwnProperty(prop) && !_.contains(omit, prop)) {
            // 80
            result[prop] = rec[prop]; // 81
          } // 82
        } // 83
        return result; // 84
      }; // 85
      // 86
      /**                                                                                                                  // 87
       * @method FS.Utility.defaultCallback                                                                                // 88
       * @public                                                                                                           // 89
       * @param {Error} [err]                                                                                              // 90
       * @returns {undefined}                                                                                              // 91
       *                                                                                                                   // 92
       * Can be used as a default callback for client methods that need a callback.                                        // 93
       * Simply throws the provided error if there is one.                                                                 // 94
       */ // 95
      FS.Utility.defaultCallback = function defaultCallback(err) {
        // 96
        if (err) {
          // 97
          // Show gentle error if Meteor error                                                                             // 98
          if (err instanceof Meteor.Error) {
            // 99
            console.error(err.message); // 100
          } else {
            // 101
            // Normal error, just throw error                                                                              // 102
            throw err; // 103
          } // 104
          // 105
        } // 106
      }; // 107
      // 108
      /**                                                                                                                  // 109
       * @method FS.Utility.defaultCallback                                                                                // 110
       * @public                                                                                                           // 111
       * @param {Function} [f] A callback function, if you have one. Can be undefined or null.                             // 112
       * @param {Meteor.Error | Error | String} [err] Error or error message (string)                                      // 113
       * @returns {Any} the callback result if any                                                                         // 114
       *                                                                                                                   // 115
       * Handle Error, creates an Error instance with the given text. If callback is                                       // 116
       * a function, passes the error to that function. Otherwise throws it. Useful                                        // 117
       * for dealing with errors in methods that optionally accept a callback.                                             // 118
       */ // 119
      FS.Utility.handleError = function (f, err, result) {
        // 120
        // Set callback                                                                                                    // 121
        var callback = typeof f === 'function' ? f : FS.Utility.defaultCallback; // 122
        // Set the err                                                                                                     // 123
        var error = err === '' + err ? new Error(err) : err; // 124
        // callback                                                                                                        // 125
        return callback(error, result); // 126
      }; // 127
      // 128
      /**                                                                                                                  // 129
       * @method FS.Utility.noop                                                                                           // 130
       * @public                                                                                                           // 131
       * Use this to hand a no operation / empty function                                                                  // 132
       */ // 133
      FS.Utility.noop = function () {}; // 134
      // 135
      /**                                                                                                                  // 136
       * @method validateAction                                                                                            // 137
       * @private                                                                                                          // 138
       * @param {Object} validators - The validators object to use, with `deny` and `allow` properties.                    // 139
       * @param {FS.File} fileObj - Mounted or mountable file object to be passed to validators.                           // 140
       * @param {String} userId - The ID of the user who is attempting the action.                                         // 141
       * @returns {undefined}                                                                                              // 142
       *                                                                                                                   // 143
       * Throws a "400-Bad Request" Meteor error if the file is not mounted or                                             // 144
       * a "400-Access denied" Meteor error if the action is not allowed.                                                  // 145
       */ // 146
      FS.Utility.validateAction = function validateAction(validators, fileObj, userId) {
        // 147
        var denyValidators = validators.deny; // 148
        var allowValidators = validators.allow; // 149
        // 150
        // If insecure package is used and there are no validators defined,                                                // 151
        // allow the action.                                                                                               // 152
        if (typeof Package === 'object' // 153
        && Package.insecure // 154
        && denyValidators.length + allowValidators.length === 0) {
          // 155
          return; // 156
        } // 157
        // 158
        // If already mounted, validators should receive a fileObj                                                         // 159
        // that is fully populated                                                                                         // 160
        if (fileObj.isMounted()) {
          // 161
          fileObj.getFileRecord(); // 162
        } // 163
        // 164
        // Any deny returns true means denied.                                                                             // 165
        if (_.any(denyValidators, function (validator) {
          // 166
          return validator(userId, fileObj); // 167
        })) {
          // 168
          throw new Meteor.Error(403, "Access denied"); // 169
        } // 170
        // Any allow returns true means proceed. Throw error if they all fail.                                             // 171
        if (_.all(allowValidators, function (validator) {
          // 172
          return !validator(userId, fileObj); // 173
        })) {
          // 174
          throw new Meteor.Error(403, "Access denied"); // 175
        } // 176
      }; // 177
      // 178
      /**                                                                                                                  // 179
       * @method FS.Utility.getFileName                                                                                    // 180
       * @private                                                                                                          // 181
       * @param {String} name - A filename, filepath, or URL                                                               // 182
       * @returns {String} The filename without the URL, filepath, or query string                                         // 183
       */ // 184
      FS.Utility.getFileName = function utilGetFileName(name) {
        // 185
        // in case it's a URL, strip off potential query string                                                            // 186
        // should have no effect on filepath                                                                               // 187
        name = name.split('?')[0]; // 188
        // strip off beginning path or url                                                                                 // 189
        var lastSlash = name.lastIndexOf('/'); // 190
        if (lastSlash !== -1) {
          // 191
          name = name.slice(lastSlash + 1); // 192
        } // 193
        return name; // 194
      }; // 195
      // 196
      /**                                                                                                                  // 197
       * @method FS.Utility.getFileExtension                                                                               // 198
       * @public                                                                                                           // 199
       * @param {String} name - A filename, filepath, or URL that may or may not have an extension.                        // 200
       * @returns {String} The extension or an empty string if no extension found.                                         // 201
       */ // 202
      FS.Utility.getFileExtension = function utilGetFileExtension(name) {
        // 203
        name = FS.Utility.getFileName(name); // 204
        // Seekout the last '.' if found                                                                                   // 205
        var found = name.lastIndexOf('.'); // 206
        // Return the extension if found else ''                                                                           // 207
        // If found is -1, we return '' because there is no extension                                                      // 208
        // If found is 0, we return '' because it's a hidden file                                                          // 209
        return found > 0 ? name.slice(found + 1).toLowerCase() : ''; // 210
      }; // 211
      // 212
      /**                                                                                                                  // 213
       * @method FS.Utility.setFileExtension                                                                               // 214
       * @public                                                                                                           // 215
       * @param {String} name - A filename that may or may not already have an extension.                                  // 216
       * @param {String} ext - An extension without leading period, which you want to be the new extension on `name`.      // 217
       * @returns {String} The filename with changed extension.                                                            // 218
       */ // 219
      FS.Utility.setFileExtension = function utilSetFileExtension(name, ext) {
        // 220
        if (!name || !name.length) {
          // 221
          return name; // 222
        } // 223
        var currentExt = FS.Utility.getFileExtension(name); // 224
        if (currentExt.length) {
          // 225
          name = name.slice(0, currentExt.length * -1) + ext; // 226
        } else {
          // 227
          name = name + '.' + ext; // 228
        } // 229
        return name; // 230
      }; // 231
      // 232
      /*                                                                                                                   // 233
       * Borrowed these from http package                                                                                  // 234
       */ // 235
      FS.Utility.encodeParams = function encodeParams(params) {
        // 236
        var buf = []; // 237
        _.each(params, function (value, key) {
          // 238
          if (buf.length) // 239
            buf.push('&'); // 240
          buf.push(FS.Utility.encodeString(key), '=', FS.Utility.encodeString(value)); // 241
        }); // 242
        return buf.join('').replace(/%20/g, '+'); // 243
      }; // 244
      // 245
      FS.Utility.encodeString = function encodeString(str) {
        // 246
        return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\*/g, "%2A"); // 247
      }; // 248
      // 249
      /*                                                                                                                   // 250
       * btoa and atob shims for client and server                                                                         // 251
       */ // 252
      // 253
      FS.Utility._btoa = function _fsUtility_btoa(str) {
        // 254
        var buffer; // 255
        // 256
        if (str instanceof Buffer) {
          // 257
          buffer = str; // 258
        } else {
          // 259
          buffer = new Buffer(str.toString(), 'binary'); // 260
        } // 261
        // 262
        return buffer.toString('base64'); // 263
      }; // 264
      // 265
      FS.Utility.btoa = function fsUtility_btoa(str) {
        // 266
        if (typeof btoa === 'function') {
          // 267
          // Client                                                                                                        // 268
          return btoa(str); // 269
        } else if (typeof Buffer !== 'undefined') {
          // 270
          // Server                                                                                                        // 271
          return FS.Utility._btoa(str); // 272
        } else {
          // 273
          throw new Error('FS.Utility.btoa: Cannot base64 encode on your system'); // 274
        } // 275
      }; // 276
      // 277
      FS.Utility._atob = function _fsUtility_atob(str) {
        // 278
        return new Buffer(str, 'base64').toString('binary'); // 279
      }; // 280
      // 281
      FS.Utility.atob = function fsUtility_atob(str) {
        // 282
        if (typeof atob === 'function') {
          // 283
          // Client                                                                                                        // 284
          return atob(str); // 285
        } else if (typeof Buffer !== 'undefined') {
          // 286
          // Server                                                                                                        // 287
          return FS.Utility._atob(str); // 288
        } else {
          // 289
          throw new Error('FS.Utility.atob: Cannot base64 encode on your system'); // 290
        } // 291
      }; // 292
      // 293
      // Api wrap for 3party libs like underscore                                                                          // 294
      FS.Utility.extend = _.extend; // 295
      // 296
      FS.Utility.each = _.each; // 297
      // 298
      FS.Utility.isEmpty = _.isEmpty; // 299
      // 300
      FS.Utility.indexOf = _.indexOf; // 301
      // 302
      FS.Utility.isArray = _.isArray; // 303
      // 304
      FS.Utility.map = _.map; // 305
      // 306
      FS.Utility.once = _.once; // 307
      // 308
      FS.Utility.include = _.include; // 309
      // 310
      FS.Utility.size = _.size; // 311
      // 312
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    (function () {

      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                   //
      // packages/cfs:base-package/base-client.js                                                                          //
      //                                                                                                                   //
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // 1
      //XXX not sure this is still working properly?                                                                       // 2
      FS.Utility.connectionLogin = function (connection) {
        // 3
        // We check if the accounts package is installed, since we depend on                                               // 4
        // `Meteor.userId()`                                                                                               // 5
        if (typeof Accounts !== 'undefined') {
          // 6
          // Monitor logout from main connection                                                                           // 7
          Meteor.startup(function () {
            // 8
            Tracker.autorun(function () {
              // 9
              var userId = Meteor.userId(); // 10
              if (userId) {
                // 11
                connection.onReconnect = function () {
                  // 12
                  var token = Accounts._storedLoginToken(); // 13
                  connection.apply('login', [{ resume: token }], function (err, result) {
                    // 14
                    if (!err && result) {
                      // 15
                      connection.setUserId(result.id); // 16
                    } // 17
                  }); // 18
                }; // 19
              } else {
                // 20
                connection.onReconnect = null; // 21
                connection.setUserId(null); // 22
              } // 23
            }); // 24
          }); // 25
          // 26
        } // 27
      }; // 28
      // 29
      /**                                                                                                                  // 30
       * @method FS.Utility.eachFile                                                                                       // 31
       * @public                                                                                                           // 32
       * @param {Event} e - Browser event                                                                                  // 33
       * @param {Function} f - Function to run for each file found in the event.                                           // 34
       * @returns {undefined}                                                                                              // 35
       *                                                                                                                   // 36
       * Utility for iteration over files in event                                                                         // 37
       */ // 38
      FS.Utility.eachFile = function (e, f) {
        // 39
        var evt = e.originalEvent || e; // 40
        // 41
        var files = evt.target.files; // 42
        // 43
        if (!files || files.length === 0) {
          // 44
          files = evt.dataTransfer ? evt.dataTransfer.files : []; // 45
        } // 46
        // 47
        for (var i = 0; i < files.length; i++) {
          // 48
          f(files[i], i); // 49
        } // 50
      }; // 51
      // 52
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    ///////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:base-package", {
    FS: FS,
    _Utility: _Utility
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Package-scope variables */
  var LivedataTest;

  /* Exports */
  Package._define("livedata", {
    DDP: DDP,
    LivedataTest: LivedataTest
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("mongo-livedata");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;

  /* Package-scope variables */
  var EventEmitter;

  (function () {

    ///////////////////////////////////////////////////////////////////////
    //                                                                   //
    // packages/raix_eventemitter/packages/raix_eventemitter.js          //
    //                                                                   //
    ///////////////////////////////////////////////////////////////////////
    //
    (function () {

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                    //
      // packages/raix:eventemitter/eventemitter.client.js                                                                  //
      //                                                                                                                    //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /* global EventEmitter: true */ // 1
      EventEmitter = function (options) {
        // 2
        var self = this; // 3
        // Check that the user uses "new" keyword for api consistency                                                       // 4
        if (!(self instanceof EventEmitter)) {
          // 5
          throw new Error('use "new" to construct an EventEmitter'); // 6
        } // 7
        // 8
        options = options || {}; // 9
        // 10
        // Hidden scope                                                                                                     // 11
        self._eventEmitter = { // 12
          onListeners: {}, // 13
          onceListeners: {}, // 14
          maxListeners: options.maxListeners || 10 // 15
        }; // 16
      }; // 17
      // 18
      var _checkListenerLimit = function (eventName, listenerCount) {
        // 19
        var self = this; // 20
        // Check if we are to send a warning                                                                                // 21
        if (self._eventEmitter.maxListeners && listenerCount > self._eventEmitter.maxListeners) {
          // 22
          // Return string                                                                                                  // 23
          return 'warning: possible EventEmitter memory leak detected. ' + // 24
          listenerCount + ' listeners added on event "' + eventName + // 25
          '". Use emitter.setMaxListeners() to increase limit. (' + // 26
          self._eventEmitter.maxListeners + ')'; // 27
          // 28
        } // 29
      }; // 30
      // 31
      // By default EventEmitters will print a warning if more than 10 listeners are                                        // 32
      // added for a particular event. This is a useful default which helps finding                                         // 33
      // memory leaks. Obviously not all Emitters should be limited to 10. This function                                    // 34
      // allows that to be increased. Set to zero for unlimited.                                                            // 35
      EventEmitter.prototype.setMaxListeners = function (n) {
        // 36
        this._eventEmitter.maxListeners = n; // 37
      }; // 38
      // 39
      var _addToList = function (list, eventName, listener) {
        // 40
        // Check that we have a container for the event, Create listener array                                              // 41
        if (typeof list[eventName] === 'undefined') {
          // 42
          list[eventName] = []; // 43
        } // 44
        // 45
        // Make sure the listener is not in there already?                                                                  // 46
        // We have to comment this to be compliant with node.js                                                             // 47
        // list[eventName] = _.without(list[eventName], listener);                                                          // 48
        // 49
        // Add the listener and Check the limit                                                                             // 50
        return _checkListenerLimit.apply(this, [eventName, list[eventName].push(listener)]); // 51
      }; // 52
      // 53
      // Adds a listener to the end of the listeners array for the specified event.                                         // 54
      // server.on('connection', function (stream) {                                                                        // 55
      //   console.log('someone connected!');                                                                               // 56
      // });                                                                                                                // 57
      // Returns emitter, so calls can be chained.                                                                          // 58
      EventEmitter.prototype.on = function (eventName, listener) {
        // 59
        var warn = _addToList.apply(this, [this._eventEmitter.onListeners, eventName, listener]); // 60
        // 61
        // Warn if needed                                                                                                   // 62
        if (warn) {
          // 63
          console.warn(new Error(warn).stack); // 64
        } // 65
        // 66
        // Return the emitter                                                                                               // 67
        return this; // 68
      }; // 69
      // 70
      // Adds a one time listener for the event. This listener is invoked                                                   // 71
      // only the next time the event is fired, after which it is removed.                                                  // 72
      EventEmitter.prototype.once = function (eventName, listener) {
        // 73
        var warn = _addToList.apply(this, [this._eventEmitter.onceListeners, eventName, listener]); // 74
        // 75
        // Warn if needed                                                                                                   // 76
        if (warn) {
          // 77
          console.warn(new Error(warn).stack); // 78
        } // 79
        // 80
        // Return the emitter                                                                                               // 81
        return this; // 82
      }; // 83
      // 84
      var _runCallbacks = function (listenerArray, args) {
        // 85
        var self = this; // 86
        // count of listeners triggered                                                                                     // 87
        var count = 0; // 88
        // Check if we have anything to work with                                                                           // 89
        if (typeof listenerArray !== 'undefined') {
          // 90
          // Try to iterate over the listeners                                                                              // 91
          _.each(listenerArray, function (listener) {
            // 92
            // Count listener calls                                                                                         // 93
            count++; // 94
            // Send the job to the eventloop                                                                                // 95
            listener.apply(self, args); // 96
          }); // 97
        } // 98
        // 99
        // Return the count                                                                                                 // 100
        return count; // 101
      }; // 102
      // 103
      // emitter.emit(event, [arg1], [arg2], [...])#                                                                        // 104
      // Execute each of the listeners in order with the supplied arguments.                                                // 105
      EventEmitter.prototype.emit = function (eventName /* arguments */) {
        // 106
        var self = this; // 107
        // make argument list to pass on to listeners                                                                       // 108
        var args = _.rest(arguments); // 109
        // 110
        // Count listeners triggered                                                                                        // 111
        var count = 0; // 112
        // 113
        // Swap once list                                                                                                   // 114
        var onceList = self._eventEmitter.onceListeners[eventName]; // 115
        // 116
        // Empty the once list                                                                                              // 117
        self._eventEmitter.onceListeners[eventName] = []; // 118
        // 119
        // Trigger on listeners                                                                                             // 120
        count += _runCallbacks.call(self, self._eventEmitter.onListeners[eventName], args); // 121
        // 122
        // Trigger once listeners                                                                                           // 123
        count += _runCallbacks.call(self, onceList, args); // 124
        // 125
        // Returns true if event had listeners, false otherwise.                                                            // 126
        return count > 0; // 127
      }; // 128
      // 129
      // XXX: When removing a listener in node js it only removes one - not all.                                            // 130
      var _withoutOne = function (list, obj) {
        // 131
        var found = false; // 132
        var result = []; // 133
        // 134
        // Iterate over listeners                                                                                           // 135
        for (var i = 0; i < list.length; i++) {
          // 136
          // Check if we found one...                                                                                       // 137
          if (!found && list[i] === obj) {
            // 138
            found = true; // 139
          } else {
            // 140
            result.push(list[i]); // 141
          } // 142
        } // 143
        // 144
        // return the new array                                                                                             // 145
        return result; // 146
      }; // 147
      // 148
      // Removes all listeners, or those of the specified event. It's not a                                                 // 149
      // good idea to remove listeners that were added elsewhere in the code,                                               // 150
      // especially when it's on an emitter that you didn't create (e.g. sockets                                            // 151
      // or file streams).                                                                                                  // 152
      // Returns emitter, so calls can be chained.                                                                          // 153
      EventEmitter.prototype.off = function (eventName, listener) {
        // 154
        var self = this; // 155
        if (eventName) {
          // 156
          if (typeof listener === 'function') {
            // 157
            // its a bit more tricky - we have to iterate over the arrays and only                                          // 158
            // clone listeners not equal to                                                                                 // 159
            if (typeof self._eventEmitter.onListeners[eventName] !== 'undefined') {
              // 160
              self._eventEmitter.onListeners[eventName] = _withoutOne(self._eventEmitter.onListeners[eventName], listener); // 161
              // 162
            } // 163
            if (typeof self._eventEmitter.onceListeners[eventName] !== 'undefined') {
              // 164
              self._eventEmitter.onceListeners[eventName] = _withoutOne(self._eventEmitter.onceListeners[eventName], listener);
              // 166
            } // 167
          } else {
            // 168
            // Remove all listeners for eventName                                                                           // 169
            self._eventEmitter.onListeners[eventName] = []; // 170
            self._eventEmitter.onceListeners[eventName] = []; // 171
          } // 172
          // 173
        } else {
          // 174
          // Remove all listeners                                                                                           // 175
          self._eventEmitter.onListeners = {}; // 176
          self._eventEmitter.onceListeners = {}; // 177
        } // 178
      }; // 179
      // 180
      // Add api helpers                                                                                                    // 181
      EventEmitter.prototype.addListener = EventEmitter.prototype.on; // 182
      EventEmitter.prototype.removeListener = EventEmitter.prototype.off; // 183
      EventEmitter.prototype.removeAllListeners = EventEmitter.prototype.off; // 184
      // 185
      // Add jquery like helpers                                                                                            // 186
      EventEmitter.prototype.one = EventEmitter.prototype.once; // 187
      EventEmitter.prototype.trigger = EventEmitter.prototype.emit; // 188
      // 189
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    ///////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("raix:eventemitter", {
    EventEmitter: EventEmitter
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var FS = Package['cfs:base-package'].FS;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var DDP = Package['ddp-client'].DDP;
  var EJSON = Package.ejson.EJSON;
  var EventEmitter = Package['raix:eventemitter'].EventEmitter;
  var Mongo = Package.mongo.Mongo;

  /* Package-scope variables */
  var _storageAdapters;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////
    //                                                                               //
    // packages/cfs_storage-adapter/storageAdapter.client.js                         //
    //                                                                               //
    ///////////////////////////////////////////////////////////////////////////////////
    //
    /* global FS, _storageAdapters:true, EventEmitter */

    // #############################################################################
    //
    // STORAGE ADAPTER
    //
    // #############################################################################

    _storageAdapters = {};

    FS.StorageAdapter = function (name, options, api) {
      var self = this;

      // Check the api
      if (typeof api === 'undefined') {
        throw new Error('FS.StorageAdapter please define an api');
      }

      // store reference for easy lookup by name
      if (typeof _storageAdapters[name] !== 'undefined') {
        throw new Error('Storage name already exists: "' + name + '"');
      } else {
        _storageAdapters[name] = self;
      }

      // extend self with options and other info
      FS.Utility.extend(this, options || {}, {
        name: name
      });

      // XXX: TODO, add upload feature here...
      // we default to ddp upload but really let the SA like S3Cloud overwrite to
      // implement direct client to s3 upload
    };

    FS.StorageAdapter.prototype = new EventEmitter();

    ///////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:storage-adapter");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var FS = Package['cfs:base-package'].FS;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  var _require = meteorInstall({ "node_modules": { "meteor": { "cfs:gridfs": { "gridfs.client.js": function () {

            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                  //
            // packages/cfs_gridfs/gridfs.client.js                                                             //
            //                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /**
             * @public
             * @constructor
             * @param {String} name - The store name
             * @param {Object} options
             * @param {Function} [options.beforeSave] - Function to run before saving a file from the client. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.
             * @param {Number} [options.maxTries=5] - Max times to attempt saving a file
             * @returns {undefined}
             *
             * Creates a GridFS store instance on the client, which is just a shell object
             * storing some info.
             */
            FS.Store.GridFS = function (name, options) {
              var self = this;
              if (!(self instanceof FS.Store.GridFS)) throw new Error('FS.Store.GridFS missing keyword "new"');
              return new FS.StorageAdapter(name, options, {
                typeName: 'storage.gridfs'
              });
            };
            //////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/cfs:gridfs/gridfs.client.js");

  /* Exports */
  Package._define("cfs:gridfs");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var _exports2;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "tmeasday:check-npm-versions": { "check-npm-versions.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                //
            // packages/tmeasday_check-npm-versions/check-npm-versions.js                                                     //
            //                                                                                                                //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            const module1 = _module;
            module1.export({
              checkNpmVersions: () => checkNpmVersions
            });
            let semver;
            module1.link("semver", {
              default(v) {
                semver = v;
              }

            }, 0);

            // Returns:
            //   - true      if a version of the package in the range is installed
            //   - false     if no version is installed
            //   - version#  if incompatible version is installed
            const compatibleVersionIsInstalled = (name, range) => {
              try {
                const installedVersion = _require("".concat(name, "/package.json")).version;

                if (semver.satisfies(installedVersion, range)) {
                  return true;
                } else {
                  return installedVersion;
                }
              } catch (e) {
                // XXX add something to the tool to make this more reliable
                const message = e.toString(); // One message comes out of the install npm package the other from npm directly

                if (message.match("Cannot find module") || message.match("Can't find npm module")) {
                  return false;
                } else {
                  throw e;
                }
              }
            };

            const checkNpmVersions = (packages, packageName) => {
              const failures = {};
              Object.keys(packages).forEach(name => {
                const range = packages[name];
                const failure = compatibleVersionIsInstalled(name, range);

                if (failure !== true) {
                  failures[name] = failure;
                }
              });

              if (Object.keys(failures).length === 0) {
                return true;
              }

              const errors = [];
              Object.keys(failures).forEach(name => {
                const installed = failures[name];
                const requirement = "".concat(name, "@").concat(packages[name]);

                if (installed) {
                  errors.push(" - ".concat(name, "@").concat(installed, " installed, ").concat(requirement, " needed"));
                } else {
                  errors.push(" - ".concat(name, "@").concat(packages[name], " not installed."));
                }
              });
              const qualifier = packageName ? "(for ".concat(packageName, ") ") : '';
              console.warn("WARNING: npm peer requirements ".concat(qualifier, "not installed:\n").concat(errors.join('\n'), "\n\nRead more about installing npm peer dependencies:\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n"));
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "semver": { "package.json": function (_require3, _exports3, _module2) {

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                //
                // node_modules/meteor/tmeasday_check-npm-versions/node_modules/semver/package.json                               //
                //                                                                                                                //
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _module2.exports = {
                  "name": "semver",
                  "version": "5.1.0",
                  "main": "semver.js"
                };

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "semver.js": function (_require4, _exports4, _module3) {

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                //
                // node_modules/meteor/tmeasday_check-npm-versions/node_modules/semver/semver.js                                  //
                //                                                                                                                //
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _exports4 = _module3.exports = SemVer;

                // The debug function is excluded entirely from the minified version.
                /* nomin */var debug;
                /* nomin */if (typeof process === 'object' &&
                /* nomin */process.env &&
                /* nomin */process.env.NODE_DEBUG &&
                /* nomin *//\bsemver\b/i.test(process.env.NODE_DEBUG))
                  /* nomin */debug = function () {
                    /* nomin */var args = Array.prototype.slice.call(arguments, 0);
                    /* nomin */args.unshift('SEMVER');
                    /* nomin */console.log.apply(console, args);
                    /* nomin */
                  };
                  /* nomin */else
                  /* nomin */debug = function () {};

                // Note: this is the semver.org version of the spec that it implements
                // Not necessarily the package version of this code.
                _exports4.SEMVER_SPEC_VERSION = '2.0.0';

                var MAX_LENGTH = 256;
                var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

                // The actual regexps go on exports.re
                var re = _exports4.re = [];
                var src = _exports4.src = [];
                var R = 0;

                // The following Regular Expressions can be used for tokenizing,
                // validating, and parsing SemVer version strings.

                // ## Numeric Identifier
                // A single `0`, or a non-zero digit followed by zero or more digits.

                var NUMERICIDENTIFIER = R++;
                src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
                var NUMERICIDENTIFIERLOOSE = R++;
                src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';

                // ## Non-numeric Identifier
                // Zero or more digits, followed by a letter or hyphen, and then zero or
                // more letters, digits, or hyphens.

                var NONNUMERICIDENTIFIER = R++;
                src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';

                // ## Main Version
                // Three dot-separated numeric identifiers.

                var MAINVERSION = R++;
                src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')';

                var MAINVERSIONLOOSE = R++;
                src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

                // ## Pre-release Version Identifier
                // A numeric identifier, or a non-numeric identifier.

                var PRERELEASEIDENTIFIER = R++;
                src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] + '|' + src[NONNUMERICIDENTIFIER] + ')';

                var PRERELEASEIDENTIFIERLOOSE = R++;
                src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] + '|' + src[NONNUMERICIDENTIFIER] + ')';

                // ## Pre-release Version
                // Hyphen, followed by one or more dot-separated pre-release version
                // identifiers.

                var PRERELEASE = R++;
                src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] + '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

                var PRERELEASELOOSE = R++;
                src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

                // ## Build Metadata Identifier
                // Any combination of digits, letters, or hyphens.

                var BUILDIDENTIFIER = R++;
                src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

                // ## Build Metadata
                // Plus sign, followed by one or more period-separated build metadata
                // identifiers.

                var BUILD = R++;
                src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] + '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';

                // ## Full Version String
                // A main version, followed optionally by a pre-release version and
                // build metadata.

                // Note that the only major, minor, patch, and pre-release sections of
                // the version string are capturing groups.  The build metadata is not a
                // capturing group, because it should not ever be used in version
                // comparison.

                var FULL = R++;
                var FULLPLAIN = 'v?' + src[MAINVERSION] + src[PRERELEASE] + '?' + src[BUILD] + '?';

                src[FULL] = '^' + FULLPLAIN + '$';

                // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
                // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
                // common in the npm registry.
                var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + '?' + src[BUILD] + '?';

                var LOOSE = R++;
                src[LOOSE] = '^' + LOOSEPLAIN + '$';

                var GTLT = R++;
                src[GTLT] = '((?:<|>)?=?)';

                // Something like "2.*" or "1.2.x".
                // Note that "x.x" is a valid xRange identifer, meaning "any version"
                // Only the first item is strictly required.
                var XRANGEIDENTIFIERLOOSE = R++;
                src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
                var XRANGEIDENTIFIER = R++;
                src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

                var XRANGEPLAIN = R++;
                src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:' + src[PRERELEASE] + ')?' + src[BUILD] + '?' + ')?)?';

                var XRANGEPLAINLOOSE = R++;
                src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[PRERELEASELOOSE] + ')?' + src[BUILD] + '?' + ')?)?';

                var XRANGE = R++;
                src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
                var XRANGELOOSE = R++;
                src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

                // Tilde ranges.
                // Meaning is "reasonably at or greater than"
                var LONETILDE = R++;
                src[LONETILDE] = '(?:~>?)';

                var TILDETRIM = R++;
                src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
                re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
                var tildeTrimReplace = '$1~';

                var TILDE = R++;
                src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
                var TILDELOOSE = R++;
                src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

                // Caret ranges.
                // Meaning is "at least and backwards compatible with"
                var LONECARET = R++;
                src[LONECARET] = '(?:\\^)';

                var CARETTRIM = R++;
                src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
                re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
                var caretTrimReplace = '$1^';

                var CARET = R++;
                src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
                var CARETLOOSE = R++;
                src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

                // A simple gt/lt/eq thing, or just "" to indicate "any version"
                var COMPARATORLOOSE = R++;
                src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
                var COMPARATOR = R++;
                src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';

                // An expression to strip any whitespace between the gtlt and the thing
                // it modifies, so that `> 1.2.3` ==> `>1.2.3`
                var COMPARATORTRIM = R++;
                src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] + '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

                // this one has to use the /g flag
                re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
                var comparatorTrimReplace = '$1$2$3';

                // Something like `1.2.3 - 1.2.4`
                // Note that these all use the loose form, because they'll be
                // checked against either the strict or loose comparator form
                // later.
                var HYPHENRANGE = R++;
                src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAIN] + ')' + '\\s*$';

                var HYPHENRANGELOOSE = R++;
                src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAINLOOSE] + ')' + '\\s*$';

                // Star ranges basically just allow anything at all.
                var STAR = R++;
                src[STAR] = '(<|>)?=?\\s*\\*';

                // Compile to actual regexp objects.
                // All are flag-free, unless they were created above with a flag.
                for (var i = 0; i < R; i++) {
                  debug(i, src[i]);
                  if (!re[i]) re[i] = new RegExp(src[i]);
                }

                _exports4.parse = parse;
                function parse(version, loose) {
                  if (version instanceof SemVer) return version;

                  if (typeof version !== 'string') return null;

                  if (version.length > MAX_LENGTH) return null;

                  var r = loose ? re[LOOSE] : re[FULL];
                  if (!r.test(version)) return null;

                  try {
                    return new SemVer(version, loose);
                  } catch (er) {
                    return null;
                  }
                }

                _exports4.valid = valid;
                function valid(version, loose) {
                  var v = parse(version, loose);
                  return v ? v.version : null;
                }

                _exports4.clean = clean;
                function clean(version, loose) {
                  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
                  return s ? s.version : null;
                }

                _exports4.SemVer = SemVer;

                function SemVer(version, loose) {
                  if (version instanceof SemVer) {
                    if (version.loose === loose) return version;else version = version.version;
                  } else if (typeof version !== 'string') {
                    throw new TypeError('Invalid Version: ' + version);
                  }

                  if (version.length > MAX_LENGTH) throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');

                  if (!(this instanceof SemVer)) return new SemVer(version, loose);

                  debug('SemVer', version, loose);
                  this.loose = loose;
                  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

                  if (!m) throw new TypeError('Invalid Version: ' + version);

                  this.raw = version;

                  // these are actually numbers
                  this.major = +m[1];
                  this.minor = +m[2];
                  this.patch = +m[3];

                  if (this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError('Invalid major version');

                  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError('Invalid minor version');

                  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError('Invalid patch version');

                  // numberify any prerelease numeric ids
                  if (!m[4]) this.prerelease = [];else this.prerelease = m[4].split('.').map(function (id) {
                    if (/^[0-9]+$/.test(id)) {
                      var num = +id;
                      if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
                    }
                    return id;
                  });

                  this.build = m[5] ? m[5].split('.') : [];
                  this.format();
                }

                SemVer.prototype.format = function () {
                  this.version = this.major + '.' + this.minor + '.' + this.patch;
                  if (this.prerelease.length) this.version += '-' + this.prerelease.join('.');
                  return this.version;
                };

                SemVer.prototype.toString = function () {
                  return this.version;
                };

                SemVer.prototype.compare = function (other) {
                  debug('SemVer.compare', this.version, this.loose, other);
                  if (!(other instanceof SemVer)) other = new SemVer(other, this.loose);

                  return this.compareMain(other) || this.comparePre(other);
                };

                SemVer.prototype.compareMain = function (other) {
                  if (!(other instanceof SemVer)) other = new SemVer(other, this.loose);

                  return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
                };

                SemVer.prototype.comparePre = function (other) {
                  if (!(other instanceof SemVer)) other = new SemVer(other, this.loose);

                  // NOT having a prerelease is > having one
                  if (this.prerelease.length && !other.prerelease.length) return -1;else if (!this.prerelease.length && other.prerelease.length) return 1;else if (!this.prerelease.length && !other.prerelease.length) return 0;

                  var i = 0;
                  do {
                    var a = this.prerelease[i];
                    var b = other.prerelease[i];
                    debug('prerelease compare', i, a, b);
                    if (a === undefined && b === undefined) return 0;else if (b === undefined) return 1;else if (a === undefined) return -1;else if (a === b) continue;else return compareIdentifiers(a, b);
                  } while (++i);
                };

                // preminor will bump the version up to the next minor release, and immediately
                // down to pre-release. premajor and prepatch work the same way.
                SemVer.prototype.inc = function (release, identifier) {
                  switch (release) {
                    case 'premajor':
                      this.prerelease.length = 0;
                      this.patch = 0;
                      this.minor = 0;
                      this.major++;
                      this.inc('pre', identifier);
                      break;
                    case 'preminor':
                      this.prerelease.length = 0;
                      this.patch = 0;
                      this.minor++;
                      this.inc('pre', identifier);
                      break;
                    case 'prepatch':
                      // If this is already a prerelease, it will bump to the next version
                      // drop any prereleases that might already exist, since they are not
                      // relevant at this point.
                      this.prerelease.length = 0;
                      this.inc('patch', identifier);
                      this.inc('pre', identifier);
                      break;
                    // If the input is a non-prerelease version, this acts the same as
                    // prepatch.
                    case 'prerelease':
                      if (this.prerelease.length === 0) this.inc('patch', identifier);
                      this.inc('pre', identifier);
                      break;

                    case 'major':
                      // If this is a pre-major version, bump up to the same major version.
                      // Otherwise increment major.
                      // 1.0.0-5 bumps to 1.0.0
                      // 1.1.0 bumps to 2.0.0
                      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
                      this.minor = 0;
                      this.patch = 0;
                      this.prerelease = [];
                      break;
                    case 'minor':
                      // If this is a pre-minor version, bump up to the same minor version.
                      // Otherwise increment minor.
                      // 1.2.0-5 bumps to 1.2.0
                      // 1.2.1 bumps to 1.3.0
                      if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
                      this.patch = 0;
                      this.prerelease = [];
                      break;
                    case 'patch':
                      // If this is not a pre-release version, it will increment the patch.
                      // If it is a pre-release it will bump up to the same patch version.
                      // 1.2.0-5 patches to 1.2.0
                      // 1.2.0 patches to 1.2.1
                      if (this.prerelease.length === 0) this.patch++;
                      this.prerelease = [];
                      break;
                    // This probably shouldn't be used publicly.
                    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
                    case 'pre':
                      if (this.prerelease.length === 0) this.prerelease = [0];else {
                        var i = this.prerelease.length;
                        while (--i >= 0) {
                          if (typeof this.prerelease[i] === 'number') {
                            this.prerelease[i]++;
                            i = -2;
                          }
                        }
                        if (i === -1) // didn't increment anything
                          this.prerelease.push(0);
                      }
                      if (identifier) {
                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                        if (this.prerelease[0] === identifier) {
                          if (isNaN(this.prerelease[1])) this.prerelease = [identifier, 0];
                        } else this.prerelease = [identifier, 0];
                      }
                      break;

                    default:
                      throw new Error('invalid increment argument: ' + release);
                  }
                  this.format();
                  this.raw = this.version;
                  return this;
                };

                _exports4.inc = inc;
                function inc(version, release, loose, identifier) {
                  if (typeof loose === 'string') {
                    identifier = loose;
                    loose = undefined;
                  }

                  try {
                    return new SemVer(version, loose).inc(release, identifier).version;
                  } catch (er) {
                    return null;
                  }
                }

                _exports4.diff = diff;
                function diff(version1, version2) {
                  if (eq(version1, version2)) {
                    return null;
                  } else {
                    var v1 = parse(version1);
                    var v2 = parse(version2);
                    if (v1.prerelease.length || v2.prerelease.length) {
                      for (var key in v1) {
                        if (key === 'major' || key === 'minor' || key === 'patch') {
                          if (v1[key] !== v2[key]) {
                            return 'pre' + key;
                          }
                        }
                      }
                      return 'prerelease';
                    }
                    for (var key in v1) {
                      if (key === 'major' || key === 'minor' || key === 'patch') {
                        if (v1[key] !== v2[key]) {
                          return key;
                        }
                      }
                    }
                  }
                }

                _exports4.compareIdentifiers = compareIdentifiers;

                var numeric = /^[0-9]+$/;
                function compareIdentifiers(a, b) {
                  var anum = numeric.test(a);
                  var bnum = numeric.test(b);

                  if (anum && bnum) {
                    a = +a;
                    b = +b;
                  }

                  return anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : a > b ? 1 : 0;
                }

                _exports4.rcompareIdentifiers = rcompareIdentifiers;
                function rcompareIdentifiers(a, b) {
                  return compareIdentifiers(b, a);
                }

                _exports4.major = major;
                function major(a, loose) {
                  return new SemVer(a, loose).major;
                }

                _exports4.minor = minor;
                function minor(a, loose) {
                  return new SemVer(a, loose).minor;
                }

                _exports4.patch = patch;
                function patch(a, loose) {
                  return new SemVer(a, loose).patch;
                }

                _exports4.compare = compare;
                function compare(a, b, loose) {
                  return new SemVer(a, loose).compare(b);
                }

                _exports4.compareLoose = compareLoose;
                function compareLoose(a, b) {
                  return compare(a, b, true);
                }

                _exports4.rcompare = rcompare;
                function rcompare(a, b, loose) {
                  return compare(b, a, loose);
                }

                _exports4.sort = sort;
                function sort(list, loose) {
                  return list.sort(function (a, b) {
                    return _exports4.compare(a, b, loose);
                  });
                }

                _exports4.rsort = rsort;
                function rsort(list, loose) {
                  return list.sort(function (a, b) {
                    return _exports4.rcompare(a, b, loose);
                  });
                }

                _exports4.gt = gt;
                function gt(a, b, loose) {
                  return compare(a, b, loose) > 0;
                }

                _exports4.lt = lt;
                function lt(a, b, loose) {
                  return compare(a, b, loose) < 0;
                }

                _exports4.eq = eq;
                function eq(a, b, loose) {
                  return compare(a, b, loose) === 0;
                }

                _exports4.neq = neq;
                function neq(a, b, loose) {
                  return compare(a, b, loose) !== 0;
                }

                _exports4.gte = gte;
                function gte(a, b, loose) {
                  return compare(a, b, loose) >= 0;
                }

                _exports4.lte = lte;
                function lte(a, b, loose) {
                  return compare(a, b, loose) <= 0;
                }

                _exports4.cmp = cmp;
                function cmp(a, op, b, loose) {
                  var ret;
                  switch (op) {
                    case '===':
                      if (typeof a === 'object') a = a.version;
                      if (typeof b === 'object') b = b.version;
                      ret = a === b;
                      break;
                    case '!==':
                      if (typeof a === 'object') a = a.version;
                      if (typeof b === 'object') b = b.version;
                      ret = a !== b;
                      break;
                    case '':case '=':case '==':
                      ret = eq(a, b, loose);break;
                    case '!=':
                      ret = neq(a, b, loose);break;
                    case '>':
                      ret = gt(a, b, loose);break;
                    case '>=':
                      ret = gte(a, b, loose);break;
                    case '<':
                      ret = lt(a, b, loose);break;
                    case '<=':
                      ret = lte(a, b, loose);break;
                    default:
                      throw new TypeError('Invalid operator: ' + op);
                  }
                  return ret;
                }

                _exports4.Comparator = Comparator;
                function Comparator(comp, loose) {
                  if (comp instanceof Comparator) {
                    if (comp.loose === loose) return comp;else comp = comp.value;
                  }

                  if (!(this instanceof Comparator)) return new Comparator(comp, loose);

                  debug('comparator', comp, loose);
                  this.loose = loose;
                  this.parse(comp);

                  if (this.semver === ANY) this.value = '';else this.value = this.operator + this.semver.version;

                  debug('comp', this);
                }

                var ANY = {};
                Comparator.prototype.parse = function (comp) {
                  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
                  var m = comp.match(r);

                  if (!m) throw new TypeError('Invalid comparator: ' + comp);

                  this.operator = m[1];
                  if (this.operator === '=') this.operator = '';

                  // if it literally is just '>' or '' then allow anything.
                  if (!m[2]) this.semver = ANY;else this.semver = new SemVer(m[2], this.loose);
                };

                Comparator.prototype.toString = function () {
                  return this.value;
                };

                Comparator.prototype.test = function (version) {
                  debug('Comparator.test', version, this.loose);

                  if (this.semver === ANY) return true;

                  if (typeof version === 'string') version = new SemVer(version, this.loose);

                  return cmp(version, this.operator, this.semver, this.loose);
                };

                _exports4.Range = Range;
                function Range(range, loose) {
                  if (range instanceof Range && range.loose === loose) return range;

                  if (!(this instanceof Range)) return new Range(range, loose);

                  this.loose = loose;

                  // First, split based on boolean or ||
                  this.raw = range;
                  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
                    return this.parseRange(range.trim());
                  }, this).filter(function (c) {
                    // throw out any that are not relevant for whatever reason
                    return c.length;
                  });

                  if (!this.set.length) {
                    throw new TypeError('Invalid SemVer Range: ' + range);
                  }

                  this.format();
                }

                Range.prototype.format = function () {
                  this.range = this.set.map(function (comps) {
                    return comps.join(' ').trim();
                  }).join('||').trim();
                  return this.range;
                };

                Range.prototype.toString = function () {
                  return this.range;
                };

                Range.prototype.parseRange = function (range) {
                  var loose = this.loose;
                  range = range.trim();
                  debug('range', range, loose);
                  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
                  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
                  range = range.replace(hr, hyphenReplace);
                  debug('hyphen replace', range);
                  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
                  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
                  debug('comparator trim', range, re[COMPARATORTRIM]);

                  // `~ 1.2.3` => `~1.2.3`
                  range = range.replace(re[TILDETRIM], tildeTrimReplace);

                  // `^ 1.2.3` => `^1.2.3`
                  range = range.replace(re[CARETTRIM], caretTrimReplace);

                  // normalize spaces
                  range = range.split(/\s+/).join(' ');

                  // At this point, the range is completely trimmed and
                  // ready to be split into comparators.

                  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
                  var set = range.split(' ').map(function (comp) {
                    return parseComparator(comp, loose);
                  }).join(' ').split(/\s+/);
                  if (this.loose) {
                    // in loose mode, throw out any that are not valid comparators
                    set = set.filter(function (comp) {
                      return !!comp.match(compRe);
                    });
                  }
                  set = set.map(function (comp) {
                    return new Comparator(comp, loose);
                  });

                  return set;
                };

                // Mostly just for testing and legacy API reasons
                _exports4.toComparators = toComparators;
                function toComparators(range, loose) {
                  return new Range(range, loose).set.map(function (comp) {
                    return comp.map(function (c) {
                      return c.value;
                    }).join(' ').trim().split(' ');
                  });
                }

                // comprised of xranges, tildes, stars, and gtlt's at this point.
                // already replaced the hyphen ranges
                // turn into a set of JUST comparators.
                function parseComparator(comp, loose) {
                  debug('comp', comp);
                  comp = replaceCarets(comp, loose);
                  debug('caret', comp);
                  comp = replaceTildes(comp, loose);
                  debug('tildes', comp);
                  comp = replaceXRanges(comp, loose);
                  debug('xrange', comp);
                  comp = replaceStars(comp, loose);
                  debug('stars', comp);
                  return comp;
                }

                function isX(id) {
                  return !id || id.toLowerCase() === 'x' || id === '*';
                }

                // ~, ~> --> * (any, kinda silly)
                // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
                // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
                // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
                // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
                // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
                function replaceTildes(comp, loose) {
                  return comp.trim().split(/\s+/).map(function (comp) {
                    return replaceTilde(comp, loose);
                  }).join(' ');
                }

                function replaceTilde(comp, loose) {
                  var r = loose ? re[TILDELOOSE] : re[TILDE];
                  return comp.replace(r, function (_, M, m, p, pr) {
                    debug('tilde', comp, _, M, m, p, pr);
                    var ret;

                    if (isX(M)) ret = '';else if (isX(m)) ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';else if (isX(p))
                      // ~1.2 == >=1.2.0- <1.3.0-
                      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';else if (pr) {
                      debug('replaceTilde pr', pr);
                      if (pr.charAt(0) !== '-') pr = '-' + pr;
                      ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + (+m + 1) + '.0';
                    } else
                      // ~1.2.3 == >=1.2.3 <1.3.0
                      ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';

                    debug('tilde return', ret);
                    return ret;
                  });
                }

                // ^ --> * (any, kinda silly)
                // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
                // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
                // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
                // ^1.2.3 --> >=1.2.3 <2.0.0
                // ^1.2.0 --> >=1.2.0 <2.0.0
                function replaceCarets(comp, loose) {
                  return comp.trim().split(/\s+/).map(function (comp) {
                    return replaceCaret(comp, loose);
                  }).join(' ');
                }

                function replaceCaret(comp, loose) {
                  debug('caret', comp, loose);
                  var r = loose ? re[CARETLOOSE] : re[CARET];
                  return comp.replace(r, function (_, M, m, p, pr) {
                    debug('caret', comp, _, M, m, p, pr);
                    var ret;

                    if (isX(M)) ret = '';else if (isX(m)) ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';else if (isX(p)) {
                      if (M === '0') ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';else ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
                    } else if (pr) {
                      debug('replaceCaret pr', pr);
                      if (pr.charAt(0) !== '-') pr = '-' + pr;
                      if (M === '0') {
                        if (m === '0') ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + m + '.' + (+p + 1);else ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + (+m + 1) + '.0';
                      } else ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + (+M + 1) + '.0.0';
                    } else {
                      debug('no pr');
                      if (M === '0') {
                        if (m === '0') ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);else ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
                      } else ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
                    }

                    debug('caret return', ret);
                    return ret;
                  });
                }

                function replaceXRanges(comp, loose) {
                  debug('replaceXRanges', comp, loose);
                  return comp.split(/\s+/).map(function (comp) {
                    return replaceXRange(comp, loose);
                  }).join(' ');
                }

                function replaceXRange(comp, loose) {
                  comp = comp.trim();
                  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
                  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
                    debug('xRange', comp, ret, gtlt, M, m, p, pr);
                    var xM = isX(M);
                    var xm = xM || isX(m);
                    var xp = xm || isX(p);
                    var anyX = xp;

                    if (gtlt === '=' && anyX) gtlt = '';

                    if (xM) {
                      if (gtlt === '>' || gtlt === '<') {
                        // nothing is allowed
                        ret = '<0.0.0';
                      } else {
                        // nothing is forbidden
                        ret = '*';
                      }
                    } else if (gtlt && anyX) {
                      // replace X with 0
                      if (xm) m = 0;
                      if (xp) p = 0;

                      if (gtlt === '>') {
                        // >1 => >=2.0.0
                        // >1.2 => >=1.3.0
                        // >1.2.3 => >= 1.2.4
                        gtlt = '>=';
                        if (xm) {
                          M = +M + 1;
                          m = 0;
                          p = 0;
                        } else if (xp) {
                          m = +m + 1;
                          p = 0;
                        }
                      } else if (gtlt === '<=') {
                        // <=0.7.x is actually <0.8.0, since any 0.7.x should
                        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                        gtlt = '<';
                        if (xm) M = +M + 1;else m = +m + 1;
                      }

                      ret = gtlt + M + '.' + m + '.' + p;
                    } else if (xm) {
                      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
                    } else if (xp) {
                      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
                    }

                    debug('xRange return', ret);

                    return ret;
                  });
                }

                // Because * is AND-ed with everything else in the comparator,
                // and '' means "any version", just remove the *s entirely.
                function replaceStars(comp, loose) {
                  debug('replaceStars', comp, loose);
                  // Looseness is ignored here.  star is always as loose as it gets!
                  return comp.trim().replace(re[STAR], '');
                }

                // This function is passed to string.replace(re[HYPHENRANGE])
                // M, m, patch, prerelease, build
                // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
                // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
                // 1.2 - 3.4 => >=1.2.0 <3.5.0
                function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {

                  if (isX(fM)) from = '';else if (isX(fm)) from = '>=' + fM + '.0.0';else if (isX(fp)) from = '>=' + fM + '.' + fm + '.0';else from = '>=' + from;

                  if (isX(tM)) to = '';else if (isX(tm)) to = '<' + (+tM + 1) + '.0.0';else if (isX(tp)) to = '<' + tM + '.' + (+tm + 1) + '.0';else if (tpr) to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;else to = '<=' + to;

                  return (from + ' ' + to).trim();
                }

                // if ANY of the sets match ALL of its comparators, then pass
                Range.prototype.test = function (version) {
                  if (!version) return false;

                  if (typeof version === 'string') version = new SemVer(version, this.loose);

                  for (var i = 0; i < this.set.length; i++) {
                    if (testSet(this.set[i], version)) return true;
                  }
                  return false;
                };

                function testSet(set, version) {
                  for (var i = 0; i < set.length; i++) {
                    if (!set[i].test(version)) return false;
                  }

                  if (version.prerelease.length) {
                    // Find the set of versions that are allowed to have prereleases
                    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
                    // That should allow `1.2.3-pr.2` to pass.
                    // However, `1.2.4-alpha.notready` should NOT be allowed,
                    // even though it's within the range set by the comparators.
                    for (var i = 0; i < set.length; i++) {
                      debug(set[i].semver);
                      if (set[i].semver === ANY) continue;

                      if (set[i].semver.prerelease.length > 0) {
                        var allowed = set[i].semver;
                        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
                      }
                    }

                    // Version has a -pre, but it's not one of the ones we like.
                    return false;
                  }

                  return true;
                }

                _exports4.satisfies = satisfies;
                function satisfies(version, range, loose) {
                  try {
                    range = new Range(range, loose);
                  } catch (er) {
                    return false;
                  }
                  return range.test(version);
                }

                _exports4.maxSatisfying = maxSatisfying;
                function maxSatisfying(versions, range, loose) {
                  return versions.filter(function (version) {
                    return satisfies(version, range, loose);
                  }).sort(function (a, b) {
                    return rcompare(a, b, loose);
                  })[0] || null;
                }

                _exports4.validRange = validRange;
                function validRange(range, loose) {
                  try {
                    // Return '*' instead of '' so that truthiness works.
                    // This will throw if it's invalid anyway
                    return new Range(range, loose).range || '*';
                  } catch (er) {
                    return null;
                  }
                }

                // Determine if version is less than all the versions possible in the range
                _exports4.ltr = ltr;
                function ltr(version, range, loose) {
                  return outside(version, range, '<', loose);
                }

                // Determine if version is greater than all the versions possible in the range.
                _exports4.gtr = gtr;
                function gtr(version, range, loose) {
                  return outside(version, range, '>', loose);
                }

                _exports4.outside = outside;
                function outside(version, range, hilo, loose) {
                  version = new SemVer(version, loose);
                  range = new Range(range, loose);

                  var gtfn, ltefn, ltfn, comp, ecomp;
                  switch (hilo) {
                    case '>':
                      gtfn = gt;
                      ltefn = lte;
                      ltfn = lt;
                      comp = '>';
                      ecomp = '>=';
                      break;
                    case '<':
                      gtfn = lt;
                      ltefn = gte;
                      ltfn = gt;
                      comp = '<';
                      ecomp = '<=';
                      break;
                    default:
                      throw new TypeError('Must provide a hilo val of "<" or ">"');
                  }

                  // If it satisifes the range it is not outside
                  if (satisfies(version, range, loose)) {
                    return false;
                  }

                  // From now on, variable terms are as if we're in "gtr" mode.
                  // but note that everything is flipped for the "ltr" function.

                  for (var i = 0; i < range.set.length; ++i) {
                    var comparators = range.set[i];

                    var high = null;
                    var low = null;

                    comparators.forEach(function (comparator) {
                      if (comparator.semver === ANY) {
                        comparator = new Comparator('>=0.0.0');
                      }
                      high = high || comparator;
                      low = low || comparator;
                      if (gtfn(comparator.semver, high.semver, loose)) {
                        high = comparator;
                      } else if (ltfn(comparator.semver, low.semver, loose)) {
                        low = comparator;
                      }
                    });

                    // If the edge version comparator has a operator then our version
                    // isn't outside it
                    if (high.operator === comp || high.operator === ecomp) {
                      return false;
                    }

                    // If the lowest version comparator has an operator and our version
                    // is less than it then it isn't higher than the range
                    if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
                      return false;
                    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
                      return false;
                    }
                  }
                  return true;
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/tmeasday:check-npm-versions/check-npm-versions.js");

  /* Exports */
  Package._define("tmeasday:check-npm-versions", _exports2);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var ReactMeteorData;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "react-meteor-data": { "react-meteor-data.jsx": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                     //
            // packages/react-meteor-data/react-meteor-data.jsx                                                    //
            //                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let checkNpmVersions;
            _module.link("meteor/tmeasday:check-npm-versions", {
              checkNpmVersions(v) {
                checkNpmVersions = v;
              }

            }, 0);
            _module.link("./createContainer.jsx", {
              default: "createContainer"
            }, 1);
            _module.link("./ReactMeteorData.jsx", {
              default: "withTracker"
            }, 2);
            _module.link("./ReactMeteorData.jsx", {
              ReactMeteorData: "ReactMeteorData"
            }, 3);
            checkNpmVersions({
              react: '15.3 - 16'
            }, 'react-meteor-data');
            /////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "ReactMeteorData.jsx": function (_require3, _exports3, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                     //
            // packages/react-meteor-data/ReactMeteorData.jsx                                                      //
            //                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

            var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

            _module2.export({
              ReactMeteorData: () => ReactMeteorData,
              default: () => connect
            });
            let React;
            _module2.link("react", {
              default(v) {
                React = v;
              }

            }, 0);
            let Meteor;
            _module2.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 1);
            let Tracker;
            _module2.link("meteor/tracker", {
              Tracker(v) {
                Tracker = v;
              }

            }, 2);

            // A class to keep the state and utility methods needed to manage
            // the Meteor data for a component.
            class MeteorDataManager {
              constructor(component) {
                this.component = component;
                this.computation = null;
                this.oldData = null;
              }

              dispose() {
                if (this.computation) {
                  this.computation.stop();
                  this.computation = null;
                }
              }

              calculateData() {
                const component = this.component;

                if (!component.getMeteorData) {
                  return null;
                } // When rendering on the server, we don't want to use the Tracker.
                // We only do the first rendering on the server so we can get the data right away


                if (Meteor.isServer) {
                  return component.getMeteorData();
                }

                if (this.computation) {
                  this.computation.stop();
                  this.computation = null;
                }

                let data; // Use Tracker.nonreactive in case we are inside a Tracker Computation.
                // This can happen if someone calls `ReactDOM.render` inside a Computation.
                // In that case, we want to opt out of the normal behavior of nested
                // Computations, where if the outer one is invalidated or stopped,
                // it stops the inner one.

                this.computation = Tracker.nonreactive(() => Tracker.autorun(c => {
                  if (c.firstRun) {
                    const savedSetState = component.setState;

                    try {
                      component.setState = () => {
                        throw new Error('Can\'t call `setState` inside `getMeteorData` as this could ' + 'cause an endless loop. To respond to Meteor data changing, ' + 'consider making this component a \"wrapper component\" that ' + 'only fetches data and passes it in as props to a child ' + 'component. Then you can use `componentWillReceiveProps` in ' + 'that child component.');
                      };

                      data = component.getMeteorData();
                    } finally {
                      component.setState = savedSetState;
                    }
                  } else {
                    // Stop this computation instead of using the re-run.
                    // We use a brand-new autorun for each call to getMeteorData
                    // to capture dependencies on any reactive data sources that
                    // are accessed.  The reason we can't use a single autorun
                    // for the lifetime of the component is that Tracker only
                    // re-runs autoruns at flush time, while we need to be able to
                    // re-call getMeteorData synchronously whenever we want, e.g.
                    // from componentWillUpdate.
                    c.stop(); // Calling forceUpdate() triggers componentWillUpdate which
                    // recalculates getMeteorData() and re-renders the component.

                    component.forceUpdate();
                  }
                }));

                if (Package.mongo && Package.mongo.Mongo) {
                  Object.keys(data).forEach(key => {
                    if (data[key] instanceof Package.mongo.Mongo.Cursor) {
                      console.warn('Warning: you are returning a Mongo cursor from getMeteorData. ' + 'This value will not be reactive. You probably want to call ' + '`.fetch()` on the cursor before returning it.');
                    }
                  });
                }

                return data;
              }

              updateData(newData) {
                const component = this.component;
                const oldData = this.oldData;

                if (!(newData && typeof newData === 'object')) {
                  throw new Error('Expected object returned from getMeteorData');
                } // update componentData in place based on newData


                for (let key in newData) {
                  component.data[key] = newData[key];
                } // if there is oldData (which is every time this method is called
                // except the first), delete keys in newData that aren't in
                // oldData.  don't interfere with other keys, in case we are
                // co-existing with something else that writes to a component's
                // this.data.


                if (oldData) {
                  for (let key in oldData) {
                    if (!(key in newData)) {
                      delete component.data[key];
                    }
                  }
                }

                this.oldData = newData;
              }

            }

            const ReactMeteorData = {
              componentWillMount() {
                this.data = {};
                this._meteorDataManager = new MeteorDataManager(this);

                const newData = this._meteorDataManager.calculateData();

                this._meteorDataManager.updateData(newData);
              },

              componentWillUpdate(nextProps, nextState) {
                const saveProps = this.props;
                const saveState = this.state;
                let newData;

                try {
                  // Temporarily assign this.state and this.props,
                  // so that they are seen by getMeteorData!
                  // This is a simulation of how the proposed Observe API
                  // for React will work, which calls observe() after
                  // componentWillUpdate and after props and state are
                  // updated, but before render() is called.
                  // See https://github.com/facebook/react/issues/3398.
                  this.props = nextProps;
                  this.state = nextState;
                  newData = this._meteorDataManager.calculateData();
                } finally {
                  this.props = saveProps;
                  this.state = saveState;
                }

                this._meteorDataManager.updateData(newData);
              },

              componentWillUnmount() {
                this._meteorDataManager.dispose();
              }

            };

            class ReactComponent extends React.Component {}

            Object.assign(ReactComponent.prototype, ReactMeteorData);

            class ReactPureComponent extends React.PureComponent {}

            Object.assign(ReactPureComponent.prototype, ReactMeteorData);

            function connect(options) {
              let expandedOptions = options;

              if (typeof options === 'function') {
                expandedOptions = {
                  getMeteorData: options
                };
              }

              const {
                getMeteorData,
                pure = true
              } = expandedOptions;
              const BaseComponent = pure ? ReactPureComponent : ReactComponent;
              return WrappedComponent => class ReactMeteorDataComponent extends BaseComponent {
                getMeteorData() {
                  return getMeteorData(this.props);
                }

                render() {
                  return React.createElement(WrappedComponent, (0, _extends2.default)({}, this.props, this.data));
                }

              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "createContainer.jsx": function (_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                     //
            // packages/react-meteor-data/createContainer.jsx                                                      //
            //                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              default: () => createContainer
            });
            let Meteor;
            _module3.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);
            let React;
            _module3.link("react", {
              default(v) {
                React = v;
              }

            }, 1);
            let connect;
            _module3.link("./ReactMeteorData.jsx", {
              default(v) {
                connect = v;
              }

            }, 2);
            let hasDisplayedWarning = false;

            function createContainer(options, Component) {
              if (!hasDisplayedWarning && Meteor.isDevelopment) {
                console.warn('Warning: createContainer was deprecated in react-meteor-data@0.2.13. Use withTracker instead.\n' + 'https://github.com/meteor/react-packages/tree/devel/packages/react-meteor-data#usage');
                hasDisplayedWarning = true;
              }

              return connect(options)(Component);
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json", ".jsx"]
  });

  var _exports2 = _require2("/node_modules/meteor/react-meteor-data/react-meteor-data.jsx");

  /* Exports */
  Package._define("react-meteor-data", _exports2, {
    ReactMeteorData: ReactMeteorData
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var WebApp;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "webapp": { "webapp_client.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/webapp/webapp_client.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              WebApp: () => WebApp
            });
            const WebApp = {
              _isCssLoaded() {
                if (document.styleSheets.length === 0) {
                  return true;
                }

                return Array.prototype.find.call(document.styleSheets, sheet => {
                  if (sheet.cssText && !sheet.cssRules) {
                    // IE8
                    return !sheet.cssText.match(/meteor-css-not-found-error/);
                  }

                  return !Array.prototype.find.call(sheet.cssRules, rule => rule.selectorText === '.meteor-css-not-found-error');
                });
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/webapp/webapp_client.js");

  /* Exports */
  Package._define("webapp", _exports2, {
    WebApp: WebApp
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("hot-code-push");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var URL;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "url": { "url_client.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/url/url_client.js                                                  //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var common = _require("./url_common.js");
            var URL = _exports.URL = common.URL;

            URL._constructUrl = function (url, query, params) {
              var query_match = /^(.*?)(\?.*)?$/.exec(url);
              return common.buildUrl(query_match[1], query_match[2], query, params);
            };

            /////////////////////////////////////////////////////////////////////////////////
          }, "url_common.js": function (_require2, _exports2) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/url/url_common.js                                                  //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var URL = _exports2.URL = {};

            function encodeString(str) {
              return encodeURIComponent(str).replace(/\*/g, '%2A');
            }

            // Encode URL paramaters into a query string, handling nested objects and
            // arrays properly.
            URL._encodeParams = function (params, prefix) {
              var str = [];
              var isParamsArray = Array.isArray(params);
              for (var p in params) {
                if (Object.prototype.hasOwnProperty.call(params, p)) {
                  var k = prefix ? prefix + '[' + (isParamsArray ? '' : p) + ']' : p;
                  var v = params[p];
                  if (typeof v === 'object') {
                    str.push(this._encodeParams(v, k));
                  } else {
                    var encodedKey = encodeString(k).replace('%5B', '[').replace('%5D', ']');
                    str.push(encodedKey + '=' + encodeString(v));
                  }
                }
              }
              return str.join('&').replace(/%20/g, '+');
            };

            _exports2.buildUrl = function (before_qmark, from_qmark, opt_query, opt_params) {
              var url_without_query = before_qmark;
              var query = from_qmark ? from_qmark.slice(1) : null;

              if (typeof opt_query === "string") query = String(opt_query);

              if (opt_params) {
                query = query || "";
                var prms = URL._encodeParams(opt_params);
                if (query && prms) query += '&';
                query += prms;
              }

              var url = url_without_query;
              if (query !== null) url += "?" + query;

              return url;
            };

            /////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/url/url_client.js");

  /* Exports */
  Package._define("url", _exports3, {
    URL: URL
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var URL = Package.url.URL;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var HTTP;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "http": { "httpcall_client.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/http/httpcall_client.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var URL = _require("meteor/url").URL;
            var common = _require("./httpcall_common.js");
            var HTTP = _exports.HTTP = common.HTTP;
            var hasOwn = Object.prototype.hasOwnProperty;

            /**
             * @summary Perform an outbound HTTP request.
             * @locus Anywhere
             * @param {String} method The [HTTP method](http://en.wikipedia.org/wiki/HTTP_method) to use, such as "`GET`", "`POST`", or "`HEAD`".
             * @param {String} url The URL to retrieve.
             * @param {Object} [options]
             * @param {String} options.content String to use as the HTTP request body.
             * @param {Object} options.data JSON-able object to stringify and use as the HTTP request body. Overwrites `content`.
             * @param {String} options.query Query string to go in the URL. Overwrites any query string in `url`.
             * @param {Object} options.params Dictionary of request parameters to be encoded and placed in the URL (for GETs) or request body (for POSTs).  If `content` or `data` is specified, `params` will always be placed in the URL.
             * @param {String} options.auth HTTP basic authentication string of the form `"username:password"`
             * @param {Object} options.headers Dictionary of strings, headers to add to the HTTP request.
             * @param {Number} options.timeout Maximum time in milliseconds to wait for the request before failing.  There is no timeout by default.
             * @param {Boolean} options.followRedirects If `true`, transparently follow HTTP redirects. Cannot be set to `false` on the client. Default `true`.
             * @param {Object} options.npmRequestOptions On the server, `HTTP.call` is implemented by using the [npm `request` module](https://www.npmjs.com/package/request). Any options in this object will be passed directly to the `request` invocation.
             * @param {Function} options.beforeSend On the client, this will be called before the request is sent to allow for more direct manipulation of the underlying XMLHttpRequest object, which will be passed as the first argument. If the callback returns `false`, the request will be not be sent.
             * @param {Function} [asyncCallback] Optional callback.  If passed, the method runs asynchronously, instead of synchronously, and calls asyncCallback.  On the client, this callback is required.
             */
            HTTP.call = function (method, url, options, callback) {

              ////////// Process arguments //////////

              if (!callback && typeof options === "function") {
                // support (method, url, callback) argument list
                callback = options;
                options = null;
              }

              options = options || {};

              if (typeof callback !== "function") throw new Error("Can't make a blocking HTTP call from the client; callback required.");

              method = (method || "").toUpperCase();

              var headers = {};

              var content = options.content;
              if (options.data) {
                content = JSON.stringify(options.data);
                headers['Content-Type'] = 'application/json';
              }

              var params_for_url, params_for_body;
              if (content || method === "GET" || method === "HEAD") params_for_url = options.params;else params_for_body = options.params;

              url = URL._constructUrl(url, options.query, params_for_url);

              if (options.followRedirects === false) throw new Error("Option followRedirects:false not supported on client.");

              if (hasOwn.call(options, 'npmRequestOptions')) {
                throw new Error("Option npmRequestOptions not supported on client.");
              }

              var username, password;
              if (options.auth) {
                var colonLoc = options.auth.indexOf(':');
                if (colonLoc < 0) throw new Error('Option auth should be of the form "username:password"');
                username = options.auth.substring(0, colonLoc);
                password = options.auth.substring(colonLoc + 1);
              }

              if (params_for_body) {
                content = URL._encodeParams(params_for_body);
              }

              if (options.headers) {
                Object.keys(options.headers).forEach(function (key) {
                  headers[key] = options.headers[key];
                });
              }

              ////////// Callback wrapping //////////

              // wrap callback to add a 'response' property on an error, in case
              // we have both (http 4xx/5xx error, which has a response payload)
              callback = function (callback) {
                var called = false;
                return function (error, response) {
                  if (!called) {
                    called = true;
                    if (error && response) {
                      error.response = response;
                    }
                    callback(error, response);
                  }
                };
              }(callback);

              ////////// Kickoff! //////////

              // from this point on, errors are because of something remote, not
              // something we should check in advance. Turn exceptions into error
              // results.
              try {
                // setup XHR object
                var xhr;
                if (typeof XMLHttpRequest !== "undefined") xhr = new XMLHttpRequest();else if (typeof ActiveXObject !== "undefined") xhr = new ActiveXObject("Microsoft.XMLHttp"); // IE6
                else throw new Error("Can't create XMLHttpRequest"); // ???

                xhr.open(method, url, true, username, password);

                for (var k in headers) xhr.setRequestHeader(k, headers[k]);

                // setup timeout
                var timed_out = false;
                var timer;
                if (options.timeout) {
                  timer = Meteor.setTimeout(function () {
                    timed_out = true;
                    xhr.abort();
                  }, options.timeout);
                };

                // callback on complete
                xhr.onreadystatechange = function (evt) {
                  if (xhr.readyState === 4) {
                    // COMPLETE
                    if (timer) Meteor.clearTimeout(timer);

                    if (timed_out) {
                      callback(new Error("Connection timeout"));
                    } else if (!xhr.status) {
                      // no HTTP response
                      callback(new Error("Connection lost"));
                    } else {

                      var response = {};
                      response.statusCode = xhr.status;
                      response.content = xhr.responseText;

                      response.headers = {};
                      var header_str = xhr.getAllResponseHeaders();

                      // https://github.com/meteor/meteor/issues/553
                      //
                      // In Firefox there is a weird issue, sometimes
                      // getAllResponseHeaders returns the empty string, but
                      // getResponseHeader returns correct results. Possibly this
                      // issue:
                      // https://bugzilla.mozilla.org/show_bug.cgi?id=608735
                      //
                      // If this happens we can't get a full list of headers, but
                      // at least get content-type so our JSON decoding happens
                      // correctly. In theory, we could try and rescue more header
                      // values with a list of common headers, but content-type is
                      // the only vital one for now.
                      if ("" === header_str && xhr.getResponseHeader("content-type")) header_str = "content-type: " + xhr.getResponseHeader("content-type");

                      var headers_raw = header_str.split(/\r?\n/);
                      headers_raw.forEach(function (h) {
                        var m = /^(.*?):(?:\s+)(.*)$/.exec(h);
                        if (m && m.length === 3) {
                          response.headers[m[1].toLowerCase()] = m[2];
                        }
                      });

                      common.populateData(response);

                      var error = null;
                      if (response.statusCode >= 400) {
                        error = common.makeErrorByStatus(response.statusCode, response.content);
                      }

                      callback(error, response);
                    }
                  }
                };

                // Allow custom control over XHR and abort early.
                if (typeof options.beforeSend === "function") {
                  // Call the callback and check to see if the request was aborted
                  if (false === options.beforeSend.call(null, xhr, options)) {
                    return xhr.abort();
                  }
                }

                // send it on its way
                xhr.send(content);
              } catch (err) {
                callback(err);
              }
            };

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "httpcall_common.js": function (_require3, _exports3) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/http/httpcall_common.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var MAX_LENGTH = 500; // if you change this, also change the appropriate test
            var slice = Array.prototype.slice;

            _exports3.makeErrorByStatus = function (statusCode, content) {
              var message = "failed [" + statusCode + "]";

              if (content) {
                var stringContent = typeof content == "string" ? content : content.toString();

                message += ' ' + truncate(stringContent.replace(/\n/g, ' '), MAX_LENGTH);
              }

              return new Error(message);
            };

            function truncate(str, length) {
              return str.length > length ? str.slice(0, length) + '...' : str;
            }

            // Fill in `response.data` if the content-type is JSON.
            _exports3.populateData = function (response) {
              // Read Content-Type header, up to a ';' if there is one.
              // A typical header might be "application/json; charset=utf-8"
              // or just "application/json".
              var contentType = (response.headers['content-type'] || ';').split(';')[0];

              // Only try to parse data as JSON if server sets correct content type.
              if (['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'].indexOf(contentType) >= 0) {
                try {
                  response.data = JSON.parse(response.content);
                } catch (err) {
                  response.data = null;
                }
              } else {
                response.data = null;
              }
            };

            var HTTP = _exports3.HTTP = {};

            /**
             * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with "GET" as the first argument.
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.get = function () /* varargs */{
              return HTTP.call.apply(this, ["GET"].concat(slice.call(arguments)));
            };

            /**
             * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with "POST" as the first argument.
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.post = function () /* varargs */{
              return HTTP.call.apply(this, ["POST"].concat(slice.call(arguments)));
            };

            /**
             * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with "PUT" as the first argument.
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.put = function () /* varargs */{
              return HTTP.call.apply(this, ["PUT"].concat(slice.call(arguments)));
            };

            /**
             * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with "DELETE" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.del = function () /* varargs */{
              return HTTP.call.apply(this, ["DELETE"].concat(slice.call(arguments)));
            };

            /**
             * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with "PATCH" as the first argument.
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.patch = function () /* varargs */{
              return HTTP.call.apply(this, ["PATCH"].concat(slice.call(arguments)));
            };

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/http/httpcall_client.js");

  /* Exports */
  Package._define("http", _exports2, {
    HTTP: HTTP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var DataMan;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/cfs_data-man/packages/cfs_data-man.js                                                                      //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    (function () {

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                  //
      // packages/cfs:data-man/client/Blob.js                                                                             //
      //                                                                                                                  //
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /* Blob.js                                                                                                          // 1
       * A Blob implementation.                                                                                           // 2
       * 2013-12-27                                                                                                       // 3
       *                                                                                                                  // 4
       * By Eli Grey, http://eligrey.com                                                                                  // 5
       * By Devin Samarin, https://github.com/eboyjr                                                                      // 6
       * License: X11/MIT                                                                                                 // 7
       *   See LICENSE.md                                                                                                 // 8
       */ // 9
      // 10
      /*global self, unescape */ // 11
      /*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,                          // 12
        plusplus: true */ // 13
      // 14
      /*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */ // 15
      // 16
      if (!(typeof Blob === "function" || typeof Blob === "object") || typeof URL === "undefined") // 17
        if ((typeof Blob === "function" || typeof Blob === "object") && typeof webkitURL !== "undefined") self.URL = webkitURL;else var Blob = function (view) {
          // 20
          // 21
          var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || view.MSBlobBuilder || function (view) {
            var // 23
            get_class = function (object) {
              // 24
              return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1]; // 25
            } // 26
            ,
                FakeBlobBuilder = function BlobBuilder() {
              // 27
              this.data = []; // 28
            } // 29
            ,
                FakeBlob = function Blob(data, type, encoding) {
              // 30
              this.data = data; // 31
              this.size = data.length; // 32
              this.type = type; // 33
              this.encoding = encoding; // 34
            } // 35
            ,
                FBB_proto = FakeBlobBuilder.prototype // 36
            ,
                FB_proto = FakeBlob.prototype // 37
            ,
                FileReaderSync = view.FileReaderSync // 38
            ,
                FileException = function (type) {
              // 39
              this.code = this[this.name = type]; // 40
            } // 41
            ,
                file_ex_codes = ( // 42
            "NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR " // 43
            + "NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR" // 44
            ).split(" ") // 45
            ,
                file_ex_code = file_ex_codes.length // 46
            ,
                real_URL = view.URL || view.webkitURL || view // 47
            ,
                real_create_object_URL = real_URL.createObjectURL // 48
            ,
                real_revoke_object_URL = real_URL.revokeObjectURL // 49
            ,
                URL = real_URL // 50
            ,
                btoa = view.btoa // 51
            ,
                atob = view.atob // 52
            // 53
            ,
                ArrayBuffer = view.ArrayBuffer // 54
            ,
                Uint8Array = view.Uint8Array // 55
            ; // 56
            FakeBlob.fake = FB_proto.fake = true; // 57
            while (file_ex_code--) {
              // 58
              FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1; // 59
            } // 60
            if (!real_URL.createObjectURL) {
              // 61
              URL = view.URL = {}; // 62
            } // 63
            URL.createObjectURL = function (blob) {
              // 64
              var // 65
              type = blob.type // 66
              ,
                  data_URI_header // 67
              ; // 68
              if (type === null) {
                // 69
                type = "application/octet-stream"; // 70
              } // 71
              if (blob instanceof FakeBlob) {
                // 72
                data_URI_header = "data:" + type; // 73
                if (blob.encoding === "base64") {
                  // 74
                  return data_URI_header + ";base64," + blob.data; // 75
                } else if (blob.encoding === "URI") {
                  // 76
                  return data_URI_header + "," + decodeURIComponent(blob.data); // 77
                }if (btoa) {
                  // 78
                  return data_URI_header + ";base64," + btoa(blob.data); // 79
                } else {
                  // 80
                  return data_URI_header + "," + encodeURIComponent(blob.data); // 81
                } // 82
              } else if (real_create_object_URL) {
                // 83
                return real_create_object_URL.call(real_URL, blob); // 84
              } // 85
            }; // 86
            URL.revokeObjectURL = function (object_URL) {
              // 87
              if (object_URL.substring(0, 5) !== "data:" && real_revoke_object_URL) {
                // 88
                real_revoke_object_URL.call(real_URL, object_URL); // 89
              } // 90
            }; // 91
            FBB_proto.append = function (data /*, endings*/) {
              // 92
              var bb = this.data; // 93
              // decode data to a binary string                                                                       // 94
              if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {
                // 95
                var // 96
                str = "" // 97
                ,
                    buf = new Uint8Array(data) // 98
                ,
                    i = 0 // 99
                ,
                    buf_len = buf.length // 100
                ; // 101
                for (; i < buf_len; i++) {
                  // 102
                  str += String.fromCharCode(buf[i]); // 103
                } // 104
                bb.push(str); // 105
              } else if (get_class(data) === "Blob" || get_class(data) === "File") {
                // 106
                if (FileReaderSync) {
                  // 107
                  var fr = new FileReaderSync(); // 108
                  bb.push(fr.readAsBinaryString(data)); // 109
                } else {
                  // 110
                  // async FileReader won't work as BlobBuilder is sync                                           // 111
                  throw new FileException("NOT_READABLE_ERR"); // 112
                } // 113
              } else if (data instanceof FakeBlob) {
                // 114
                if (data.encoding === "base64" && atob) {
                  // 115
                  bb.push(atob(data.data)); // 116
                } else if (data.encoding === "URI") {
                  // 117
                  bb.push(decodeURIComponent(data.data)); // 118
                } else if (data.encoding === "raw") {
                  // 119
                  bb.push(data.data); // 120
                } // 121
              } else {
                // 122
                if (typeof data !== "string") {
                  // 123
                  data += ""; // convert unsupported types to strings                                             // 124
                } // 125
                // decode UTF-16 to binary string                                                                   // 126
                bb.push(unescape(encodeURIComponent(data))); // 127
              } // 128
            }; // 129
            FBB_proto.getBlob = function (type) {
              // 130
              if (!arguments.length) {
                // 131
                type = null; // 132
              } // 133
              return new FakeBlob(this.data.join(""), type, "raw"); // 134
            }; // 135
            FBB_proto.toString = function () {
              // 136
              return "[object BlobBuilder]"; // 137
            }; // 138
            FB_proto.slice = function (start, end, type) {
              // 139
              var args = arguments.length; // 140
              if (args < 3) {
                // 141
                type = null; // 142
              } // 143
              return new FakeBlob( // 144
              this.data.slice(start, args > 1 ? end : this.data.length) // 145
              , type // 146
              , this.encoding // 147
              ); // 148
            }; // 149
            FB_proto.toString = function () {
              // 150
              return "[object Blob]"; // 151
            }; // 152
            return FakeBlobBuilder; // 153
          }(view); // 154
          // 155
          return function Blob(blobParts, options) {
            // 156
            var type = options ? options.type || "" : ""; // 157
            var builder = new BlobBuilder(); // 158
            if (blobParts) {
              // 159
              for (var i = 0, len = blobParts.length; i < len; i++) {
                // 160
                builder.append(blobParts[i]); // 161
              } // 162
            } // 163
            return builder.getBlob(type); // 164
          }; // 165
        }(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content || this); // 166
      // 167
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    (function () {

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                  //
      // packages/cfs:data-man/client/data-man-api.js                                                                     //
      //                                                                                                                  //
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /**                                                                                                                 // 1
       * @method DataMan                                                                                                  // 2
       * @public                                                                                                          // 3
       * @constructor                                                                                                     // 4
       * @param {File|Blob|ArrayBuffer|Uint8Array|String} data The data that you want to manipulate.                      // 5
       * @param {String} [type] The data content (MIME) type, if known. Required if the first argument is an ArrayBuffer, Uint8Array, or URL
       */ // 7
      DataMan = function DataMan(data, type) {
        // 8
        var self = this; // 9
        // 10
        if (!data) {
          // 11
          throw new Error("DataMan constructor requires a data argument"); // 12
        } // 13
        // 14
        // The end result of all this is that we will have one of the following set:                                      // 15
        // - self.blob                                                                                                    // 16
        // - self.url                                                                                                     // 17
        // Unless we already have in-memory data, we don't load anything into memory                                      // 18
        // and instead rely on obtaining a read stream when the time comes.                                               // 19
        if (typeof File !== "undefined" && data instanceof File) {
          // 20
          self.blob = data; // File inherits from Blob so this is OK                                                      // 21
          self._type = data.type; // 22
        } else if (typeof Blob !== "undefined" && data instanceof Blob) {
          // 23
          self.blob = data; // 24
          self._type = data.type; // 25
        } else if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer || EJSON.isBinary(data)) {
          // 26
          if (typeof Blob === "undefined") {
            // 27
            throw new Error("Browser must support Blobs to handle an ArrayBuffer or Uint8Array"); // 28
          } // 29
          if (!type) {
            // 30
            throw new Error("DataMan constructor requires a type argument when passed an ArrayBuffer or Uint8Array"); // 31
          } // 32
          self.blob = new Blob([data], { type: type }); // 33
          self._type = type; // 34
        } else if (typeof data === "string") {
          // 35
          if (data.slice(0, 5) === "data:") {
            // 36
            self._type = data.slice(5, data.indexOf(';')); // 37
            self.blob = dataURItoBlob(data, self._type); // 38
          } else if (data.slice(0, 5) === "http:" || data.slice(0, 6) === "https:") {
            // 39
            if (!type) {
              // 40
              throw new Error("DataMan constructor requires a type argument when passed a URL"); // 41
            } // 42
            self.url = data; // 43
            self._type = type; // 44
          } else {
            // 45
            throw new Error("DataMan constructor received unrecognized data string"); // 46
          } // 47
        } else {
          // 48
          throw new Error("DataMan constructor received data that it doesn't support"); // 49
        } // 50
      }; // 51
      // 52
      /**                                                                                                                 // 53
       * @method DataMan.prototype.getBlob                                                                                // 54
       * @public                                                                                                          // 55
       * @param {Function} [callback] - callback(error, blob)                                                             // 56
       * @returns {undefined|Blob}                                                                                        // 57
       *                                                                                                                  // 58
       * Passes a Blob representing this data to a callback or returns                                                    // 59
       * the Blob if no callback is provided. A callback is required                                                      // 60
       * if getting a Blob for a URL.                                                                                     // 61
       */ // 62
      DataMan.prototype.getBlob = function dataManGetBlob(callback) {
        // 63
        var self = this; // 64
        // 65
        if (callback) {
          // 66
          if (self.blob) {
            // 67
            callback(null, self.blob); // 68
          } else if (self.url) {
            // 69
            var xhr = new XMLHttpRequest(); // 70
            xhr.open('GET', self.url, true); // 71
            xhr.responseType = "blob"; // 72
            xhr.onload = function (data) {
              // 73
              self.blob = xhr.response; // 74
              callback(null, self.blob); // 75
            }; // 76
            xhr.onerror = function (err) {
              // 77
              callback(err); // 78
            }; // 79
            xhr.send(); // 80
          } // 81
        } else {
          // 82
          if (self.url) // 83
            throw new Error('DataMan.getBlob requires a callback when managing a URL'); // 84
          return self.blob; // 85
        } // 86
      }; // 87
      // 88
      /**                                                                                                                 // 89
       * @method DataMan.prototype.getBinary                                                                              // 90
       * @public                                                                                                          // 91
       * @param {Number} [start] - First byte position to read.                                                           // 92
       * @param {Number} [end] - Last byte position to read.                                                              // 93
       * @param {Function} callback - callback(error, binaryData)                                                         // 94
       * @returns {undefined}                                                                                             // 95
       *                                                                                                                  // 96
       * Passes a Uint8Array representing this data to a callback.                                                        // 97
       */ // 98
      DataMan.prototype.getBinary = function dataManGetBinary(start, end, callback) {
        // 99
        var self = this; // 100
        // 101
        if (typeof start === "function") {
          // 102
          callback = start; // 103
        } // 104
        callback = callback || defaultCallback; // 105
        // 106
        function read(blob) {
          // 107
          if (typeof FileReader === "undefined") {
            // 108
            callback(new Error("Browser does not support FileReader")); // 109
            return; // 110
          } // 111
          // 112
          var reader = new FileReader(); // 113
          reader.onload = function (evt) {
            // 114
            callback(null, new Uint8Array(evt.target.result)); // 115
          }; // 116
          reader.onerror = function (err) {
            // 117
            callback(err); // 118
          }; // 119
          reader.readAsArrayBuffer(blob); // 120
        } // 121
        // 122
        self.getBlob(function (error, blob) {
          // 123
          if (error) {
            // 124
            callback(error); // 125
          } else {
            // 126
            if (typeof start === "number" && typeof end === "number") {
              // 127
              var size = blob.size; // 128
              // Return the requested chunk of binary data                                                                // 129
              if (start >= size) {
                // 130
                callback(new Error("DataMan.getBinary: start position beyond end of data (" + size + ")")); // 131
                return; // 132
              } // 133
              end = Math.min(size, end); // 134
              // 135
              var slice = blob.slice || blob.webkitSlice || blob.mozSlice; // 136
              if (typeof slice === 'undefined') {
                // 137
                callback(new Error('Browser does not support File.slice')); // 138
                return; // 139
              } // 140
              // 141
              read(slice.call(blob, start, end, self._type)); // 142
            } else {
              // 143
              // Return the entire binary data                                                                            // 144
              read(blob); // 145
            } // 146
          } // 147
        }); // 148
        // 149
      }; // 150
      // 151
      /** @method DataMan.prototype.saveAs                                                                                // 152
       * @public                                                                                                          // 153
       * @param {String} [filename]                                                                                       // 154
       * @return {undefined}                                                                                              // 155
       *                                                                                                                  // 156
       * Tells the browser to save the data like a normal downloaded file,                                                // 157
       * using the provided filename.                                                                                     // 158
       *                                                                                                                  // 159
       */ // 160
      DataMan.prototype.saveAs = function dataManSaveAs(filename) {
        // 161
        var self = this; // 162
        // 163
        if (typeof window === "undefined") // 164
          throw new Error("window must be defined to use saveLocal"); // 165
        // 166
        if (!window.saveAs) {
          // 167
          console.warn('DataMan.saveAs: window.saveAs not supported by this browser - add cfs-filesaver package'); // 168
          return; // 169
        } // 170
        // 171
        self.getBlob(function (error, blob) {
          // 172
          if (error) {
            // 173
            throw error; // 174
          } else {
            // 175
            window.saveAs(blob, filename); // 176
          } // 177
        }); // 178
      }; // 179
      // 180
      /**                                                                                                                 // 181
       * @method DataMan.prototype.getDataUri                                                                             // 182
       * @public                                                                                                          // 183
       * @param {function} callback callback(err, dataUri)                                                                // 184
       */ // 185
      DataMan.prototype.getDataUri = function dataManGetDataUri(callback) {
        // 186
        // XXX: We could consider using: URL.createObjectURL(blob);                                                       // 187
        // This will create a reference to the blob data instead of a clone                                               // 188
        // This is part of the File API - as the rest - Not sure how to generally                                         // 189
        // support from IE10, FF26, Chrome 31, safari 7, opera 19, ios 6, android 4                                       // 190
        // 191
        var self = this; // 192
        // 193
        if (typeof callback !== 'function') // 194
          throw new Error("getDataUri requires callback function"); // 195
        // 196
        if (typeof FileReader === "undefined") {
          // 197
          callback(new Error("Browser does not support FileReader")); // 198
          return; // 199
        } // 200
        // 201
        var fileReader = new FileReader(); // 202
        fileReader.onload = function (event) {
          // 203
          var dataUri = event.target.result; // 204
          callback(null, dataUri); // 205
        }; // 206
        fileReader.onerror = function (err) {
          // 207
          callback(err); // 208
        }; // 209
        // 210
        self.getBlob(function (error, blob) {
          // 211
          if (error) {
            // 212
            callback(error); // 213
          } else {
            // 214
            fileReader.readAsDataURL(blob); // 215
          } // 216
        }); // 217
      }; // 218
      // 219
      /**                                                                                                                 // 220
       * @method DataMan.prototype.size                                                                                   // 221
       * @public                                                                                                          // 222
       * @param {function} [callback] callback(err, size)                                                                 // 223
       *                                                                                                                  // 224
       * Passes the size of the data to the callback, if provided,                                                        // 225
       * or returns it. A callback is required to get the size of a URL on the client.                                    // 226
       */ // 227
      DataMan.prototype.size = function dataManSize(callback) {
        // 228
        var self = this; // 229
        // 230
        if (callback) {
          // 231
          if (typeof self._size === "number") {
            // 232
            callback(null, self._size); // 233
          } else {
            // 234
            self.getBlob(function (error, blob) {
              // 235
              if (error) {
                // 236
                callback(error); // 237
              } else {
                // 238
                self._size = blob.size; // 239
                callback(null, self._size); // 240
              } // 241
            }); // 242
          } // 243
        } else {
          // 244
          if (self.url) {
            // 245
            throw new Error("On the client, DataMan.size requires a callback when getting size for a URL on the client"); // 246
          } else if (typeof self._size === "number") {
            // 247
            return self._size; // 248
          } else {
            // 249
            var blob = self.getBlob(); // 250
            self._size = blob.size; // 251
            return self._size; // 252
          } // 253
        } // 254
      }; // 255
      // 256
      /**                                                                                                                 // 257
       * @method DataMan.prototype.type                                                                                   // 258
       * @public                                                                                                          // 259
       *                                                                                                                  // 260
       * Returns the type of the data.                                                                                    // 261
       */ // 262
      DataMan.prototype.type = function dataManType() {
        // 263
        return this._type; // 264
      }; // 265
      // 266
      /**                                                                                                                 // 267
       * @method dataURItoBlob                                                                                            // 268
       * @private                                                                                                         // 269
       * @param {String} dataURI The data URI                                                                             // 270
       * @param {String} dataTYPE The content type                                                                        // 271
       * @returns {Blob} A new Blob instance                                                                              // 272
       *                                                                                                                  // 273
       * Converts a data URI to a Blob.                                                                                   // 274
       */ // 275
      function dataURItoBlob(dataURI, dataTYPE) {
        // 276
        var str = atob(dataURI.split(',')[1]),
            array = []; // 277
        for (var i = 0; i < str.length; i++) array.push(str.charCodeAt(i)); // 278
        return new Blob([new Uint8Array(array)], { type: dataTYPE }); // 279
      } // 280
      // 281
      /**                                                                                                                 // 282
       * @method defaultCallback                                                                                          // 283
       * @private                                                                                                         // 284
       * @param {Error} [err]                                                                                             // 285
       * @returns {undefined}                                                                                             // 286
       *                                                                                                                  // 287
       * Can be used as a default callback for client methods that need a callback.                                       // 288
       * Simply throws the provided error if there is one.                                                                // 289
       */ // 290
      function defaultCallback(err) {
        // 291
        if (err) {
          // 292
          // Show gentle error if Meteor error                                                                            // 293
          if (err instanceof Meteor.Error) {
            // 294
            console.error(err.message); // 295
          } else {
            // 296
            // Normal error, just throw error                                                                             // 297
            throw err; // 298
          } // 299
          // 300
        } // 301
      } // 302
      // 303
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:data-man", {
    DataMan: DataMan
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var FS = Package['cfs:base-package'].FS;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var HTTP = Package.http.HTTP;
  var DataMan = Package['cfs:data-man'].DataMan;
  var EventEmitter = Package['raix:eventemitter'].EventEmitter;

  (function () {

    ///////////////////////////////////////////////////////////////////////
    //                                                                   //
    // packages/cfs_file/packages/cfs_file.js                            //
    //                                                                   //
    ///////////////////////////////////////////////////////////////////////
    //
    (function () {

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                    //
      // packages/cfs:file/fsFile-common.js                                                                                 //
      //                                                                                                                    //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /**                                                                                                                   // 1
       * @method FS.File                                                                                                    // 2
       * @namespace FS.File                                                                                                 // 3
       * @public                                                                                                            // 4
       * @constructor                                                                                                       // 5
       * @param {object|FS.File|data to attach} [ref] Another FS.File instance, a filerecord, or some data to pass to attachData
       */ // 7
      FS.File = function (ref, createdByTransform) {
        // 8
        var self = this; // 9
        // 10
        self.createdByTransform = !!createdByTransform; // 11
        // 12
        if (ref instanceof FS.File || isBasicObject(ref)) {
          // 13
          // Extend self with filerecord related data                                                                       // 14
          FS.Utility.extend(self, FS.Utility.cloneFileRecord(ref, { full: true })); // 15
        } else if (ref) {
          // 16
          self.attachData(ref); // 17
        } // 18
      }; // 19
      // 20
      // An FS.File can emit events                                                                                         // 21
      FS.File.prototype = new EventEmitter(); // 22
      // 23
      /**                                                                                                                   // 24
       * @method FS.File.prototype.attachData                                                                               // 25
       * @public                                                                                                            // 26
       * @param {File|Blob|Buffer|ArrayBuffer|Uint8Array|String} data The data that you want to attach to the file.         // 27
       * @param {Object} [options] Options                                                                                  // 28
       * @param {String} [options.type] The data content (MIME) type, if known.                                             // 29
       * @param {String} [options.headers] When attaching a URL, headers to be used for the GET request (currently server only)
       * @param {String} [options.auth] When attaching a URL, "username:password" to be used for the GET request (currently server only)
       * @param {Function} [callback] Callback function, callback(error). On the client, a callback is required if data is a URL.
       * @returns {FS.File} This FS.File instance.                                                                          // 33
       *                                                                                                                    // 34
       */ // 35
      FS.File.prototype.attachData = function fsFileAttachData(data, options, callback) {
        // 36
        var self = this; // 37
        // 38
        if (!callback && typeof options === "function") {
          // 39
          callback = options; // 40
          options = {}; // 41
        } // 42
        options = options || {}; // 43
        // 44
        if (!data) {
          // 45
          throw new Error('FS.File.attachData requires a data argument with some data'); // 46
        } // 47
        // 48
        var urlOpts; // 49
        // 50
        // Set any other properties we can determine from the source data                                                   // 51
        // File                                                                                                             // 52
        if (typeof File !== "undefined" && data instanceof File) {
          // 53
          self.name(data.name); // 54
          self.updatedAt(data.lastModifiedDate); // 55
          self.size(data.size); // 56
          setData(data.type); // 57
        } // 58
        // Blob                                                                                                             // 59
        else if (typeof Blob !== "undefined" && data instanceof Blob) {
            // 60
            self.updatedAt(new Date()); // 61
            self.size(data.size); // 62
            setData(data.type); // 63
          } // 64
          // URL: we need to do a HEAD request to get the type because type                                                   // 65
          // is required for filtering to work.                                                                               // 66
          else if (typeof data === "string" && (data.slice(0, 5) === "http:" || data.slice(0, 6) === "https:")) {
              // 67
              urlOpts = FS.Utility.extend({}, options); // 68
              if (urlOpts.type) {
                // 69
                delete urlOpts.type; // 70
              } // 71
              // 72
              if (!callback) {
                // 73
                if (Meteor.isClient) {
                  // 74
                  throw new Error('FS.File.attachData requires a callback when attaching a URL on the client'); // 75
                } // 76
                var result = Meteor.call('_cfs_getUrlInfo', data, urlOpts); // 77
                FS.Utility.extend(self, { original: result }); // 78
                setData(result.type); // 79
              } else {
                // 80
                Meteor.call('_cfs_getUrlInfo', data, urlOpts, function (error, result) {
                  // 81
                  FS.debug && console.log("URL HEAD RESULT:", result); // 82
                  if (error) {
                    // 83
                    callback(error); // 84
                  } else {
                    // 85
                    FS.Utility.extend(self, { original: result }); // 86
                    setData(result.type); // 87
                  } // 88
                }); // 89
              } // 90
            } // 91
            // Everything else                                                                                                  // 92
            else {
                // 93
                setData(options.type); // 94
              } // 95
        // 96
        // Set the data                                                                                                     // 97
        function setData(type) {
          // 98
          self.data = new DataMan(data, type, urlOpts); // 99
          // 100
          // Update the type to match what the data is                                                                      // 101
          self.type(self.data.type()); // 102
          // 103
          // Update the size to match what the data is.                                                                     // 104
          // It's always safe to call self.data.size() without supplying a callback                                         // 105
          // because it requires a callback only for URLs on the client, and we                                             // 106
          // already added size for URLs when we got the result from '_cfs_getUrlInfo' method.                              // 107
          if (!self.size()) {
            // 108
            if (callback) {
              // 109
              self.data.size(function (error, size) {
                // 110
                if (error) {
                  // 111
                  callback && callback(error); // 112
                } else {
                  // 113
                  self.size(size); // 114
                  setName(); // 115
                } // 116
              }); // 117
            } else {
              // 118
              self.size(self.data.size()); // 119
              setName(); // 120
            } // 121
          } else {
            // 122
            setName(); // 123
          } // 124
        } // 125
        // 126
        function setName() {
          // 127
          // See if we can extract a file name from URL or filepath                                                         // 128
          if (!self.name() && typeof data === "string") {
            // 129
            // name from URL                                                                                                // 130
            if (data.slice(0, 5) === "http:" || data.slice(0, 6) === "https:") {
              // 131
              if (FS.Utility.getFileExtension(data).length) {
                // 132
                // for a URL we assume the end is a filename only if it has an extension                                    // 133
                self.name(FS.Utility.getFileName(data)); // 134
              } // 135
            } // 136
            // name from filepath                                                                                           // 137
            else if (data.slice(0, 5) !== "data:") {
                // 138
                self.name(FS.Utility.getFileName(data)); // 139
              } // 140
          } // 141
          // 142
          callback && callback(); // 143
        } // 144
        // 145
        return self; //allow chaining                                                                                       // 146
      }; // 147
      // 148
      /**                                                                                                                   // 149
       * @method FS.File.prototype.uploadProgress                                                                           // 150
       * @public                                                                                                            // 151
       * @returns {number} The server confirmed upload progress                                                             // 152
       */ // 153
      FS.File.prototype.uploadProgress = function () {
        // 154
        var self = this; // 155
        // Make sure our file record is updated                                                                             // 156
        self.getFileRecord(); // 157
        // 158
        // If fully uploaded, return 100                                                                                    // 159
        if (self.uploadedAt) {
          // 160
          return 100; // 161
        } // 162
        // Otherwise return the confirmed progress or 0                                                                     // 163
        else {
            // 164
            return Math.round((self.chunkCount || 0) / (self.chunkSum || 1) * 100); // 165
          } // 166
      }; // 167
      // 168
      /**                                                                                                                   // 169
       * @method FS.File.prototype.controlledByDeps                                                                         // 170
       * @public                                                                                                            // 171
       * @returns {FS.Collection} Returns true if this FS.File is reactive                                                  // 172
       *                                                                                                                    // 173
       * > Note: Returns true if this FS.File object was created by a FS.Collection                                         // 174
       * > and we are in a reactive computations. What does this mean? Well it should                                       // 175
       * > mean that our fileRecord is fully updated by Meteor and we are mounted on                                        // 176
       * > a collection                                                                                                     // 177
       */ // 178
      FS.File.prototype.controlledByDeps = function () {
        // 179
        var self = this; // 180
        return self.createdByTransform && Deps.active; // 181
      }; // 182
      // 183
      /**                                                                                                                   // 184
       * @method FS.File.prototype.getCollection                                                                            // 185
       * @public                                                                                                            // 186
       * @returns {FS.Collection} Returns attached collection or undefined if not mounted                                   // 187
       */ // 188
      FS.File.prototype.getCollection = function () {
        // 189
        // Get the collection reference                                                                                     // 190
        var self = this; // 191
        // 192
        // If we already made the link then do no more                                                                      // 193
        if (self.collection) {
          // 194
          return self.collection; // 195
        } // 196
        // 197
        // If we don't have a collectionName then there's not much to do, the file is                                       // 198
        // not mounted yet                                                                                                  // 199
        if (!self.collectionName) {
          // 200
          // Should not throw an error here - could be common that the file is not                                          // 201
          // yet mounted into a collection                                                                                  // 202
          return; // 203
        } // 204
        // 205
        // Link the collection to the file                                                                                  // 206
        self.collection = FS._collections[self.collectionName]; // 207
        // 208
        return self.collection; //possibly undefined, but that's desired behavior                                           // 209
      }; // 210
      // 211
      /**                                                                                                                   // 212
       * @method FS.File.prototype.isMounted                                                                                // 213
       * @public                                                                                                            // 214
       * @returns {FS.Collection} Returns attached collection or undefined if not mounted                                   // 215
       */ // 216
      FS.File.prototype.isMounted = FS.File.prototype.getCollection; // 217
      // 218
      /**                                                                                                                   // 219
       * @method FS.File.prototype.getFileRecord Returns the fileRecord                                                     // 220
       * @public                                                                                                            // 221
       * @returns {object} The filerecord                                                                                   // 222
       */ // 223
      FS.File.prototype.getFileRecord = function () {
        // 224
        var self = this; // 225
        // Check if this file object fileRecord is kept updated by Meteor, if so                                            // 226
        // return self                                                                                                      // 227
        if (self.controlledByDeps()) {
          // 228
          return self; // 229
        } // 230
        // Go for manually updating the file record                                                                         // 231
        if (self.isMounted()) {
          // 232
          FS.debug && console.log('GET FILERECORD: ' + self._id); // 233
          // 234
          // Return the fileRecord or an empty object                                                                       // 235
          var fileRecord = self.collection.files.findOne({ _id: self._id }) || {}; // 236
          FS.Utility.extend(self, fileRecord); // 237
          return fileRecord; // 238
        } else {
          // 239
          // We return an empty object, this way users can still do `getRecord().size`                                      // 240
          // Without getting an error                                                                                       // 241
          return {}; // 242
        } // 243
      }; // 244
      // 245
      /**                                                                                                                   // 246
       * @method FS.File.prototype.update                                                                                   // 247
       * @public                                                                                                            // 248
       * @param {modifier} modifier                                                                                         // 249
       * @param {object} [options]                                                                                          // 250
       * @param {function} [callback]                                                                                       // 251
       *                                                                                                                    // 252
       * Updates the fileRecord.                                                                                            // 253
       */ // 254
      FS.File.prototype.update = function (modifier, options, callback) {
        // 255
        var self = this; // 256
        // 257
        FS.debug && console.log('UPDATE: ' + JSON.stringify(modifier)); // 258
        // 259
        // Make sure we have options and callback                                                                           // 260
        if (!callback && typeof options === 'function') {
          // 261
          callback = options; // 262
          options = {}; // 263
        } // 264
        callback = callback || FS.Utility.defaultCallback; // 265
        // 266
        if (!self.isMounted()) {
          // 267
          callback(new Error("Cannot update a file that is not associated with a collection")); // 268
          return; // 269
        } // 270
        // 271
        // Call collection update - File record                                                                             // 272
        return self.collection.files.update({ _id: self._id }, modifier, options, function (err, count) {
          // 273
          // Update the fileRecord if it was changed and on the client                                                      // 274
          // The server-side methods will pull the fileRecord if needed                                                     // 275
          if (count > 0 && Meteor.isClient) // 276
            self.getFileRecord(); // 277
          // Call callback                                                                                                  // 278
          callback(err, count); // 279
        }); // 280
      }; // 281
      // 282
      /**                                                                                                                   // 283
       * @method FS.File.prototype._saveChanges                                                                             // 284
       * @private                                                                                                           // 285
       * @param {String} [what] "_original" to save original info, or a store name to save info for that store, or saves everything
       *                                                                                                                    // 287
       * Updates the fileRecord from values currently set on the FS.File instance.                                          // 288
       */ // 289
      FS.File.prototype._saveChanges = function (what) {
        // 290
        var self = this; // 291
        // 292
        if (!self.isMounted()) {
          // 293
          return; // 294
        } // 295
        // 296
        FS.debug && console.log("FS.File._saveChanges:", what || "all"); // 297
        // 298
        var mod = { $set: {} }; // 299
        if (what === "_original") {
          // 300
          mod.$set.original = self.original; // 301
        } else if (typeof what === "string") {
          // 302
          var info = self.copies[what]; // 303
          if (info) {
            // 304
            mod.$set["copies." + what] = info; // 305
          } // 306
        } else {
          // 307
          mod.$set.original = self.original; // 308
          mod.$set.copies = self.copies; // 309
        } // 310
        // 311
        self.update(mod); // 312
      }; // 313
      // 314
      /**                                                                                                                   // 315
       * @method FS.File.prototype.remove                                                                                   // 316
       * @public                                                                                                            // 317
       * @param {Function} [callback]                                                                                       // 318
       * @returns {number} Count                                                                                            // 319
       *                                                                                                                    // 320
       * Remove the current file from its FS.Collection                                                                     // 321
       */ // 322
      FS.File.prototype.remove = function (callback) {
        // 323
        var self = this; // 324
        // 325
        FS.debug && console.log('REMOVE: ' + self._id); // 326
        // 327
        callback = callback || FS.Utility.defaultCallback; // 328
        // 329
        if (!self.isMounted()) {
          // 330
          callback(new Error("Cannot remove a file that is not associated with a collection")); // 331
          return; // 332
        } // 333
        // 334
        return self.collection.files.remove({ _id: self._id }, function (err, res) {
          // 335
          if (!err) {
            // 336
            delete self._id; // 337
            delete self.collection; // 338
            delete self.collectionName; // 339
          } // 340
          callback(err, res); // 341
        }); // 342
      }; // 343
      // 344
      /**                                                                                                                   // 345
       * @method FS.File.prototype.moveTo                                                                                   // 346
       * @param {FS.Collection} targetCollection                                                                            // 347
       * @private // Marked private until implemented                                                                       // 348
       * @todo Needs to be implemented                                                                                      // 349
       *                                                                                                                    // 350
       * Move the file from current collection to another collection                                                        // 351
       *                                                                                                                    // 352
       * > Note: Not yet implemented                                                                                        // 353
       */ // 354
      // 355
      /**                                                                                                                   // 356
       * @method FS.File.prototype.getExtension Returns the lowercase file extension                                        // 357
       * @public                                                                                                            // 358
       * @deprecated Use the `extension` getter/setter method instead.                                                      // 359
       * @param {Object} [options]                                                                                          // 360
       * @param {String} [options.store] - Store name. Default is the original extension.                                   // 361
       * @returns {string} The extension eg.: `jpg` or if not found then an empty string ''                                 // 362
       */ // 363
      FS.File.prototype.getExtension = function (options) {
        // 364
        var self = this; // 365
        return self.extension(options); // 366
      }; // 367
      // 368
      function checkContentType(fsFile, storeName, startOfType) {
        // 369
        var type; // 370
        if (storeName && fsFile.hasStored(storeName)) {
          // 371
          type = fsFile.type({ store: storeName }); // 372
        } else {
          // 373
          type = fsFile.type(); // 374
        } // 375
        if (typeof type === "string") {
          // 376
          return type.indexOf(startOfType) === 0; // 377
        } // 378
        return false; // 379
      } // 380
      // 381
      /**                                                                                                                   // 382
       * @method FS.File.prototype.isImage Is it an image file?                                                             // 383
       * @public                                                                                                            // 384
       * @param {object} [options]                                                                                          // 385
       * @param {string} [options.store] The store we're interested in                                                      // 386
       *                                                                                                                    // 387
       * Returns true if the copy of this file in the specified store has an image                                          // 388
       * content type. If the file object is unmounted or doesn't have a copy for                                           // 389
       * the specified store, or if you don't specify a store, this method checks                                           // 390
       * the content type of the original file.                                                                             // 391
       */ // 392
      FS.File.prototype.isImage = function (options) {
        // 393
        return checkContentType(this, (options || {}).store, 'image/'); // 394
      }; // 395
      // 396
      /**                                                                                                                   // 397
       * @method FS.File.prototype.isVideo Is it a video file?                                                              // 398
       * @public                                                                                                            // 399
       * @param {object} [options]                                                                                          // 400
       * @param {string} [options.store] The store we're interested in                                                      // 401
       *                                                                                                                    // 402
       * Returns true if the copy of this file in the specified store has a video                                           // 403
       * content type. If the file object is unmounted or doesn't have a copy for                                           // 404
       * the specified store, or if you don't specify a store, this method checks                                           // 405
       * the content type of the original file.                                                                             // 406
       */ // 407
      FS.File.prototype.isVideo = function (options) {
        // 408
        return checkContentType(this, (options || {}).store, 'video/'); // 409
      }; // 410
      // 411
      /**                                                                                                                   // 412
       * @method FS.File.prototype.isAudio Is it an audio file?                                                             // 413
       * @public                                                                                                            // 414
       * @param {object} [options]                                                                                          // 415
       * @param {string} [options.store] The store we're interested in                                                      // 416
       *                                                                                                                    // 417
       * Returns true if the copy of this file in the specified store has an audio                                          // 418
       * content type. If the file object is unmounted or doesn't have a copy for                                           // 419
       * the specified store, or if you don't specify a store, this method checks                                           // 420
       * the content type of the original file.                                                                             // 421
       */ // 422
      FS.File.prototype.isAudio = function (options) {
        // 423
        return checkContentType(this, (options || {}).store, 'audio/'); // 424
      }; // 425
      // 426
      /**                                                                                                                   // 427
       * @method FS.File.prototype.formattedSize                                                                            // 428
       * @public                                                                                                            // 429
       * @param  {Object} options                                                                                           // 430
       * @param  {String} [options.store=none,display original file size] Which file do you want to get the size of?        // 431
       * @param  {String} [options.formatString='0.00 b'] The `numeral` format string to use.                               // 432
       * @return {String} The file size formatted as a human readable string and reactively updated.                        // 433
       *                                                                                                                    // 434
       * * You must add the `numeral` package to your app before you can use this method.                                   // 435
       * * If info is not found or a size can't be determined, it will show 0.                                              // 436
       */ // 437
      FS.File.prototype.formattedSize = function fsFileFormattedSize(options) {
        // 438
        var self = this; // 439
        // 440
        if (typeof numeral !== "function") // 441
          throw new Error("You must add the numeral package if you call FS.File.formattedSize"); // 442
        // 443
        options = options || {}; // 444
        options = options.hash || options; // 445
        // 446
        var size = self.size(options) || 0; // 447
        return numeral(size).format(options.formatString || '0.00 b'); // 448
      }; // 449
      // 450
      /**                                                                                                                   // 451
       * @method FS.File.prototype.isUploaded Is this file completely uploaded?                                             // 452
       * @public                                                                                                            // 453
       * @returns {boolean} True if the number of uploaded bytes is equal to the file size.                                 // 454
       */ // 455
      FS.File.prototype.isUploaded = function () {
        // 456
        var self = this; // 457
        // 458
        // Make sure we use the updated file record                                                                         // 459
        self.getFileRecord(); // 460
        // 461
        return !!self.uploadedAt; // 462
      }; // 463
      // 464
      /**                                                                                                                   // 465
       * @method FS.File.prototype.hasStored                                                                                // 466
       * @public                                                                                                            // 467
       * @param {string} storeName Name of the store                                                                        // 468
       * @param {boolean} [optimistic=false] In case that the file record is not found, read below                          // 469
       * @returns {boolean} Is a version of this file stored in the given store?                                            // 470
       *                                                                                                                    // 471
       * > Note: If the file is not published to the client or simply not found:                                            // 472
       * this method cannot know for sure if it exists or not. The `optimistic`                                             // 473
       * param is the boolean value to return. Are we `optimistic` that the copy                                            // 474
       * could exist. This is the case in `FS.File.url` we are optimistic that the                                          // 475
       * copy supplied by the user exists.                                                                                  // 476
       */ // 477
      FS.File.prototype.hasStored = function (storeName, optimistic) {
        // 478
        var self = this; // 479
        // Make sure we use the updated file record                                                                         // 480
        self.getFileRecord(); // 481
        // If we havent the published data then                                                                             // 482
        if (FS.Utility.isEmpty(self.copies)) {
          // 483
          return !!optimistic; // 484
        } // 485
        if (typeof storeName === "string") {
          // 486
          // Return true only if the `key` property is present, which is not set until                                      // 487
          // storage is complete.                                                                                           // 488
          return !!(self.copies && self.copies[storeName] && self.copies[storeName].key); // 489
        } // 490
        return false; // 491
      }; // 492
      // 493
      // Backwards compatibility                                                                                            // 494
      FS.File.prototype.hasCopy = FS.File.prototype.hasStored; // 495
      // 496
      /**                                                                                                                   // 497
       * @method FS.File.prototype.getCopyInfo                                                                              // 498
       * @public                                                                                                            // 499
       * @deprecated Use individual methods with `store` option instead.                                                    // 500
       * @param {string} storeName Name of the store for which to get copy info.                                            // 501
       * @returns {Object} The file details, e.g., name, size, key, etc., specific to the copy saved in this store.         // 502
       */ // 503
      FS.File.prototype.getCopyInfo = function (storeName) {
        // 504
        var self = this; // 505
        // Make sure we use the updated file record                                                                         // 506
        self.getFileRecord(); // 507
        return self.copies && self.copies[storeName] || null; // 508
      }; // 509
      // 510
      /**                                                                                                                   // 511
       * @method FS.File.prototype._getInfo                                                                                 // 512
       * @private                                                                                                           // 513
       * @param {String} [storeName] Name of the store for which to get file info. Omit for original file details.          // 514
       * @param {Object} [options]                                                                                          // 515
       * @param {Boolean} [options.updateFileRecordFirst=false] Update this instance with data from the DB first?           // 516
       * @returns {Object} The file details, e.g., name, size, key, etc. If not found, returns an empty object.             // 517
       */ // 518
      FS.File.prototype._getInfo = function (storeName, options) {
        // 519
        var self = this; // 520
        options = options || {}; // 521
        // 522
        if (options.updateFileRecordFirst) {
          // 523
          // Make sure we use the updated file record                                                                       // 524
          self.getFileRecord(); // 525
        } // 526
        // 527
        if (storeName) {
          // 528
          return self.copies && self.copies[storeName] || {}; // 529
        } else {
          // 530
          return self.original || {}; // 531
        } // 532
      }; // 533
      // 534
      /**                                                                                                                   // 535
       * @method FS.File.prototype._setInfo                                                                                 // 536
       * @private                                                                                                           // 537
       * @param {String} storeName - Name of the store for which to set file info. Non-string will set original file details.
       * @param {String} property - Property to set                                                                         // 539
       * @param {String} value - New value for property                                                                     // 540
       * @param {Boolean} save - Should the new value be saved to the DB, too, or just set in the FS.File properties?       // 541
       * @returns {undefined}                                                                                               // 542
       */ // 543
      FS.File.prototype._setInfo = function (storeName, property, value, save) {
        // 544
        var self = this; // 545
        if (typeof storeName === "string") {
          // 546
          self.copies = self.copies || {}; // 547
          self.copies[storeName] = self.copies[storeName] || {}; // 548
          self.copies[storeName][property] = value; // 549
          save && self._saveChanges(storeName); // 550
        } else {
          // 551
          self.original = self.original || {}; // 552
          self.original[property] = value; // 553
          save && self._saveChanges("_original"); // 554
        } // 555
      }; // 556
      // 557
      /**                                                                                                                   // 558
       * @method FS.File.prototype.name                                                                                     // 559
       * @public                                                                                                            // 560
       * @param {String|null} [value] - If setting the name, specify the new name as the first argument. Otherwise the options argument should be first.
       * @param {Object} [options]                                                                                          // 562
       * @param {Object} [options.store=none,original] - Get or set the name of the version of the file that was saved in this store. Default is the original file name.
       * @param {Boolean} [options.updateFileRecordFirst=false] Update this instance with data from the DB first? Applies to getter usage only.
       * @param {Boolean} [options.save=true] Save change to database? Applies to setter usage only.                        // 565
       * @returns {String|undefined} If setting, returns `undefined`. If getting, returns the file name.                    // 566
       */ // 567
      FS.File.prototype.name = function (value, options) {
        // 568
        var self = this; // 569
        // 570
        if (!options && (typeof value === "object" && value !== null || typeof value === "undefined")) {
          // 571
          // GET                                                                                                            // 572
          options = value || {}; // 573
          options = options.hash || options; // allow use as UI helper                                                      // 574
          return self._getInfo(options.store, options).name; // 575
        } else {
          // 576
          // SET                                                                                                            // 577
          options = options || {}; // 578
          return self._setInfo(options.store, 'name', value, typeof options.save === "boolean" ? options.save : true); // 579
        } // 580
      }; // 581
      // 582
      /**                                                                                                                   // 583
       * @method FS.File.prototype.extension                                                                                // 584
       * @public                                                                                                            // 585
       * @param {String|null} [value] - If setting the extension, specify the new extension (without period) as the first argument. Otherwise the options argument should be first.
       * @param {Object} [options]                                                                                          // 587
       * @param {Object} [options.store=none,original] - Get or set the extension of the version of the file that was saved in this store. Default is the original file extension.
       * @param {Boolean} [options.updateFileRecordFirst=false] Update this instance with data from the DB first? Applies to getter usage only.
       * @param {Boolean} [options.save=true] Save change to database? Applies to setter usage only.                        // 590
       * @returns {String|undefined} If setting, returns `undefined`. If getting, returns the file extension or an empty string if there isn't one.
       */ // 592
      FS.File.prototype.extension = function (value, options) {
        // 593
        var self = this; // 594
        // 595
        if (!options && (typeof value === "object" && value !== null || typeof value === "undefined")) {
          // 596
          // GET                                                                                                            // 597
          options = value || {}; // 598
          return FS.Utility.getFileExtension(self.name(options) || ''); // 599
        } else {
          // 600
          // SET                                                                                                            // 601
          options = options || {}; // 602
          var newName = FS.Utility.setFileExtension(self.name(options) || '', value); // 603
          return self._setInfo(options.store, 'name', newName, typeof options.save === "boolean" ? options.save : true); // 604
        } // 605
      }; // 606
      // 607
      /**                                                                                                                   // 608
       * @method FS.File.prototype.size                                                                                     // 609
       * @public                                                                                                            // 610
       * @param {Number} [value] - If setting the size, specify the new size in bytes as the first argument. Otherwise the options argument should be first.
       * @param {Object} [options]                                                                                          // 612
       * @param {Object} [options.store=none,original] - Get or set the size of the version of the file that was saved in this store. Default is the original file size.
       * @param {Boolean} [options.updateFileRecordFirst=false] Update this instance with data from the DB first? Applies to getter usage only.
       * @param {Boolean} [options.save=true] Save change to database? Applies to setter usage only.                        // 615
       * @returns {Number|undefined} If setting, returns `undefined`. If getting, returns the file size.                    // 616
       */ // 617
      FS.File.prototype.size = function (value, options) {
        // 618
        var self = this; // 619
        // 620
        if (!options && (typeof value === "object" && value !== null || typeof value === "undefined")) {
          // 621
          // GET                                                                                                            // 622
          options = value || {}; // 623
          options = options.hash || options; // allow use as UI helper                                                      // 624
          return self._getInfo(options.store, options).size; // 625
        } else {
          // 626
          // SET                                                                                                            // 627
          options = options || {}; // 628
          return self._setInfo(options.store, 'size', value, typeof options.save === "boolean" ? options.save : true); // 629
        } // 630
      }; // 631
      // 632
      /**                                                                                                                   // 633
       * @method FS.File.prototype.type                                                                                     // 634
       * @public                                                                                                            // 635
       * @param {String} [value] - If setting the type, specify the new type as the first argument. Otherwise the options argument should be first.
       * @param {Object} [options]                                                                                          // 637
       * @param {Object} [options.store=none,original] - Get or set the type of the version of the file that was saved in this store. Default is the original file type.
       * @param {Boolean} [options.updateFileRecordFirst=false] Update this instance with data from the DB first? Applies to getter usage only.
       * @param {Boolean} [options.save=true] Save change to database? Applies to setter usage only.                        // 640
       * @returns {String|undefined} If setting, returns `undefined`. If getting, returns the file type.                    // 641
       */ // 642
      FS.File.prototype.type = function (value, options) {
        // 643
        var self = this; // 644
        // 645
        if (!options && (typeof value === "object" && value !== null || typeof value === "undefined")) {
          // 646
          // GET                                                                                                            // 647
          options = value || {}; // 648
          options = options.hash || options; // allow use as UI helper                                                      // 649
          return self._getInfo(options.store, options).type; // 650
        } else {
          // 651
          // SET                                                                                                            // 652
          options = options || {}; // 653
          return self._setInfo(options.store, 'type', value, typeof options.save === "boolean" ? options.save : true); // 654
        } // 655
      }; // 656
      // 657
      /**                                                                                                                   // 658
       * @method FS.File.prototype.updatedAt                                                                                // 659
       * @public                                                                                                            // 660
       * @param {String} [value] - If setting updatedAt, specify the new date as the first argument. Otherwise the options argument should be first.
       * @param {Object} [options]                                                                                          // 662
       * @param {Object} [options.store=none,original] - Get or set the last updated date for the version of the file that was saved in this store. Default is the original last updated date.
       * @param {Boolean} [options.updateFileRecordFirst=false] Update this instance with data from the DB first? Applies to getter usage only.
       * @param {Boolean} [options.save=true] Save change to database? Applies to setter usage only.                        // 665
       * @returns {String|undefined} If setting, returns `undefined`. If getting, returns the file's last updated date.     // 666
       */ // 667
      FS.File.prototype.updatedAt = function (value, options) {
        // 668
        var self = this; // 669
        // 670
        if (!options && (typeof value === "object" && value !== null && !(value instanceof Date) || typeof value === "undefined")) {
          // GET                                                                                                            // 672
          options = value || {}; // 673
          options = options.hash || options; // allow use as UI helper                                                      // 674
          return self._getInfo(options.store, options).updatedAt; // 675
        } else {
          // 676
          // SET                                                                                                            // 677
          options = options || {}; // 678
          return self._setInfo(options.store, 'updatedAt', value, typeof options.save === "boolean" ? options.save : true); // 679
        } // 680
      }; // 681
      // 682
      function isBasicObject(obj) {
        // 683
        return obj === Object(obj) && Object.getPrototypeOf(obj) === Object.prototype; // 684
      } // 685
      // 686
      // getPrototypeOf polyfill                                                                                            // 687
      if (typeof Object.getPrototypeOf !== "function") {
        // 688
        if (typeof "".__proto__ === "object") {
          // 689
          Object.getPrototypeOf = function (object) {
            // 690
            return object.__proto__; // 691
          }; // 692
        } else {
          // 693
          Object.getPrototypeOf = function (object) {
            // 694
            // May break if the constructor has been tampered with                                                          // 695
            return object.constructor.prototype; // 696
          }; // 697
        } // 698
      } // 699
      // 700
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    ///////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:file");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("cfs:tempstore");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var HTTP, _methodHTTP;

  (function () {

    ///////////////////////////////////////////////////////////////////////
    //                                                                   //
    // packages/cfs_http-methods/http.methods.client.api.js              //
    //                                                                   //
    ///////////////////////////////////////////////////////////////////////
    //
    HTTP = Package.http && Package.http.HTTP || {};

    // Client-side simulation is not yet implemented
    HTTP.methods = function () {
      throw new Error('HTTP.methods not implemented on client-side');
    };

    ///////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:http-methods", {
    HTTP: HTTP,
    _methodHTTP: _methodHTTP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var HTTP = Package['cfs:http-methods'].HTTP;

  /* Package-scope variables */
  var _publishHTTP;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////
    //                                                                             //
    // packages/cfs_http-publish/packages/cfs_http-publish.js                      //
    //                                                                             //
    /////////////////////////////////////////////////////////////////////////////////
    //
    (function () {

      ///////////////////////////////////////////////////////////////////////////
      //                                                                       //
      // packages/cfs:http-publish/http.publish.client.api.js                  //
      //                                                                       //
      ///////////////////////////////////////////////////////////////////////////
      //
      // Client-side is not implemented                                        // 1
      HTTP.publish = function () {
        // 2
        throw new Error('HTTP.publish not implemented on client-side'); // 3
      }; // 4
      // 5
      HTTP.publishFormats = function () {
        // 6
        throw new Error('HTTP.publishFormats not implemented on client-side'); // 7
      }; // 8
      // 9
      HTTP.unpublish = function () {
        // 10
        throw new Error('HTTP.unpublish not implemented on client-side'); // 11
      }; // 12
      // 13
      ///////////////////////////////////////////////////////////////////////////
    }).call(this);

    /////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:http-publish", {
    _publishHTTP: _publishHTTP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var FS = Package['cfs:base-package'].FS;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var EJSON = Package.ejson.EJSON;
  var HTTP = Package['cfs:http-methods'].HTTP;

  /* Package-scope variables */
  var rootUrlPathPrefix, baseUrl;

  (function () {

    ///////////////////////////////////////////////////////////////////////
    //                                                                   //
    // packages/cfs_access-point/packages/cfs_access-point.js            //
    //                                                                   //
    ///////////////////////////////////////////////////////////////////////
    //
    (function () {

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                    //
      // packages/cfs:access-point/access-point-common.js                                                                   //
      //                                                                                                                    //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || ""; // 1
      // Adjust the rootUrlPathPrefix if necessary                                                                          // 2
      if (rootUrlPathPrefix.length > 0) {
        // 3
        if (rootUrlPathPrefix.slice(0, 1) !== '/') {
          // 4
          rootUrlPathPrefix = '/' + rootUrlPathPrefix; // 5
        } // 6
        if (rootUrlPathPrefix.slice(-1) === '/') {
          // 7
          rootUrlPathPrefix = rootUrlPathPrefix.slice(0, -1); // 8
        } // 9
      } // 10
      // 11
      // prepend ROOT_URL when isCordova                                                                                    // 12
      if (Meteor.isCordova) {
        // 13
        rootUrlPathPrefix = Meteor.absoluteUrl(rootUrlPathPrefix.replace(/^\/+/, '')).replace(/\/+$/, ''); // 14
      } // 15
      // 16
      baseUrl = '/cfs'; // 17
      FS.HTTP = FS.HTTP || {}; // 18
      // 19
      // Note the upload URL so that client uploader packages know what it is                                               // 20
      FS.HTTP.uploadUrl = rootUrlPathPrefix + baseUrl + '/files'; // 21
      // 22
      /**                                                                                                                   // 23
       * @method FS.HTTP.setBaseUrl                                                                                         // 24
       * @public                                                                                                            // 25
       * @param {String} newBaseUrl - Change the base URL for the HTTP GET and DELETE endpoints.                            // 26
       * @returns {undefined}                                                                                               // 27
       */ // 28
      FS.HTTP.setBaseUrl = function setBaseUrl(newBaseUrl) {
        // 29
        // 30
        // Adjust the baseUrl if necessary                                                                                  // 31
        if (newBaseUrl.slice(0, 1) !== '/') {
          // 32
          newBaseUrl = '/' + newBaseUrl; // 33
        } // 34
        if (newBaseUrl.slice(-1) === '/') {
          // 35
          newBaseUrl = newBaseUrl.slice(0, -1); // 36
        } // 37
        // 38
        // Update the base URL                                                                                              // 39
        baseUrl = newBaseUrl; // 40
        // 41
        // Change the upload URL so that client uploader packages know what it is                                           // 42
        FS.HTTP.uploadUrl = rootUrlPathPrefix + baseUrl + '/files'; // 43
        // 44
        // Remount URLs with the new baseUrl, unmounting the old, on the server only.                                       // 45
        // If existingMountPoints is empty, then we haven't run the server startup                                          // 46
        // code yet, so this new URL will be used at that point for the initial mount.                                      // 47
        if (Meteor.isServer && !FS.Utility.isEmpty(_existingMountPoints)) {
          // 48
          mountUrls(); // 49
        } // 50
      }; // 51
      // 52
      /*                                                                                                                    // 53
       * FS.File extensions                                                                                                 // 54
       */ // 55
      // 56
      /**                                                                                                                   // 57
       * @method FS.File.prototype.url Construct the file url                                                               // 58
       * @public                                                                                                            // 59
       * @param {Object} [options]                                                                                          // 60
       * @param {String} [options.store] Name of the store to get from. If not defined, the first store defined in `options.stores` for the collection on the client is used.
       * @param {Boolean} [options.auth=null] Add authentication token to the URL query string? By default, a token for the current logged in user is added on the client. Set this to `false` to omit the token. Set this to a string to provide your own token. Set this to a number to specify an expiration time for the token in seconds.
       * @param {Boolean} [options.download=false] Should headers be set to force a download? Typically this means that clicking the link with this URL will download the file to the user's Downloads folder instead of displaying the file in the browser.
       * @param {Boolean} [options.brokenIsFine=false] Return the URL even if we know it's currently a broken link because the file hasn't been saved in the requested store yet.
       * @param {Boolean} [options.metadata=false] Return the URL for the file metadata access point rather than the file itself.
       * @param {String} [options.uploading=null] A URL to return while the file is being uploaded.                         // 66
       * @param {String} [options.storing=null] A URL to return while the file is being stored.                             // 67
       * @param {String} [options.filename=null] Override the filename that should appear at the end of the URL. By default it is the name of the file in the requested store.
       *                                                                                                                    // 69
       * Returns the HTTP URL for getting the file or its metadata.                                                         // 70
       */ // 71
      FS.File.prototype.url = function (options) {
        // 72
        var self = this; // 73
        options = options || {}; // 74
        options = FS.Utility.extend({ // 75
          store: null, // 76
          auth: null, // 77
          download: false, // 78
          metadata: false, // 79
          brokenIsFine: false, // 80
          uploading: null, // return this URL while uploading                                                               // 81
          storing: null, // return this URL while storing                                                                   // 82
          filename: null // override the filename that is shown to the user                                                 // 83
        }, options.hash || options); // check for "hash" prop if called as helper                                           // 84
        // 85
        // Primarily useful for displaying a temporary image while uploading an image                                       // 86
        if (options.uploading && !self.isUploaded()) {
          // 87
          return options.uploading; // 88
        } // 89
        // 90
        if (self.isMounted()) {
          // 91
          // See if we've stored in the requested store yet                                                                 // 92
          var storeName = options.store || self.collection.primaryStore.name; // 93
          if (!self.hasStored(storeName)) {
            // 94
            if (options.storing) {
              // 95
              return options.storing; // 96
            } else if (!options.brokenIsFine) {
              // 97
              // We want to return null if we know the URL will be a broken                                                 // 98
              // link because then we can avoid rendering broken links, broken                                              // 99
              // images, etc.                                                                                               // 100
              return null; // 101
            } // 102
          } // 103
          // 104
          // Add filename to end of URL if we can determine one                                                             // 105
          var filename = options.filename || self.name({ store: storeName }); // 106
          if (typeof filename === "string" && filename.length) {
            // 107
            filename = '/' + filename; // 108
          } else {
            // 109
            filename = ''; // 110
          } // 111
          // 112
          // TODO: Could we somehow figure out if the collection requires login?                                            // 113
          var authToken = ''; // 114
          if (Meteor.isClient && typeof Accounts !== "undefined" && typeof Accounts._storedLoginToken === "function") {
            // 115
            if (options.auth !== false) {
              // 116
              // Add reactive deps on the user                                                                              // 117
              Meteor.userId(); // 118
              // 119
              var authObject = { // 120
                authToken: Accounts._storedLoginToken() || '' // 121
              }; // 122
              // 123
              // If it's a number, we use that as the expiration time (in seconds)                                          // 124
              if (options.auth === +options.auth) {
                // 125
                authObject.expiration = FS.HTTP.now() + options.auth * 1000; // 126
              } // 127
              // 128
              // Set the authToken                                                                                          // 129
              var authString = JSON.stringify(authObject); // 130
              authToken = FS.Utility.btoa(authString); // 131
            } // 132
          } else if (typeof options.auth === "string") {
            // 133
            // If the user supplies auth token the user will be responsible for                                             // 134
            // updating                                                                                                     // 135
            authToken = options.auth; // 136
          } // 137
          // 138
          // Construct query string                                                                                         // 139
          var params = {}; // 140
          if (authToken !== '') {
            // 141
            params.token = authToken; // 142
          } // 143
          if (options.download) {
            // 144
            params.download = true; // 145
          } // 146
          if (options.store) {
            // 147
            // We use options.store here instead of storeName because we want to omit the queryString                       // 148
            // whenever possible, allowing users to have "clean" URLs if they want. The server will                         // 149
            // assume the first store defined on the server, which means that we are assuming that                          // 150
            // the first on the client is also the first on the server. If that's not the case, the                         // 151
            // store option should be supplied.                                                                             // 152
            params.store = options.store; // 153
          } // 154
          var queryString = FS.Utility.encodeParams(params); // 155
          if (queryString.length) {
            // 156
            queryString = '?' + queryString; // 157
          } // 158
          // 159
          // Determine which URL to use                                                                                     // 160
          var area; // 161
          if (options.metadata) {
            // 162
            area = '/record'; // 163
          } else {
            // 164
            area = '/files'; // 165
          } // 166
          // 167
          // Construct and return the http method url                                                                       // 168
          return rootUrlPathPrefix + baseUrl + area + '/' + self.collection.name + '/' + self._id + filename + queryString; // 169
        } // 170
        // 171
      }; // 172
      // 173
      // 174
      // 175
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    (function () {

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                    //
      // packages/cfs:access-point/access-point-client.js                                                                   //
      //                                                                                                                    //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      FS.HTTP.setHeadersForGet = function setHeadersForGet() {// 1
        // Client Stub                                                                                                      // 2
      }; // 3
      // 4
      FS.HTTP.now = function () {
        // 5
        return new Date(new Date() + FS.HTTP._serverTimeDiff); // 6
      }; // 7
      // 8
      // Returns the localstorage if its found and working                                                                  // 9
      // TODO: check if this works in IE                                                                                    // 10
      // could use Meteor._localStorage - just needs a rewrite                                                              // 11
      FS.HTTP._storage = function () {
        // 12
        var storage, // 13
        fail, // 14
        uid; // 15
        try {
          // 16
          uid = "test"; // 17
          (storage = window.localStorage).setItem(uid, uid); // 18
          fail = storage.getItem(uid) !== uid; // 19
          storage.removeItem(uid); // 20
          if (fail) {
            // 21
            storage = false; // 22
          } // 23
        } catch (e) {
          // 24
          console.log("Error initializing storage for FS.HTTP"); // 25
          console.log(e); // 26
        } // 27
        // 28
        return storage; // 29
      }; // 30
      // 31
      // get our storage if found                                                                                           // 32
      FS.HTTP.storage = FS.HTTP._storage(); // 33
      // 34
      FS.HTTP._prefix = 'fsHTTP.'; // 35
      // 36
      FS.HTTP._serverTimeDiff = 0; // Time difference in ms                                                                 // 37
      // 38
      if (FS.HTTP.storage) {
        // 39
        // Initialize the FS.HTTP._serverTimeDiff                                                                           // 40
        FS.HTTP._serverTimeDiff = 1 * FS.HTTP.storage.getItem(FS.HTTP._prefix + 'timeDiff') || 0; // 41
        // At client startup we figure out the time difference between server and                                           // 42
        // client time - this includes lag and timezone                                                                     // 43
        Meteor.startup(function () {
          // 44
          // Call the server method an get server time                                                                      // 45
          HTTP.get(rootUrlPathPrefix + '/cfs/servertime', function (error, result) {
            // 46
            if (!error) {
              // 47
              // Update our server time diff                                                                                // 48
              var dateNew = new Date(+result.content); // 49
              FS.HTTP._serverTimeDiff = dateNew - new Date(); // - lag or/and timezone                                       // 50
              // Update the localstorage                                                                                    // 51
              FS.HTTP.storage.setItem(FS.HTTP._prefix + 'timeDiff', FS.HTTP._serverTimeDiff); // 52
            } else {
              // 53
              console.log(error.message); // 54
            } // 55
          }); // EO Server call                                                                                             // 56
        }); // 57
      } // 58
      // 59
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    ///////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:access-point");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Package-scope variables */
  var _noopCallback, _nonReactive, ReactiveProperty;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                        //
    // packages/cfs_reactive-property/packages/cfs_reactive-property.js                       //
    //                                                                                        //
    ////////////////////////////////////////////////////////////////////////////////////////////
    //
    (function () {

      /////////////////////////////////////////////////////////////////////////////////////
      //                                                                                 //
      // packages/cfs:reactive-property/reactive-property.js                             //
      //                                                                                 //
      /////////////////////////////////////////////////////////////////////////////////////
      //
      // #ReactiveProperty                                                               // 1
      // A simple class that provides an reactive property interface                     // 2
      // 3
      _noopCallback = function () {}; // 4
      // 5
      _nonReactive = { // 6
        changed: _noopCallback, // 7
        depend: _noopCallback // 8
      }; // 9
      // 10
      /**                                                                                // 11
        * @constructor                                                                   // 12
        * @param {any} defaultValue Set the default value for the reactive property      // 13
        * @param {boolean} [reactive = true] Allow the user to disable reactivity        // 14
        *                                                                                // 15
        * This api should only be in the internal.api.md                                 // 16
        */ // 17
      ReactiveProperty = function (defaultValue, reactive) {
        // 18
        var self = this; // 19
        var _deps = reactive === false ? _nonReactive : new Deps.Dependency(); // 20
        // 21
        /** @property ReactiveProperty.value                                             // 22
          * @private                                                                     // 23
          * This contains the non reactive value, should only be used as a getter for    // 24
          * internal use                                                                 // 25
          */ // 26
        self.value = defaultValue; // 27
        // 28
        self.onChange = function () {}; // 29
        // 30
        self.changed = function () {
          // 31
          _deps.changed(); // 32
          self.onChange(self.value); // 33
        }; // 34
        // 35
        /**                                                                              // 36
          * @method ReactiveProperty.get                                                 // 37
          * Usage:                                                                       // 38
          * ```js                                                                        // 39
          *   var foo = new ReactiveProperty('bar');                                     // 40
          *   foo.get(); // equals "bar"                                                 // 41
          * ```                                                                          // 42
          */ // 43
        self.get = function () {
          // 44
          _deps.depend(); // 45
          return self.value; // 46
        }; // 47
        // 48
        /**                                                                              // 49
          * @method ReactiveProperty.set Set property to value                           // 50
          * @param {any} value                                                           // 51
          * Usage:                                                                       // 52
          * ```js                                                                        // 53
          *   var foo = new ReactiveProperty('bar');                                     // 54
          *   foo.set('bar');                                                            // 55
          * ```                                                                          // 56
          */ // 57
        self.set = function (value) {
          // 58
          if (self.value !== value) {
            // 59
            self.value = value; // 60
            self.changed(); // 61
          } // 62
        }; // 63
        // 64
        /**                                                                              // 65
          * @method ReactiveProperty.dec Decrease numeric property                       // 66
          * @param {number} [by=1] Value to decrease by                                  // 67
          * Usage:                                                                       // 68
          * ```js                                                                        // 69
          *   var foo = new ReactiveProperty('bar');                                     // 70
          *   foo.set(0);                                                                // 71
          *   foo.dec(5); // -5                                                          // 72
          * ```                                                                          // 73
          */ // 74
        self.dec = function (by) {
          // 75
          self.value -= by || 1; // 76
          self.changed(); // 77
        }; // 78
        // 79
        /**                                                                              // 80
          * @method ReactiveProperty.inc increase numeric property                       // 81
          * @param {number} [by=1] Value to increase by                                  // 82
          * Usage:                                                                       // 83
          * ```js                                                                        // 84
          *   var foo = new ReactiveProperty('bar');                                     // 85
          *   foo.set(0);                                                                // 86
          *   foo.inc(5); // 5                                                           // 87
          * ```                                                                          // 88
          */ // 89
        self.inc = function (by) {
          // 90
          self.value += by || 1; // 91
          self.changed(); // 92
        }; // 93
        // 94
        /**                                                                              // 95
          * @method ReactiveProperty.getset increase numeric property                    // 96
          * @param {any} [value] Value to set property - if undefined the act like `get` // 97
          * @returns {any} Returns value if no arguments are passed to the function      // 98
          * Usage:                                                                       // 99
          * ```js                                                                        // 100
          *   var foo = new ReactiveProperty('bar');                                     // 101
          *   foo.getset(5);                                                             // 102
          *   foo.getset(); // returns 5                                                 // 103
          * ```                                                                          // 104
          */ // 105
        self.getset = function (value) {
          // 106
          if (typeof value !== 'undefined') {
            // 107
            self.set(value); // 108
          } else {
            // 109
            return self.get(); // 110
          } // 111
        }; // 112
        // 113
        /**                                                                              // 114
          * @method ReactiveProperty.toString                                            // 115
          * Usage:                                                                       // 116
          * ```js                                                                        // 117
          *   var foo = new ReactiveProperty('bar');                                     // 118
          *   foo.toString(); // returns 'bar'                                           // 119
          * ```                                                                          // 120
          */ // 121
        self.toString = function () {
          // 122
          var val = self.get(); // 123
          return val ? val.toString() : ''; // 124
        }; // 125
        // 126
        /**                                                                              // 127
          * @method ReactiveProperty.toText                                              // 128
          * Usage:                                                                       // 129
          * ```js                                                                        // 130
          *   var foo = new ReactiveProperty('bar');                                     // 131
          *   foo.toText(); // returns 'bar'                                             // 132
          * ```                                                                          // 133
          */ // 134
        self.toText = self.toString; // 135
        // 136
      }; // 137
      // 138
      /////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    ////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:reactive-property", {
    ReactiveProperty: ReactiveProperty
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Package-scope variables */
  var ReactiveList;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                 //
    // packages/cfs_reactive-list/packages/cfs_reactive-list.js                                        //
    //                                                                                                 //
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    (function () {

      //////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                          //
      // packages/cfs:reactive-list/reactive-list.js                                              //
      //                                                                                          //
      //////////////////////////////////////////////////////////////////////////////////////////////
      //
      // #ReactiveList                                                                            // 1
      // Provides a simple reactive list interface                                                // 2
      var _noopCallback = function () {}; // 3
      // 4
      var _nonReactive = { // 5
        changed: _noopCallback, // 6
        depend: _noopCallback // 7
      }; // 8
      // 9
      /** @method ReactiveList Keeps a reactive list of key+value items                           // 10
        * @constructor                                                                            // 11
        * @namespace ReactiveList                                                                 // 12
        * @param {object} [options]                                                               // 13
        * @param {function} sort The sort algorithm to use                                        // 14
        * @param {boolean} [reactive=true] If set false this list is not reactive                 // 15
        * Example:                                                                                // 16
        * ```js                                                                                   // 17
        *   var list = new ReactiveList();                                                        // 18
        *   list.insert(1, { text: 'Hello id: 1' });                                              // 19
        *   list.insert(2, { text: 'Hello id: 2' });                                              // 20
        *   list.insert(3, { text: 'Hello id: 3' });                                              // 21
        *   list.update(2, { text: 'Updated 2'});                                                 // 22
        *   list.remove(1);                                                                       // 23
        *                                                                                         // 24
        *   list.forEach(function(value, key) {                                                   // 25
        *     console.log('GOT: ' + value.text);                                                  // 26
        *   }, true); // Set noneReactive = true, default behaviour is reactive                   // 27
        *                                                                                         // 28
        *   // Return from Template:                                                              // 29
        *   Template.hello.list = function() {                                                    // 30
        *     return list.fetch();                                                                // 31
        *   };                                                                                    // 32
        * ```                                                                                     // 33
        *                                                                                         // 34
        * ####Example of a sort algorithm                                                         // 35
        * Sort can be used to define the order of the list                                        // 36
        * ```js                                                                                   // 37
        *   var list = new ReactiveList({                                                         // 38
        *     sort: function(a, b) {                                                              // 39
        *       // a and b are type of { key, value }                                             // 40
        *       // here we sort by the key:                                                       // 41
        *       return a.key < b.key;                                                             // 42
        *     }                                                                                   // 43
        *   });                                                                                   // 44
        * ```                                                                                     // 45
        * ###Object chain                                                                         // 46
        * ```                                                                                     // 47
        *                   first                               last                              // 48
        *  undefined -       obj       -       obj       -       obj       - undefined            // 49
        *             (prev value next) (prev value next) (prev value next)                       // 50
        * ```                                                                                     // 51
        */ // 52
      ReactiveList = function (options) {
        // 53
        var self = this; // 54
        // Object container                                                                       // 55
        self.lookup = {}; // 56
        // Length                                                                                 // 57
        self._length = 0; // 58
        // First object in list                                                                   // 59
        self.first; // 60
        // Last object in list                                                                    // 61
        self.last; // 62
        // Set sort to options.sort or default to true (asc)                                      // 63
        self.sort = options && options.sort || function (a, b) {
          // 64
          return a.key < b.key; // 65
        }; // 66
        // 67
        // Allow user to disable reactivity, default true                                         // 68
        self.isReactive = options ? options.reactive !== false : true; // 69
        // 70
        // If lifo queue                                                                          // 71
        if (options === true || options && options.sort === true) {
          // 72
          self.sort = function (a, b) {
            return a.key > b.key;
          }; // 73
        } // 74
        // 75
        // Rig the dependencies                                                                   // 76
        self._listDeps = self.isReactive ? new Deps.Dependency() : _nonReactive; // 77
        // 78
        self._lengthDeps = self.isReactive ? new Deps.Dependency() : _nonReactive; // 79
      }; // 80
      // 81
      /** @method ReactiveList.prototype.length Returns the length of the list                    // 82
        * @reactive                                                                               // 83
        * @returns {number} Length of the reactive list                                           // 84
        */ // 85
      ReactiveList.prototype.length = function () {
        // 86
        var self = this; // 87
        // Make this reactive                                                                     // 88
        self._lengthDeps.depend(); // 89
        return self._length; // 90
      }; // 91
      // 92
      /** @method ReactiveList.prototype.reset Reset and empty the list                           // 93
        * @todo Check for memory leaks, if so we have to iterate over lookup and delete the items // 94
        */ // 95
      ReactiveList.prototype.reset = function () {
        // 96
        var self = this; // 97
        // Clear the reference to the first object                                                // 98
        self.first = undefined; // 99
        // Clear the reference to the last object                                                 // 100
        self.last = undefined; // 101
        // Clear the lookup object                                                                // 102
        self.lookup = {}; // 103
        // Set the length to 0                                                                    // 104
        self._length = 0; // 105
        self._lengthDeps.changed(); // 106
        // Invalidate the list                                                                    // 107
        self._listDeps.changed(); // 108
      }; // 109
      // 110
      /** @method ReactiveList.prototype.update                                                   // 111
        * @param {string|number} key Key to update                                                // 112
        * @param {any} value Update with this value                                               // 113
        */ // 114
      ReactiveList.prototype.update = function (key, value) {
        // 115
        var self = this; // 116
        // Make sure the key is found in the list                                                 // 117
        if (typeof self.lookup[key] === 'undefined') {
          // 118
          throw new Error('Reactive list cannot update, key "' + key + '" not found'); // 119
        } // 120
        // Set the new value                                                                      // 121
        self.lookup[key].value = value; // 122
        // Invalidate the list                                                                    // 123
        self._listDeps.changed(); // 124
      }; // 125
      // 126
      /** @method ReactiveList.prototype.insert                                                   // 127
        * @param {string|number} key Key to insert                                                // 128
        * @param {any} value Insert item with this value                                          // 129
        */ // 130
      ReactiveList.prototype.insert = function (key, value) {
        // 131
        var self = this; // 132
        if (typeof self.lookup[key] !== 'undefined') {
          // 133
          throw new Error('Reactive list could not insert: key "' + key + // 134
          '" allready found'); // 135
        } // 136
        // Create the new item to insert into the list                                            // 137
        var newItem = { key: key, value: value }; // 138
        // Init current by pointing it at the first object in the list                            // 139
        var current = self.first; // 140
        // Init the isInserted flag                                                               // 141
        var isInserted = false; // 142
        // 143
        // 144
        // Iterate through list while not empty and item is not inserted                          // 145
        while (typeof current !== 'undefined' && !isInserted) {
          // 146
          // 147
          // Sort the list by using the sort function                                             // 148
          if (self.sort(newItem, current)) {
            // 149
            // 150
            // Insert self.lookup[key] before                                                     // 151
            if (typeof current.prev === 'undefined') {
              self.first = newItem;
            } // 152
            // 153
            // Set the references in the inserted object                                          // 154
            newItem.prev = current.prev; // 155
            newItem.next = current; // 156
            // 157
            // Update the two existing objects                                                    // 158
            if (current.prev) {
              current.prev.next = newItem;
            } // 159
            current.prev = newItem; // 160
            // 161
            // Mark the item as inserted - job's done                                             // 162
            isInserted = true; // 163
          } // 164
          // Goto next object                                                                     // 165
          current = current.next; // 166
        } // 167
        // 168
        // 169
        if (!isInserted) {
          // 170
          // We append it to the list                                                             // 171
          newItem.prev = self.last; // 172
          if (self.last) {
            self.last.next = newItem;
          } // 173
          // 174
          // Update the last pointing to newItem                                                  // 175
          self.last = newItem; // 176
          // Update first if we are appending to an empty list                                    // 177
          if (self._length === 0) {
            self.first = newItem;
          } // 178
        } // 179
        // 180
        // 181
        // Reference the object for a quick lookup option                                         // 182
        self.lookup[key] = newItem; // 183
        // Increase length                                                                        // 184
        self._length++; // 185
        self._lengthDeps.changed(); // 186
        // And invalidate the list                                                                // 187
        self._listDeps.changed(); // 188
      }; // 189
      // 190
      /** @method ReactiveList.prototype.remove                                                   // 191
        * @param {string|number} key Key to remove                                                // 192
        */ // 193
      ReactiveList.prototype.remove = function (key) {
        // 194
        var self = this; // 195
        // Get the item object                                                                    // 196
        var item = self.lookup[key]; // 197
        // 198
        // Check that it exists                                                                   // 199
        if (typeof item === 'undefined') {
          // 200
          return; // 201
          // throw new Error('ReactiveList cannot remove item, unknow key "' + key +              // 202
          //        '"');                                                                         // 203
        } // 204
        // 205
        // Rig the references                                                                     // 206
        var prevItem = item.prev; // 207
        var nextItem = item.next; // 208
        // 209
        // Update chain prev object next reference                                                // 210
        if (typeof prevItem !== 'undefined') {
          // 211
          prevItem.next = nextItem; // 212
        } else {
          // 213
          self.first = nextItem; // 214
        } // 215
        // 216
        // Update chain next object prev reference                                                // 217
        if (typeof nextItem !== 'undefined') {
          // 218
          nextItem.prev = prevItem; // 219
        } else {
          // 220
          self.last = prevItem; // 221
        } // 222
        // 223
        // Clean up                                                                               // 224
        self.lookup[key].last = null; // 225
        self.lookup[key].prev = null; // 226
        self.lookup[key] = null; // 227
        prevItem = null; // 228
        // 229
        delete self.lookup[key]; // 230
        // Decrease the length                                                                    // 231
        self._length--; // 232
        self._lengthDeps.changed(); // 233
        // Invalidate the list                                                                    // 234
        self._listDeps.changed(); // 235
      }; // 236
      // 237
      /** @method ReactiveList.prototype.getLastItem                                              // 238
        * @returns {any} Pops last item from the list - removes the item from the list            // 239
        */ // 240
      ReactiveList.prototype.getLastItem = function (first) {
        // 241
        var self = this; // 242
        // 243
        // Get the relevant item first or last                                                    // 244
        var item = first ? self.first : self.last; // 245
        // 246
        if (typeof item === 'undefined') {
          // 247
          return; // Empty list                                                                   // 248
        } // 249
        // Remove the item from the list                                                          // 250
        self.remove(item.key); // 251
        // Return the value                                                                       // 252
        return item.value; // 253
      }; // 254
      // 255
      /** @method ReactiveList.prototype.getFirstItem                                             // 256
        * @returns {any} Pops first item from the list - removes the item from the list           // 257
        */ // 258
      ReactiveList.prototype.getFirstItem = function () {
        // 259
        // This gets the first item...                                                            // 260
        return this.getLastItem(true); // 261
      }; // 262
      // 263
      /** @method ReactiveList.prototype.forEach                                                  // 264
        * @param {function} f Callback `funciton(value, key)`                                     // 265
        * @param {boolean} [noneReactive=false] Set true if want to disable reactivity            // 266
        * @param {boolean} [reverse=false] Set true to reverse iteration `forEachReverse`         // 267
        */ // 268
      ReactiveList.prototype.forEach = function (f, noneReactive, reverse) {
        // 269
        var self = this; // 270
        // Check if f is a function                                                               // 271
        if (typeof f !== 'function') {
          // 272
          throw new Error('ReactiveList forEach requires a function'); // 273
        } // 274
        // We allow this not to be reactive                                                       // 275
        if (!noneReactive) {
          self._listDeps.depend();
        } // 276
        // Set current to the first object                                                        // 277
        var current = reverse ? self.last : self.first; // 278
        // Iterate over the list while its not empty                                              // 279
        while (current) {
          // 280
          // Call the callback function                                                           // 281
          f(current.value, current.key); // 282
          // Jump to the next item in the list                                                    // 283
          current = reverse ? current.prev : current.next; // 284
        } // 285
      }; // 286
      // 287
      /** @method ReactiveList.prototype.forEachReverse                                           // 288
        * @param {function} f Callback `funciton(value, key)`                                     // 289
        * @param {boolean} [noneReactive=false] Set true if want to disable reactivity            // 290
        */ // 291
      ReactiveList.prototype.forEachReverse = function (f, noneReactive) {
        // 292
        // Call forEach with the reverse flag                                                     // 293
        this.forEach(f, noneReactive, true); // 294
      }; // 295
      // 296
      /** @method ReactiveList.prototype.fetch Returns list as array                              // 297
        * @param {boolean} [noneReactive=false] Set true if want to disable reactivity            // 298
        * @reactive This can be disabled                                                          // 299
        * @returns {array} List of items                                                          // 300
        */ // 301
      ReactiveList.prototype.fetch = function (noneReactive) {
        // 302
        var self = this; // 303
        // Init the result buffer                                                                 // 304
        var result = []; // 305
        // Iterate over the list items                                                            // 306
        self.forEach(function fetchCallback(value) {
          // 307
          // Add the item value to the result                                                     // 308
          result.push(value); // 309
        }, noneReactive); // 310
        // Return the result                                                                      // 311
        return result; // 312
      }; // 313
      // 314
      //////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    /////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:reactive-list", {
    ReactiveList: ReactiveList
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var ReactiveProperty = Package['cfs:reactive-property'].ReactiveProperty;

  /* Package-scope variables */
  var MicroQueue, ReactiveList, PowerQueue;

  (function () {

    ///////////////////////////////////////////////////////////////////////
    //                                                                   //
    // packages/cfs_power-queue/packages/cfs_power-queue.js              //
    //                                                                   //
    ///////////////////////////////////////////////////////////////////////
    //
    (function () {

      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                   //
      // packages/cfs:power-queue/power-queue.js                                                                           //
      //                                                                                                                   //
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Rig weak dependencies                                                                                             // 1
      if (typeof MicroQueue === 'undefined' && Package['micro-queue']) {
        // 2
        MicroQueue = Package['micro-queue'].MicroQueue; // 3
      } // 4
      if (typeof ReactiveList === 'undefined' && Package['reactive-list']) {
        // 5
        ReactiveList = Package['reactive-list'].ReactiveList; // 6
      } // 7
      // 8
      // Rig weak dependencies in +0.9.1                                                                                   // 9
      if (typeof MicroQueue === 'undefined' && Package['cfs:micro-queue']) {
        // 10
        MicroQueue = Package['cfs:micro-queue'].MicroQueue; // 11
      } // 12
      if (typeof ReactiveList === 'undefined' && Package['cfs:reactive-list']) {
        // 13
        ReactiveList = Package['cfs:reactive-list'].ReactiveList; // 14
      } // 15
      // 16
      /**                                                                                                                  // 17
       * Creates an instance of a power queue // Testing inline comment                                                    // 18
       * [Check out demo](http://power-queue-test.meteor.com/)                                                             // 19
       *                                                                                                                   // 20
       * @constructor                                                                                                      // 21
       * @self powerqueue                                                                                                  // 22
       * @param {object} [options] Settings                                                                                // 23
       * @param {boolean} [options.filo=false] Make it a first in last out queue                                           // 24
       * @param {boolean} [options.isPaused=false] Set queue paused                                                        // 25
       * @param {boolean} [options.autostart=true] May adding a task start the queue                                       // 26
       * @param {string} [options.name="Queue"] Name of the queue                                                          // 27
       * @param {number} [options.maxProcessing=1] Limit of simultanous running tasks                                      // 28
       * @param {number} [options.maxFailures = 5] Limit retries of failed tasks, if 0 or below we allow infinite failures // 29
       * @param {number} [options.jumpOnFailure = true] Jump to next task and retry failed task later                      // 30
       * @param {boolean} [options.debug=false] Log verbose messages to the console                                        // 31
       * @param {boolean} [options.reactive=true] Set whether or not this queue should be reactive                         // 32
       * @param {boolean} [options.onAutostart] Callback for the queue autostart event                                     // 33
       * @param {boolean} [options.onPaused] Callback for the queue paused event                                           // 34
       * @param {boolean} [options.onReleased] Callback for the queue release event                                        // 35
       * @param {boolean} [options.onEnded] Callback for the queue end event                                               // 36
       * @param {[SpinalQueue](spinal-queue.spec.md)} [options.spinalQueue] Set spinal queue uses pr. default `MicroQueue` or `ReactiveList` if added to the project
       */ // 38
      PowerQueue = function (options) {
        // 39
        var self = this; // 40
        var test = 5; // 41
        // 42
        self.reactive = options && options.reactive === false ? false : true; // 43
        // 44
        // Allow user to use another micro-queue #3                                                                        // 45
        // We try setting the ActiveQueue to MicroQueue if installed in the app                                            // 46
        var ActiveQueue = typeof MicroQueue !== 'undefined' && MicroQueue || undefined; // 47
        // 48
        // If ReactiveList is added to the project we use this over MicroQueue                                             // 49
        ActiveQueue = typeof ReactiveList !== 'undefined' && ReactiveList || ActiveQueue; // 50
        // 51
        // We allow user to overrule and set a custom spinal-queue spec complient queue                                    // 52
        if (options && typeof options.spinalQueue !== 'undefined') {
          // 53
          ActiveQueue = options.spinalQueue; // 54
        } // 55
        // 56
        if (typeof ActiveQueue === 'undefined') {
          // 57
          console.log('Error: You need to add a spinal queue to the project'); // 58
          console.log('Please add "micro-queue", "reactive-list" to the project'); // 59
          throw new Error('Please add "micro-queue", "reactive-list" or other spinalQueue compatible packages'); // 60
        } // 61
        // 62
        // Default is fifo lilo                                                                                            // 63
        self.invocations = new ActiveQueue({ // 64
          //                                                                                                               // 65
          sort: options && (options.filo || options.lifo), // 66
          reactive: self.reactive // 67
        }); // 68
        //var self.invocations = new ReactiveList(queueOrder);                                                             // 69
        // 70
        // List of current tasks being processed                                                                           // 71
        self._processList = new ActiveQueue({ // 72
          reactive: self.reactive // 73
        }); //ReactiveList();                                                                                              // 74
        // 75
        // Max number of simultanious tasks being processed                                                                // 76
        self._maxProcessing = new ReactiveProperty(options && options.maxProcessing || 1, self.reactive); // 77
        // 78
        // Reactive number of tasks being processed                                                                        // 79
        self._isProcessing = new ReactiveProperty(0, self.reactive); // 80
        // 81
        // Boolean indicating if queue is paused or not                                                                    // 82
        self._paused = new ReactiveProperty(options && options.isPaused || false, self.reactive); // 83
        // 84
        // Boolean indicator for queue status active / running (can still be paused)                                       // 85
        self._running = new ReactiveProperty(false, self.reactive); // 86
        // 87
        // Counter for errors, errors are triggered if maxFailures is exeeded                                              // 88
        self._errors = new ReactiveProperty(0, self.reactive); // 89
        // 90
        // Counter for task failures, contains error count                                                                 // 91
        self._failures = new ReactiveProperty(0, self.reactive); // 92
        // 93
        // On failure jump to new task - if false the current task is rerun until error                                    // 94
        self._jumpOnFailure = options && options.jumpOnFailure === false ? false : true; // 95
        // 96
        // Count of all added tasks                                                                                        // 97
        self._maxLength = new ReactiveProperty(0, self.reactive); // 98
        // 99
        // Boolean indicate whether or not a "add" task is allowed to start the queue                                      // 100
        self._autostart = new ReactiveProperty(options && options.autostart === false ? false : true, self.reactive); // 101
        // 102
        // Limit times a task is allowed to fail and be rerun later before triggering an error                             // 103
        self._maxFailures = new ReactiveProperty(options && options.maxFailures || 5, self.reactive); // 104
        // 105
        // Name / title of this queue - Not used - should deprecate                                                        // 106
        self.title = options && options.name || 'Queue'; // 107
        // 108
        // debug - will print error / failures passed to next                                                              // 109
        self.debug = !!(options && options.debug); // 110
        // 111
        /** @method PowerQueue.total                                                                                       // 112
         * @reactive                                                                                                       // 113
         * @returns {number} The total number of tasks added to this queue                                                 // 114
         */ // 115
        self.total = self._maxLength.get; // 116
        // 117
        /** @method PowerQueue.isPaused                                                                                    // 118
         * @reactive                                                                                                       // 119
         * @returns {boolean} Status of the paused state of the queue                                                      // 120
         */ // 121
        self.isPaused = self._paused.get; // 122
        // 123
        /** @method PowerQueue.processing                                                                                  // 124
         * @reactive                                                                                                       // 125
         * @returns {number} Number of tasks currently being processed                                                     // 126
         */ // 127
        self.processing = self._isProcessing.get; // 128
        // 129
        /** @method PowerQueue.errors                                                                                      // 130
         * @reactive                                                                                                       // 131
         * @returns {number} The total number of errors                                                                    // 132
         * Errors are triggered when [maxFailures](PowerQueue.maxFailures) are exeeded                                     // 133
         */ // 134
        self.errors = self._errors.get; // 135
        // 136
        /** @method PowerQueue.failures                                                                                    // 137
         * @reactive                                                                                                       // 138
         * @returns {number} The total number of failed tasks                                                              // 139
         */ // 140
        self.failures = self._failures.get; // 141
        // 142
        /** @method PowerQueue.isRunning                                                                                   // 143
         * @reactive                                                                                                       // 144
         * @returns {boolean} True if the queue is running                                                                 // 145
         * > NOTE: The task can be paused but marked as running                                                            // 146
         */ // 147
        self.isRunning = self._running.get; // 148
        // 149
        /** @method PowerQueue.maxProcessing Get setter for maxProcessing                                                  // 150
         * @param {number} [max] If not used this function works as a getter                                               // 151
         * @reactive                                                                                                       // 152
         * @returns {number} Maximum number of simultaneous processing tasks                                               // 153
         *                                                                                                                 // 154
         * Example:                                                                                                        // 155
         * ```js                                                                                                           // 156
         *   foo.maxProcessing();    // Works as a getter and returns the current value                                    // 157
         *   foo.maxProcessing(20);  // This sets the value to 20                                                          // 158
         * ```                                                                                                             // 159
         */ // 160
        self.maxProcessing = self._maxProcessing.getset; // 161
        // 162
        self._maxProcessing.onChange = function () {
          // 163
          // The user can change the max allowed processing tasks up or down here...                                       // 164
          // Update the throttle up                                                                                        // 165
          self.updateThrottleUp(); // 166
          // Update the throttle down                                                                                      // 167
          self.updateThrottleDown(); // 168
        }; // 169
        // 170
        /** @method PowerQueue.autostart Get setter for autostart                                                          // 171
         * @param {boolean} [autorun] If not used this function works as a getter                                          // 172
         * @reactive                                                                                                       // 173
         * @returns {boolean} If adding a task may trigger the queue to start                                              // 174
         *                                                                                                                 // 175
         * Example:                                                                                                        // 176
         * ```js                                                                                                           // 177
         *   foo.autostart();    // Works as a getter and returns the current value                                        // 178
         *   foo.autostart(true);  // This sets the value to true                                                          // 179
         * ```                                                                                                             // 180
         */ // 181
        self.autostart = self._autostart.getset; // 182
        // 183
        /** @method PowerQueue.maxFailures Get setter for maxFailures                                                      // 184
         * @param {number} [max] If not used this function works as a getter                                               // 185
         * @reactive                                                                                                       // 186
         * @returns {number} The maximum for failures pr. task before triggering an error                                  // 187
         *                                                                                                                 // 188
         * Example:                                                                                                        // 189
         * ```js                                                                                                           // 190
         *   foo.maxFailures();    // Works as a getter and returns the current value                                      // 191
         *   foo.maxFailures(10);  // This sets the value to 10                                                            // 192
         * ```                                                                                                             // 193
         */ // 194
        self.maxFailures = self._maxFailures.getset; // 195
        // 196
        /** @callback PowerQueue.onPaused                                                                                  // 197
         * Is called when queue is ended                                                                                   // 198
         */ // 199
        self.onPaused = options && options.onPaused || function () {
          // 200
          self.debug && console.log(self.title + ' ENDED'); // 201
        }; // 202
        // 203
        /** @callback PowerQueue.onEnded                                                                                   // 204
         * Is called when queue is ended                                                                                   // 205
         */ // 206
        self.onEnded = options && options.onEnded || function () {
          // 207
          self.debug && console.log(self.title + ' ENDED'); // 208
        }; // 209
        // 210
        /** @callback PowerQueue.onRelease                                                                                 // 211
         * Is called when queue is released                                                                                // 212
         */ // 213
        self.onRelease = options && options.onRelease || function () {
          // 214
          self.debug && console.log(self.title + ' RELEASED'); // 215
        }; // 216
        // 217
        /** @callback PowerQueue.onAutostart                                                                               // 218
         * Is called when queue is auto started                                                                            // 219
         */ // 220
        self.onAutostart = options && options.onAutostart || function () {
          // 221
          self.debug && console.log(self.title + ' Autostart'); // 222
        }; // 223
      }; // 224
      // 225
      /** @method PowerQueue.prototype.processList                                                                       // 226
       * @reactive                                                                                                       // 227
       * @returns {array} List of tasks currently being processed                                                        // 228
       */ // 229
      PowerQueue.prototype.processingList = function () {
        // 230
        var self = this; // 231
        return self._processList.fetch(); // 232
      }; // 233
      // 234
      /** @method PowerQueue.prototype.isHalted                                                                          // 235
       * @reactive                                                                                                       // 236
       * @returns {boolean} True if the queue is not running or paused                                                   // 237
       */ // 238
      PowerQueue.prototype.isHalted = function () {
        // 239
        var self = this; // 240
        return !self._running.get() || self._paused.get(); // 241
      }; // 242
      // 243
      /** @method PowerQueue.prototype.length                                                                            // 244
       * @reactive                                                                                                       // 245
       * @returns {number} Number of tasks left in queue to be processed                                                 // 246
       */ // 247
      PowerQueue.prototype.length = function () {
        // 248
        var self = this; // 249
        return self.invocations.length(); // 250
      }; // 251
      // 252
      /** @method PowerQueue.prototype.progress                                                                          // 253
       * @reactive                                                                                                       // 254
       * @returns {number} 0 .. 100 % Indicates the status of the queue                                                  // 255
       */ // 256
      PowerQueue.prototype.progress = function () {
        // 257
        var self = this; // 258
        var progress = self._maxLength.get() - self.invocations.length() - self._isProcessing.get(); // 259
        if (self._maxLength.value > 0) {
          // 260
          return Math.round(progress / self._maxLength.value * 100); // 261
        } // 262
        return 0; // 263
      }; // 264
      // 265
      /** @method PowerQueue.prototype.usage                                                                             // 266
       * @reactive                                                                                                       // 267
       * @returns {number} 0 .. 100 % Indicates resource usage of the queue                                              // 268
       */ // 269
      PowerQueue.prototype.usage = function () {
        // 270
        var self = this; // 271
        return Math.round(self._isProcessing.get() / self._maxProcessing.get() * 100); // 272
      }; // 273
      // 274
      /** @method PowerQueue.prototype.reset Reset the queue                                                             // 275
       * Calling this will:                                                                                              // 276
       * * stop the queue                                                                                                // 277
       * * paused to false                                                                                               // 278
       * * Discart all queue data                                                                                        // 279
       *                                                                                                                 // 280
       * > NOTE: At the moment if the queue has processing tasks they can change                                         // 281
       * > the `errors` and `failures` counters. This could change in the future or                                      // 282
       * > be prevented by creating a whole new instance of the `PowerQueue`                                             // 283
       */ // 284
      PowerQueue.prototype.reset = function () {
        // 285
        var self = this; // 286
        self.debug && console.log(self.title + ' RESET'); // 287
        self._running.set(false); // 288
        self._paused.set(false); // 289
        self.invocations.reset(); // 290
        self._processList.reset(); // 291
        // 292
        // // Loop through the processing tasks and reset these                                                          // 293
        // self._processList.forEach(function(data) {                                                                    // 294
        //   if (data.queue instanceof PowerQueue) {                                                                     // 295
        //     data.queue.reset();                                                                                       // 296
        //   }                                                                                                           // 297
        // }, true);                                                                                                     // 298
        self._maxLength.set(0); // 299
        self._failures.set(0); // 300
        self._errors.set(0); // 301
      }; // 302
      // 303
      /** @method PowerQueue._autoStartTasks                                                                             // 304
       * @private                                                                                                        // 305
       *                                                                                                                 // 306
       * This method defines the autostart algorithm that allows add task to trigger                                     // 307
       * a start of the queue if queue is not paused.                                                                    // 308
       */ // 309
      PowerQueue.prototype._autoStartTasks = function () {
        // 310
        var self = this; // 311
        // 312
        // We dont start anything by ourselfs if queue is paused                                                         // 313
        if (!self._paused.value) {
          // 314
          // 315
          // Queue is not running and we are set to autostart so we start the queue                                      // 316
          if (!self._running.value && self._autostart.value) {
            // 317
            // Trigger callback / event                                                                                  // 318
            self.onAutostart(); // 319
            // Set queue as running                                                                                      // 320
            self._running.set(true); // 321
          } // 322
          // 323
          // Make sure that we use all available resources                                                               // 324
          if (self._running.value) {
            // 325
            // Call next to start up the queue                                                                           // 326
            self.next(null); // 327
          } // 328
          // 329
        } // 330
      }; // 331
      // 332
      /** @method PowerQueue.prototype.add                                                                               // 333
       * @param {any} data The task to be handled                                                                        // 334
       * @param {number} [failures] Used internally to Pass on number of failures.                                       // 335
       */ // 336
      PowerQueue.prototype.add = function (data, failures, id) {
        // 337
        var self = this; // 338
        // 339
        // Assign new id to task                                                                                         // 340
        var assignNewId = self._jumpOnFailure || typeof id === 'undefined'; // 341
        // 342
        // Set the task id                                                                                               // 343
        var taskId = assignNewId ? self._maxLength.value + 1 : id; // 344
        // 345
        // self.invocations.add({ _id: currentId, data: data, failures: failures || 0 }, reversed);                      // 346
        self.invocations.insert(taskId, { _id: taskId, data: data, failures: failures || 0 }); // 347
        // 348
        // If we assigned new id then increase length                                                                    // 349
        if (assignNewId) self._maxLength.inc(); // 350
        // 351
        self._autoStartTasks(); // 352
      }; // 353
      // 354
      /** @method PowerQueue.prototype.updateThrottleUp                                                                  // 355
       * @private                                                                                                        // 356
       *                                                                                                                 // 357
       * Calling this method will update the throttle on the queue adding tasks.                                         // 358
       *                                                                                                                 // 359
       * > Note: Currently we only support the PowerQueue - but we could support                                         // 360
       * > a more general interface for pauseable tasks or other usecases.                                               // 361
       */ // 362
      PowerQueue.prototype.updateThrottleUp = function () {
        // 363
        var self = this; // 364
        // 365
        // How many additional tasks can we handle?                                                                      // 366
        var availableSlots = self._maxProcessing.value - self._isProcessing.value; // 367
        // If we can handle more, we have more, we're running, and we're not paused                                      // 368
        if (!self._paused.value && self._running.value && availableSlots > 0 && self.invocations._length > 0) {
          // 369
          // Increase counter of current number of tasks being processed                                                 // 370
          self._isProcessing.inc(); // 371
          // Run task                                                                                                    // 372
          self.runTask(self.invocations.getFirstItem()); // 373
          // Repeat recursively; this is better than a for loop to avoid blocking the UI                                 // 374
          self.updateThrottleUp(); // 375
        } // 376
        // 377
      }; // 378
      // 379
      /** @method PowerQueue.prototype.updateThrottleDown                                                                // 380
       * @private                                                                                                        // 381
       *                                                                                                                 // 382
       * Calling this method will update the throttle on the queue pause tasks.                                          // 383
       *                                                                                                                 // 384
       * > Note: Currently we only support the PowerQueue - but we could support                                         // 385
       * > a more general interface for pauseable tasks or other usecases.                                               // 386
       */ // 387
      PowerQueue.prototype.updateThrottleDown = function () {
        // 388
        var self = this; // 389
        // Calculate the differece between acutuall processing tasks and target                                          // 390
        var diff = self._isProcessing.value - self._maxProcessing.value; // 391
        // 392
        // If the diff is more than 0 then we have many tasks processing.                                                // 393
        if (diff > 0) {
          // 394
          // We pause the latest added tasks                                                                             // 395
          self._processList.forEachReverse(function (data) {
            // 396
            if (diff > 0 && data.queue instanceof PowerQueue) {
              // 397
              diff--; // 398
              // We dont mind calling pause on multiple times on each task                                               // 399
              // theres a simple check going on preventing any duplicate actions                                         // 400
              data.queue.pause(); // 401
            } // 402
          }, true); // 403
        } // 404
      }; // 405
      // 406
      /** @method PowerQueue.prototype.next                                                                              // 407
       * @param {string} [err] Error message if task failed                                                              // 408
       * > * Can pass in `null` to start the queue                                                                       // 409
       * > * Passing in a string to `next` will trigger a failure                                                        // 410
       * > * Passing nothing will simply let the next task run                                                           // 411
       * `next` is handed into the [taskHandler](PowerQueue.taskHandler) as a                                            // 412
       * callback to mark an error or end of current task                                                                // 413
       */ // 414
      PowerQueue.prototype.next = function (err) {
        // 415
        var self = this; // 416
        // Primary concern is to throttle up because we are either:                                                      // 417
        // 1. Starting the queue                                                                                         // 418
        // 2. Starting next task                                                                                         // 419
        //                                                                                                               // 420
        // This function does not shut down running tasks                                                                // 421
        self.updateThrottleUp(); // 422
        // 423
        // We are running, no tasks are being processed even we just updated the                                         // 424
        // throttle up and we got no errors.                                                                             // 425
        // 1. We are paused and releasing tasks                                                                          // 426
        // 2. We are done                                                                                                // 427
        if (self._running.value && self._isProcessing.value === 0 && err !== null) {
          // 428
          // 429
          // We have no tasks processing so this queue is now releasing resources                                        // 430
          // this could be that the queue is paused or stopped, in that case the                                         // 431
          // self.invocations._length would be > 0                                                                       // 432
          // If on the other hand the self.invocations._length is 0 then we have no more                                 // 433
          // tasks in the queue so the queue has ended                                                                   // 434
          self.onRelease(self.invocations._length); // 435
          // 436
          if (!self.invocations._length) {
            // !self._paused.value &&                                                     // 437
            // Check if queue is done working                                                                            // 438
            // Stop the queue                                                                                            // 439
            self._running.set(false); // 440
            // self.invocations.reset(); // This should be implicit                                                      // 441
            self.onEnded(); // 442
          } // 443
          // 444
        } // 445
      }; // 446
      // 447
      /** @callback done                                                                                                 // 448
       * @param {Meteor.Error | Error | String | null} [feedback] This allows the task to communicate with the queue     // 449
       *                                                                                                                 // 450
       * Explaination of `feedback`                                                                                      // 451
       * * `Meteor.Error` This means that the task failed in a controlled manner and is allowed to rerun                 // 452
       * * `Error` This will throw the passed error - as its an unitended error                                          // 453
       * * `null` The task is not done yet, rerun later                                                                  // 454
       * * `String` The task can perform certain commands on the queue                                                   // 455
       *    * "pause" - pause the queue                                                                                  // 456
       *    * "stop" - stop the queue                                                                                    // 457
       *    * "reset" - reset the queue                                                                                  // 458
       *    * "cancel" - cancel the queue                                                                                // 459
       *                                                                                                                 // 460
       */ // 461
      // 462
      // 463
      /** @method PowerQueue.prototype.runTaskDone                                                                       // 464
       * @private                                                                                                        // 465
       * @param {Meteor.Error | Error | String | null} [feedback] This allows the task to communicate with the queue     // 466
       * @param {object} invocation                                                                                      // 467
       *                                                                                                                 // 468
       * > Note: `feedback` is explained in [Done callback](#done)                                                       // 469
       *                                                                                                                 // 470
       */ // 471
      // Rig the callback function                                                                                       // 472
      PowerQueue.prototype.runTaskDone = function (feedback, invocation) {
        // 473
        var self = this; // 474
        // 475
        // If the task handler throws an error then add it to the queue again                                            // 476
        // we allow this for a max of self._maxFailures                                                                  // 477
        // If the error is null then we add the task silently back into the                                              // 478
        // microQueue in reverse... This could be due to pause or throttling                                             // 479
        if (feedback instanceof Meteor.Error) {
          // 480
          // We only count failures if maxFailures are above 0                                                           // 481
          if (self._maxFailures.value > 0) invocation.failures++; // 482
          self._failures.inc(); // 483
          // 484
          // If the user has set the debug flag we print out failures/errors                                             // 485
          console.error('Error: "' + self.title + '" ' + feedback.message + ', ' + feedback.stack); // 486
          // 487
          if (invocation.failures < self._maxFailures.value) {
            // 488
            // Add the task again with the increased failures                                                            // 489
            self.add(invocation.data, invocation.failures, invocation._id); // 490
          } else {
            // 491
            self._errors.inc(); // 492
            self.errorHandler(invocation.data, self.add, invocation.failures); // 493
          } // 494
          // 495
          // If a error is thrown we assume its not intended                                                             // 496
        } else if (feedback instanceof Error) throw feedback; // 497
        // 498
        if (feedback) // 499
          // 500
          // We use null to throttle pauseable tasks                                                                       // 501
          if (feedback === null) {
            // 502
            // We add this task into the queue, no questions asked                                                         // 503
            self.invocations.insert(invocation._id, { data: invocation.data, failures: invocation.failures, _id: invocation._id });
          } // 505
        // 506
        // If the user returns a string we got a command                                                                 // 507
        if (feedback === '' + feedback) {
          // 508
          var command = { // 509
            'pause': function () {
              self.pause();
            }, // 510
            'stop': function () {
              self.stop();
            }, // 511
            'reset': function () {
              self.reset();
            }, // 512
            'cancel': function () {
              self.cancel();
            } // 513
          }; // 514
          if (typeof command[feedback] === 'function') {
            // 515
            // Run the command on this queue                                                                             // 516
            command[feedback](); // 517
          } else {
            // 518
            // We dont recognize this command, throw an error                                                            // 519
            throw new Error('Unknown queue command "' + feedback + '"'); // 520
          } // 521
        } // 522
        // Decrease the number of tasks being processed                                                                  // 523
        // make sure we dont go below 0                                                                                  // 524
        if (self._isProcessing.value > 0) self._isProcessing.dec(); // 525
        // Task has ended we remove the task from the process list                                                       // 526
        self._processList.remove(invocation._id); // 527
        // 528
        invocation.data = null; // 529
        invocation.failures = null; // 530
        invocation._id = null; // 531
        invocation = null; // 532
        delete invocation; // 533
        // Next task                                                                                                     // 534
        Meteor.setTimeout(function () {
          // 535
          self.next(); // 536
        }, 0); // 537
        // 538
      }; // 539
      // 540
      // 541
      /** @method PowerQueue.prototype.runTask                                                                           // 542
       * @private // This is not part of the open api                                                                    // 543
       * @param {object} invocation The object stored in the micro-queue                                                 // 544
       */ // 545
      PowerQueue.prototype.runTask = function (invocation) {
        // 546
        var self = this; // 547
        // 548
        // We start the fitting task handler                                                                             // 549
        // Currently we only support the PowerQueue but we could have a more general                                     // 550
        // interface for tasks that allow throttling                                                                     // 551
        try {
          // 552
          if (invocation.data instanceof PowerQueue) {
            // 553
            // 554
            // Insert PowerQueue into process list                                                                       // 555
            self._processList.insert(invocation._id, { id: invocation._id, queue: invocation.data }); // 556
            // Handle task                                                                                               // 557
            self.queueTaskHandler(invocation.data, function subQueueCallbackDone(feedback) {
              // 558
              self.runTaskDone(feedback, invocation); // 559
            }, invocation.failures); // 560
            // 561
          } else {
            // 562
            // 563
            // Insert task into process list                                                                             // 564
            self._processList.insert(invocation._id, invocation.data); // 565
            // Handle task                                                                                               // 566
            self.taskHandler(invocation.data, function taskCallbackDone(feedback) {
              // 567
              self.runTaskDone(feedback, invocation); // 568
            }, invocation.failures); // 569
            // 570
          } // 571
        } catch (err) {
          // 572
          throw new Error('Error while running taskHandler for queue, Error: ' + err.message); // 573
        } // 574
      }; // 575
      // 576
      /** @method PowerQueue.prototype.queueTaskHandler                                                                  // 577
       * This method handles tasks that are sub queues                                                                   // 578
       */ // 579
      PowerQueue.prototype.queueTaskHandler = function (subQueue, next, failures) {
        // 580
        var self = this; // 581
        // Monitor sub queue task releases                                                                               // 582
        subQueue.onRelease = function (remaining) {
          // 583
          // Ok, we were paused - this could be throttling so we respect this                                            // 584
          // So when the queue is halted we add it back into the main queue                                              // 585
          if (remaining > 0) {
            // 586
            // We get out of the queue but dont repport error and add to run later                                       // 587
            next(null); // 588
          } else {
            // 589
            // Queue has ended                                                                                           // 590
            // We simply trigger next task when the sub queue is complete                                                // 591
            next(); // 592
            // When running subqueues it doesnt make sense to track failures and retry                                   // 593
            // the sub queue - this is sub queue domain                                                                  // 594
          } // 595
        }; // 596
        // 597
        // Start the queue                                                                                               // 598
        subQueue.run(); // 599
      }; // 600
      // 601
      /** @callback PowerQueue.prototype.taskHandler                                                                     // 602
       * @param {any} data This can be data or functions                                                                 // 603
       * @param {function} next Function `next` call this to end task                                                    // 604
       * @param {number} failures Number of failures on this task                                                        // 605
       *                                                                                                                 // 606
       * Default task handler expects functions as data:                                                                 // 607
       * ```js                                                                                                           // 608
       *   self.taskHandler = function(data, next, failures) {                                                           // 609
       *     // This default task handler expects invocation to be a function to run                                     // 610
       *     if (typeof data !== 'function') {                                                                           // 611
       *       throw new Error('Default task handler expects a function');                                               // 612
       *     }                                                                                                           // 613
       *     try {                                                                                                       // 614
       *       // Have the function call next                                                                            // 615
       *       data(next, failures);                                                                                     // 616
       *     } catch(err) {                                                                                              // 617
       *       // Throw to fail this task                                                                                // 618
       *       next(err);                                                                                                // 619
       *     }                                                                                                           // 620
       *   };                                                                                                            // 621
       * ```                                                                                                             // 622
       */ // 623
      // 624
      // Can be overwrittin by the user                                                                                  // 625
      PowerQueue.prototype.taskHandler = function (data, next, failures) {
        // 626
        var self = this; // 627
        // This default task handler expects invocation to be a function to run                                          // 628
        if (typeof data !== 'function') {
          // 629
          throw new Error('Default task handler expects a function'); // 630
        } // 631
        try {
          // 632
          // Have the function call next                                                                                 // 633
          data(next, failures); // 634
        } catch (err) {
          // 635
          // Throw to fail this task                                                                                     // 636
          next(err); // 637
        } // 638
      }; // 639
      // 640
      /** @callback PowerQueue.prototype.errorHandler                                                                    // 641
       * @param {any} data This can be data or functions                                                                 // 642
       * @param {function} addTask Use this function to insert the data into the queue again                             // 643
       * @param {number} failures Number of failures on this task                                                        // 644
       *                                                                                                                 // 645
       * The default callback:                                                                                           // 646
       * ```js                                                                                                           // 647
       *   var foo = new PowerQueue();                                                                                   // 648
       *                                                                                                                 // 649
       *   // Overwrite the default action                                                                               // 650
       *   foo.errorHandler = function(data, addTask, failures) {                                                        // 651
       *     // This could be overwritten the data contains the task data and addTask                                    // 652
       *     // is a helper for adding the task to the queue                                                             // 653
       *     // try again: addTask(data);                                                                                // 654
       *     // console.log('Terminate at ' + failures + ' failures');                                                   // 655
       *   };                                                                                                            // 656
       * ```                                                                                                             // 657
       */ // 658
      PowerQueue.prototype.errorHandler = function (data, addTask, failures) {
        // 659
        var self = this; // 660
        // This could be overwritten the data contains the task data and addTask                                         // 661
        // is a helper for adding the task to the queue                                                                  // 662
        // try again: addTask(data);                                                                                     // 663
        self.debug && console.log('Terminate at ' + failures + ' failures'); // 664
      }; // 665
      // 666
      /** @method PowerQueue.prototype.pause Pause the queue                                                             // 667
       * @todo We should have it pause all processing tasks                                                              // 668
       */ // 669
      PowerQueue.prototype.pause = function () {
        // 670
        var self = this; // 671
        if (!self._paused.value) {
          // 672
          // 673
          self._paused.set(true); // 674
          // Loop through the processing tasks and pause these                                                           // 675
          self._processList.forEach(function (data) {
            // 676
            if (data.queue instanceof PowerQueue) {
              // 677
              // Pause the sub queue                                                                                     // 678
              data.queue.pause(); // 679
            } // 680
          }, true); // 681
          // 682
          // Trigger callback                                                                                            // 683
          self.onPaused(); // 684
        } // 685
      }; // 686
      // 687
      /** @method PowerQueue.prototype.resume Start a paused queue                                                       // 688
       * @todo We should have it resume all processing tasks                                                             // 689
       *                                                                                                                 // 690
       * > This will not start a stopped queue                                                                           // 691
       */ // 692
      PowerQueue.prototype.resume = function () {
        // 693
        var self = this; // 694
        self.run(); // 695
      }; // 696
      // 697
      /** @method PowerQueue.prototype.run Starts the queue                                                              // 698
       * > Using this command will resume a paused queue and will                                                        // 699
       * > start a stopped queue.                                                                                        // 700
       */ // 701
      PowerQueue.prototype.run = function () {
        // 702
        var self = this; // 703
        //not paused and already running or queue empty or paused subqueues                                              // 704
        if (!self._paused.value && self._running.value || !self.invocations._length) {
          // 705
          return; // 706
        } // 707
        // 708
        self._paused.set(false); // 709
        self._running.set(true); // 710
        self.next(null); // 711
      }; // 712
      // 713
      /** @method PowerQueue.prototype.stop Stops the queue                                                              // 714
       */ // 715
      PowerQueue.prototype.stop = function () {
        // 716
        var self = this; // 717
        self._running.set(false); // 718
      }; // 719
      // 720
      /** @method PowerQueue.prototype.cancel Cancel the queue                                                           // 721
       */ // 722
      PowerQueue.prototype.cancel = function () {
        // 723
        var self = this; // 724
        self.reset(); // 725
      }; // 726
      // 727
      // 728
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    ///////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:power-queue", {
    PowerQueue: PowerQueue
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var FS = Package['cfs:base-package'].FS;
  var PowerQueue = Package['cfs:power-queue'].PowerQueue;
  var ReactiveList = Package['cfs:reactive-list'].ReactiveList;

  /* Package-scope variables */
  var httpCall, buildUrl, encodeParams, encodeString, makeErrorByStatus, populateData, UploadTransferQueue;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/cfs_upload-http/packages/cfs_upload-http.js                                                                //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    (function () {

      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                               //
      // packages/cfs:upload-http/http-call-client.js                                                                  //
      //                                                                                                               //
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /*                                                                                                               // 1
       * We use this instead of HTTP.call from the http package for now. If/when                                       // 2
       * PR 1670 is merged and released, we can probably remove this file and begin                                    // 3
       * using HTTP.call directly.                                                                                     // 4
       */ // 5
      // 6
      httpCall = function (method, url, options, callback) {
        // 7
        // 8
        ////////// Process arguments //////////                                                                        // 9
        // 10
        if (!callback && typeof options === "function") {
          // 11
          // support (method, url, callback) argument list                                                             // 12
          callback = options; // 13
          options = null; // 14
        } // 15
        // 16
        options = options || {}; // 17
        // 18
        if (typeof callback !== "function") // 19
          throw new Error( // 20
          "Can't make a blocking HTTP call from the client; callback required."); // 21
        // 22
        method = (method || "").toUpperCase(); // 23
        // 24
        var headers = {}; // 25
        // 26
        var content = options.content; // 27
        if (options.data) {
          // 28
          content = JSON.stringify(options.data); // 29
          headers['Content-Type'] = 'application/json'; // 30
        } // 31
        // 32
        var params_for_url, params_for_body; // 33
        if (content || method === "GET" || method === "HEAD") // 34
          params_for_url = options.params; // 35
        else // 36
          params_for_body = options.params; // 37
        // 38
        var query_match = /^(.*?)(\?.*)?$/.exec(url); // 39
        url = buildUrl(query_match[1], query_match[2], // 40
        options.query, params_for_url); // 41
        // 42
        if (options.followRedirects === false) // 43
          throw new Error("Option followRedirects:false not supported on client."); // 44
        // 45
        var username, password; // 46
        if (options.auth) {
          // 47
          var colonLoc = options.auth.indexOf(':'); // 48
          if (colonLoc < 0) // 49
            throw new Error('auth option should be of the form "username:password"'); // 50
          username = options.auth.substring(0, colonLoc); // 51
          password = options.auth.substring(colonLoc + 1); // 52
        } // 53
        // 54
        if (params_for_body) {
          // 55
          content = encodeParams(params_for_body); // 56
        } // 57
        // 58
        FS.Utility.extend(headers, options.headers || {}); // 59
        // 60
        ////////// Callback wrapping //////////                                                                        // 61
        // 62
        // wrap callback to add a 'response' property on an error, in case                                             // 63
        // we have both (http 4xx/5xx error, which has a response payload)                                             // 64
        callback = function (callback) {
          // 65
          return function (error, response) {
            // 66
            if (error && response) // 67
              error.response = response; // 68
            callback(error, response); // 69
          }; // 70
        }(callback); // 71
        // 72
        // safety belt: only call the callback once.                                                                   // 73
        callback = FS.Utility.once(callback); // 74
        // 75
        // 76
        ////////// Kickoff! //////////                                                                                 // 77
        // 78
        // from this point on, errors are because of something remote, not                                             // 79
        // something we should check in advance. Turn exceptions into error                                            // 80
        // results.                                                                                                    // 81
        try {
          // 82
          // setup XHR object                                                                                          // 83
          var xhr; // 84
          if (typeof XMLHttpRequest !== "undefined") // 85
            xhr = new XMLHttpRequest(); // 86
          else if (typeof ActiveXObject !== "undefined") // 87
              xhr = new ActiveXObject("Microsoft.XMLHttp"); // IE6                                                       // 88
            else // 89
              throw new Error("Can't create XMLHttpRequest"); // ???                                                     // 90
          // 91
          xhr.open(method, url, true, username, password); // 92
          // 93
          // support custom "ejson-binary" response type                                                               // 94
          // and all browser-supported types                                                                           // 95
          var convertToBinary; // 96
          if (options.responseType === "ejson-binary") {
            // 97
            xhr.responseType = "arraybuffer"; // 98
            convertToBinary = true; // 99
          } else {
            // 100
            xhr.responseType = options.responseType; // 101
          } // 102
          // 103
          for (var k in headers) // 104
          xhr.setRequestHeader(k, headers[k]); // 105
          // 106
          // 107
          // setup timeout                                                                                             // 108
          var timed_out = false; // 109
          var timer; // 110
          if (options.timeout) {
            // 111
            timer = Meteor.setTimeout(function () {
              // 112
              timed_out = true; // 113
              xhr.abort(); // 114
            }, options.timeout); // 115
          }; // 116
          // 117
          // callback on complete                                                                                      // 118
          xhr.onreadystatechange = function (evt) {
            // 119
            if (xhr.readyState === 4) {
              // COMPLETE                                                                    // 120
              if (timer) // 121
                Meteor.clearTimeout(timer); // 122
              // 123
              if (timed_out) {
                // 124
                callback(new Error("timeout")); // 125
              } else if (!xhr.status) {
                // 126
                // no HTTP response                                                                                    // 127
                callback(new Error("network")); // 128
              } else {
                // 129
                // 130
                var response = {}; // 131
                response.statusCode = xhr.status; // 132
                // 133
                var body = xhr.response || xhr.responseText; // 134
                // 135
                // Some browsers don't yet support "json" responseType,                                                // 136
                // but we can replicate it                                                                             // 137
                if (options.responseType === "json" && typeof body === "string") {
                  // 138
                  try {
                    // 139
                    body = JSON.parse(body); // 140
                  } catch (err) {
                    // 141
                    body = null; // 142
                  } // 143
                } // 144
                // 145
                // Add support for a custom responseType: "ejson-binary"                                               // 146
                if (convertToBinary && typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined" && body instanceof ArrayBuffer) {
                  var view = new Uint8Array(body); // 148
                  var len = body.byteLength; // 149
                  var binaryBody = EJSON.newBinary(len); // 150
                  for (var i = 0; i < len; i++) {
                    // 151
                    binaryBody[i] = view[i]; // 152
                  } // 153
                  body = binaryBody; // 154
                } // 155
                // 156
                response.content = body; // 157
                // 158
                response.headers = {}; // 159
                var header_str = xhr.getAllResponseHeaders(); // 160
                // 161
                // https://github.com/meteor/meteor/issues/553                                                         // 162
                //                                                                                                     // 163
                // In Firefox there is a weird issue, sometimes                                                        // 164
                // getAllResponseHeaders returns the empty string, but                                                 // 165
                // getResponseHeader returns correct results. Possibly this                                            // 166
                // issue:                                                                                              // 167
                // https://bugzilla.mozilla.org/show_bug.cgi?id=608735                                                 // 168
                //                                                                                                     // 169
                // If this happens we can't get a full list of headers, but                                            // 170
                // at least get content-type so our JSON decoding happens                                              // 171
                // correctly. In theory, we could try and rescue more header                                           // 172
                // values with a list of common headers, but content-type is                                           // 173
                // the only vital one for now.                                                                         // 174
                if ("" === header_str && xhr.getResponseHeader("content-type")) // 175
                  header_str = // 176
                  "content-type: " + xhr.getResponseHeader("content-type"); // 177
                // 178
                var headers_raw = header_str.split(/\r?\n/); // 179
                FS.Utility.each(headers_raw, function (h) {
                  // 180
                  var m = /^(.*?):(?:\s+)(.*)$/.exec(h); // 181
                  if (m && m.length === 3) // 182
                    response.headers[m[1].toLowerCase()] = m[2]; // 183
                }); // 184
                // 185
                populateData(response); // 186
                // 187
                var error = null; // 188
                if (response.statusCode >= 400) // 189
                  error = makeErrorByStatus(response.statusCode, response.content); // 190
                // 191
                callback(error, response); // 192
              } // 193
            } // 194
          }; // 195
          // 196
          // send it on its way                                                                                        // 197
          xhr.send(content); // 198
          // 199
        } catch (err) {
          // 200
          callback(err); // 201
        } // 202
        // 203
      }; // 204
      // 205
      buildUrl = function (before_qmark, from_qmark, opt_query, opt_params) {
        // 206
        var url_without_query = before_qmark; // 207
        var query = from_qmark ? from_qmark.slice(1) : null; // 208
        // 209
        if (typeof opt_query === "string") // 210
          query = String(opt_query); // 211
        // 212
        if (opt_params) {
          // 213
          query = query || ""; // 214
          var prms = encodeParams(opt_params); // 215
          if (query && prms) // 216
            query += '&'; // 217
          query += prms; // 218
        } // 219
        // 220
        var url = url_without_query; // 221
        if (query !== null) // 222
          url += "?" + query; // 223
        // 224
        return url; // 225
      }; // 226
      // 227
      encodeParams = function (params) {
        // 228
        var buf = []; // 229
        FS.Utility.each(params, function (value, key) {
          // 230
          if (buf.length) // 231
            buf.push('&'); // 232
          buf.push(encodeString(key), '=', encodeString(value)); // 233
        }); // 234
        return buf.join('').replace(/%20/g, '+'); // 235
      }; // 236
      // 237
      encodeString = function (str) {
        // 238
        return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\*/g, "%2A"); // 239
      }; // 240
      // 241
      makeErrorByStatus = function (statusCode, content) {
        // 242
        var MAX_LENGTH = 160; // if you change this, also change the appropriate test                                  // 243
        // 244
        var truncate = function (str, length) {
          // 245
          return str.length > length ? str.slice(0, length) + '...' : str; // 246
        }; // 247
        // 248
        var message = "failed [" + statusCode + "]"; // 249
        if (content) // 250
          message += " " + truncate(content.replace(/\n/g, " "), MAX_LENGTH); // 251
        // 252
        return new Error(message); // 253
      }; // 254
      // 255
      // Fill in `response.data` if the content-type is JSON.                                                          // 256
      populateData = function (response) {
        // 257
        // Read Content-Type header, up to a ';' if there is one.                                                      // 258
        // A typical header might be "application/json; charset=utf-8"                                                 // 259
        // or just "application/json".                                                                                 // 260
        var contentType = (response.headers['content-type'] || ';').split(';')[0]; // 261
        // 262
        // Only try to parse data as JSON if server sets correct content type.                                         // 263
        if (FS.Utility.include(['application/json', 'text/javascript'], contentType)) {
          // 264
          try {
            // 265
            response.data = JSON.parse(response.content); // 266
          } catch (err) {
            // 267
            response.data = null; // 268
          } // 269
        } else {
          // 270
          response.data = null; // 271
        } // 272
      }; // 273
      // 274
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    (function () {

      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                               //
      // packages/cfs:upload-http/upload-http-common.js                                                                //
      //                                                                                                               //
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      FS.HTTP = FS.HTTP || {}; // 1
      // 2
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    (function () {

      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                               //
      // packages/cfs:upload-http/upload-http-client.js                                                                //
      //                                                                                                               //
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /*                                                                                                               // 1
       * HTTP Upload Transfer Queue                                                                                    // 2
       */ // 3
      // 4
      // 2MB default upload chunk size                                                                                 // 5
      // Can be overridden by user with FS.config.uploadChunkSize or per FS.Collection in collection options           // 6
      var defaultChunkSize = 2 * 1024 * 1024; // 7
      // 8
      /**                                                                                                              // 9
       * @private                                                                                                      // 10
       * @param {Object} task                                                                                          // 11
       * @param {Function} next                                                                                        // 12
       * @return {undefined}                                                                                           // 13
       */ // 14
      var _taskHandler = function (task, next) {
        // 15
        FS.debug && console.log("uploading chunk " + task.chunk + ", bytes " + task.start + " to " + Math.min(task.end, task.fileObj.size()) + " of " + task.fileObj.size());
        task.fileObj.data.getBinary(task.start, task.end, function gotBinaryCallback(err, data) {
          // 17
          if (err) {
            // 18
            next(new Meteor.Error(err.error, err.message)); // 19
          } else {
            // 20
            // 21
            FS.debug && console.log('PUT to URL', task.url, task.urlParams); // 22
            // 23
            httpCall("PUT", task.url, { // 24
              params: FS.Utility.extend({ chunk: task.chunk }, task.urlParams), // 25
              content: data, // 26
              headers: { // 27
                'Content-Type': task.fileObj.type() // 28
                // 29
              } }, function (error, result) {
              // 30
              task = null; // 31
              if (error) {
                // 32
                next(new Meteor.Error(error.error, error.message)); // 33
              } else {
                // 34
                next(); // 35
              } // 36
            }); // 37
            // 38
          } // 39
        }); // 40
      }; // 41
      // 42
      /**                                                                                                              // 43
       * @private                                                                                                      // 44
       * @param {Object} data                                                                                          // 45
       * @param {Function} addTask                                                                                     // 46
       * @return {undefined}                                                                                           // 47
       */ // 48
      var _errorHandler = function (data, addTask, failures) {// 49
        // If file upload fails                                                                                        // 50
        // TODO We should retry a few times and then emit error?                                                       // 51
        // data.fileObj.emit("error", error);                                                                          // 52
      }; // 53
      // 54
      /** @method UploadTransferQueue                                                                                  // 55
       * @namespace UploadTransferQueue                                                                                // 56
       * @constructor                                                                                                  // 57
       * @param {Object} [options]                                                                                     // 58
       */ // 59
      UploadTransferQueue = function (options) {
        // 60
        // Rig options                                                                                                 // 61
        options = options || {}; // 62
        // 63
        // Init the power queue                                                                                        // 64
        var self = new PowerQueue({ // 65
          name: 'HTTPUploadTransferQueue', // 66
          // spinalQueue: ReactiveList,                                                                                // 67
          maxProcessing: 1, // 68
          maxFailures: 5, // 69
          jumpOnFailure: true, // 70
          autostart: true, // 71
          isPaused: false, // 72
          filo: false, // 73
          debug: FS.debug // 74
        }); // 75
        // 76
        // Keep track of uploaded files via this queue                                                                 // 77
        self.files = {}; // 78
        // 79
        // cancel maps onto queue reset                                                                                // 80
        self.cancel = self.reset; // 81
        // 82
        /**                                                                                                            // 83
          * @method UploadTransferQueue.isUploadingFile                                                                // 84
          * @param {FS.File} fileObj File to check if uploading                                                        // 85
          * @returns {Boolean} True if the file is uploading                                                           // 86
          *                                                                                                            // 87
          * @todo Maybe have a similar function for accessing the file upload queue?                                   // 88
          */ // 89
        self.isUploadingFile = function (fileObj) {
          // 90
          // Check if file is already in queue                                                                         // 91
          return !!(fileObj && fileObj._id && fileObj.collectionName && (self.files[fileObj.collectionName] || {})[fileObj._id]);
        }; // 93
        // 94
        /** @method UploadTransferQueue.resumeUploadingFile                                                            // 95
         * @param {FS.File} File to resume uploading                                                                   // 96
         * @todo Not sure if this is the best way to handle resumes                                                    // 97
         */ // 98
        self.resumeUploadingFile = function (fileObj) {
          // 99
          // Make sure we are handed a FS.File                                                                         // 100
          if (!(fileObj instanceof FS.File)) {
            // 101
            throw new Error('Transfer queue expects a FS.File'); // 102
          } // 103
          // 104
          if (fileObj.isMounted()) {
            // 105
            // This might still be true, preventing upload, if                                                         // 106
            // there was a server restart without client restart.                                                      // 107
            self.files[fileObj.collectionName] = self.files[fileObj.collectionName] || {}; // 108
            self.files[fileObj.collectionName][fileObj._id] = false; // 109
            // Kick off normal upload                                                                                  // 110
            self.uploadFile(fileObj); // 111
          } // 112
        }; // 113
        // 114
        /** @method UploadTransferQueue.uploadFile                                                                     // 115
         * @param {FS.File} File to upload                                                                             // 116
         * @todo Check that a file can only be added once - maybe a visual helper on the FS.File?                      // 117
         * @todo Have an initial request to the server getting uploaded chunks for resume                              // 118
         */ // 119
        self.uploadFile = function (fileObj) {
          // 120
          FS.debug && console.log("HTTP uploadFile"); // 121
          // 122
          // Make sure we are handed a FS.File                                                                         // 123
          if (!(fileObj instanceof FS.File)) {
            // 124
            throw new Error('Transfer queue expects a FS.File'); // 125
          } // 126
          // 127
          // Make sure that we have size as number                                                                     // 128
          if (typeof fileObj.size() !== 'number') {
            // 129
            throw new Error('TransferQueue upload failed: fileObj size not set'); // 130
          } // 131
          // 132
          // We don't add the file if it's already in transfer or if already uploaded                                  // 133
          if (self.isUploadingFile(fileObj) || fileObj.isUploaded()) {
            // 134
            return; // 135
          } // 136
          // 137
          // Make sure the file object is mounted on a collection                                                      // 138
          if (fileObj.isMounted()) {
            // 139
            // 140
            var collectionName = fileObj.collectionName; // 141
            var id = fileObj._id; // 142
            // 143
            // Set the chunkSize to match the collection options, or global config, or default                         // 144
            fileObj.chunkSize = fileObj.collection.options.chunkSize || FS.config.uploadChunkSize || defaultChunkSize; // 145
            // Set counter for uploaded chunks                                                                         // 146
            fileObj.chunkCount = 0; // 147
            // Calc the number of chunks                                                                               // 148
            fileObj.chunkSum = Math.ceil(fileObj.size() / fileObj.chunkSize); // 149
            // 150
            if (fileObj.chunkSum === 0) // 151
              return; // 152
            // 153
            // Update the filerecord                                                                                   // 154
            // TODO eventually we should be able to do this without storing any chunk info in the filerecord           // 155
            fileObj.update({ $set: { chunkSize: fileObj.chunkSize, chunkCount: fileObj.chunkCount, chunkSum: fileObj.chunkSum } });
            // 157
            // Create a sub queue                                                                                      // 158
            var chunkQueue = new PowerQueue({ // 159
              onEnded: function oneChunkQueueEnded() {
                // 160
                // Remove from list of files being uploaded                                                            // 161
                self.files[collectionName][id] = false; // 162
                // XXX It might be possible for this to be called even though there were errors uploading?             // 163
                fileObj.emit("uploaded"); // 164
              }, // 165
              spinalQueue: ReactiveList, // 166
              maxProcessing: 1, // 167
              maxFailures: 5, // 168
              jumpOnFailure: true, // 169
              autostart: false, // 170
              isPaused: false, // 171
              filo: false // 172
            }); // 173
            // 174
            // Rig the custom task handler                                                                             // 175
            chunkQueue.taskHandler = _taskHandler; // 176
            // 177
            // Rig the error handler                                                                                   // 178
            chunkQueue.errorHandler = _errorHandler; // 179
            // 180
            // Set flag that this file is being transfered                                                             // 181
            self.files[collectionName] = self.files[collectionName] || {}; // 182
            self.files[collectionName][id] = true; // 183
            // 184
            // Construct URL                                                                                           // 185
            var url = FS.HTTP.uploadUrl + '/' + collectionName; // 186
            if (id) {
              // 187
              url += '/' + id; // 188
            } // 189
            // 190
            // TODO: Could we somehow figure out if the collection requires login?                                     // 191
            var authToken = ''; // 192
            if (typeof Accounts !== "undefined") {
              // 193
              var authObject = { // 194
                authToken: Accounts._storedLoginToken() || '' // 195
              }; // 196
              // 197
              // Set the authToken                                                                                     // 198
              var authString = JSON.stringify(authObject); // 199
              authToken = FS.Utility.btoa(authString); // 200
            } // 201
            // 202
            // Construct query string                                                                                  // 203
            var urlParams = { // 204
              filename: fileObj.name() // 205
            }; // 206
            if (authToken !== '') {
              // 207
              urlParams.token = authToken; // 208
            } // 209
            // 210
            // Add chunk upload tasks                                                                                  // 211
            for (var chunk = 0, start; chunk < fileObj.chunkSum; chunk++) {
              // 212
              start = chunk * fileObj.chunkSize; // 213
              // Create and add the task                                                                               // 214
              // XXX should we somehow make sure we haven't uploaded this chunk already, in                            // 215
              // case we are resuming?                                                                                 // 216
              chunkQueue.add({ // 217
                chunk: chunk, // 218
                name: fileObj.name(), // 219
                url: url, // 220
                urlParams: urlParams, // 221
                fileObj: fileObj, // 222
                start: start, // 223
                end: (chunk + 1) * fileObj.chunkSize // 224
              }); // 225
            } // 226
            // 227
            // Add the queue to the main upload queue                                                                  // 228
            self.add(chunkQueue); // 229
          } // 230
          // 231
        }; // 232
        // 233
        return self; // 234
      }; // 235
      // 236
      /**                                                                                                              // 237
       * @namespace FS                                                                                                 // 238
       * @type UploadTransferQueue                                                                                     // 239
       *                                                                                                               // 240
       * There is a single uploads transfer queue per client (not per CFS)                                             // 241
       */ // 242
      FS.HTTP.uploadQueue = new UploadTransferQueue(); // 243
      // 244
      /*                                                                                                               // 245
       * FS.File extensions                                                                                            // 246
       */ // 247
      // 248
      /**                                                                                                              // 249
       * @method FS.File.prototype.resume                                                                              // 250
       * @public                                                                                                       // 251
       * @param {File|Blob|Buffer} ref                                                                                 // 252
       * @todo WIP, Not yet implemented for server                                                                     // 253
       *                                                                                                               // 254
       * > This function is not yet implemented for server                                                             // 255
       */ // 256
      FS.File.prototype.resume = function (ref) {
        // 257
        var self = this; // 258
        FS.uploadQueue.resumeUploadingFile(self); // 259
      }; // 260
      // 261
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:upload-http");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var FS = Package['cfs:base-package'].FS;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var DDP = Package['ddp-client'].DDP;
  var EventEmitter = Package['raix:eventemitter'].EventEmitter;
  var Mongo = Package.mongo.Mongo;

  (function () {

    ///////////////////////////////////////////////////////////////////////
    //                                                                   //
    // packages/cfs_collection/packages/cfs_collection.js                //
    //                                                                   //
    ///////////////////////////////////////////////////////////////////////
    //
    (function () {

      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                     //
      // packages/cfs:collection/common.js                                                                                   //
      //                                                                                                                     //
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /**                                                                                                                    // 1
       *                                                                                                                     // 2
       * @constructor                                                                                                        // 3
       * @param {string} name A name for the collection                                                                      // 4
       * @param {Object} options                                                                                             // 5
       * @param {FS.StorageAdapter[]} options.stores An array of stores in which files should be saved. At least one is required.
       * @param {Object} [options.filter] Filter definitions                                                                 // 7
       * @param {Number} [options.chunkSize=2MB] Override the chunk size in bytes for uploads                                // 8
       * @param {Function} [options.uploader] A function to pass FS.File instances after inserting, which will begin uploading them. By default, `FS.HTTP.uploadQueue.uploadFile` is used if the `cfs-upload-http` package is present, or `FS.DDP.uploadQueue.uploadFile` is used if the `cfs-upload-ddp` package is present. You can override with your own, or set to `null` to prevent automatic uploading.
       * @returns {undefined}                                                                                                // 10
       */ // 11
      FS.Collection = function (name, options) {
        // 12
        var self = this; // 13
        // 14
        self.storesLookup = {}; // 15
        // 16
        self.primaryStore = {}; // 17
        // 18
        self.options = { // 19
          filter: null, //optional                                                                                           // 20
          stores: [], //required                                                                                             // 21
          chunkSize: null // 22
        }; // 23
        // 24
        // Define a default uploader based on which upload packages are present,                                             // 25
        // preferring HTTP. You may override with your own function or                                                       // 26
        // set to null to skip automatic uploading of data after file insert/update.                                         // 27
        if (FS.HTTP && FS.HTTP.uploadQueue) {
          // 28
          self.options.uploader = FS.HTTP.uploadQueue.uploadFile; // 29
        } else if (FS.DDP && FS.DDP.uploadQueue) {
          // 30
          self.options.uploader = FS.DDP.uploadQueue.uploadFile; // 31
        } // 32
        // 33
        // Extend and overwrite options                                                                                      // 34
        FS.Utility.extend(self.options, options || {}); // 35
        // 36
        // Set the FS.Collection name                                                                                        // 37
        self.name = name; // 38
        // 39
        // Make sure at least one store has been supplied.                                                                   // 40
        // Usually the stores aren't used on the client, but we need them defined                                            // 41
        // so that we can access their names and use the first one as the default.                                           // 42
        if (FS.Utility.isEmpty(self.options.stores)) {
          // 43
          throw new Error("You must specify at least one store. Please consult the documentation."); // 44
        } // 45
        // 46
        FS.Utility.each(self.options.stores, function (store, i) {
          // 47
          // Set the primary store                                                                                           // 48
          if (i === 0) {
            // 49
            self.primaryStore = store; // 50
          } // 51
          // 52
          // Check for duplicate naming                                                                                      // 53
          if (typeof self.storesLookup[store.name] !== 'undefined') {
            // 54
            throw new Error('FS.Collection store names must be uniq, duplicate found: ' + store.name); // 55
          } // 56
          // 57
          // Set the lookup                                                                                                  // 58
          self.storesLookup[store.name] = store; // 59
          // 60
          if (Meteor.isServer) {
            // 61
            // 62
            // Emit events based on store events                                                                             // 63
            store.on('stored', function (storeName, fileObj) {
              // 64
              // This is weird, but currently there is a bug where each store will emit the                                  // 65
              // events for all other stores, too, so we need to make sure that this event                                   // 66
              // is truly for this store.                                                                                    // 67
              if (storeName !== store.name) // 68
                return; // 69
              // When a file is successfully stored into the store, we emit a "stored" event on the FS.Collection only if the file belongs to this collection
              if (fileObj.collectionName === name) {
                // 71
                var emitted = self.emit('stored', fileObj, store.name); // 72
                if (FS.debug && !emitted) {
                  // 73
                  console.log(fileObj.name({ store: store.name }) + ' was successfully saved to the ' + store.name + ' store. You are seeing this informational message because you enabled debugging and you have not defined any listeners for the "stored" event on the ' + name + ' collection.');
                } // 75
              } // 76
              fileObj.emit('stored', store.name); // 77
            }); // 78
            // 79
            store.on('error', function (storeName, error, fileObj) {
              // 80
              // This is weird, but currently there is a bug where each store will emit the                                  // 81
              // events for all other stores, too, so we need to make sure that this event                                   // 82
              // is truly for this store.                                                                                    // 83
              if (storeName !== store.name) // 84
                return; // 85
              // When a file has an error while being stored into the temp store, we emit an "error" event on the FS.Collection only if the file belongs to this collection
              if (fileObj.collectionName === name) {
                // 87
                error = new Error('Error storing file to the ' + store.name + ' store: ' + error.message); // 88
                var emitted = self.emit('error', error, fileObj, store.name); // 89
                if (FS.debug && !emitted) {
                  // 90
                  console.log(error.message); // 91
                } // 92
              } // 93
              fileObj.emit('error', store.name); // 94
            }); // 95
            // 96
          } // 97
        }); // 98
        // 99
        var _filesOptions = { // 100
          transform: function (doc) {
            // 101
            // This should keep the filerecord in the file object updated in reactive                                        // 102
            // context                                                                                                       // 103
            var result = new FS.File(doc, true); // 104
            result.collectionName = name; // 105
            return result; // 106
          } // 107
        }; // 108
        // 109
        // Create the 'cfs.' ++ ".filerecord" and use fsFile                                                                 // 110
        var collectionName = 'cfs.' + name + '.filerecord'; // 111
        self.files = new Mongo.Collection(collectionName, _filesOptions); // 112
        // 113
        // For storing custom allow/deny functions                                                                           // 114
        self._validators = { // 115
          download: { allow: [], deny: [] // 116
          } }; // 117
        // 118
        // Set up filters                                                                                                    // 119
        // XXX Should we deprecate the filter option now that this is done with a separate pkg, or just keep it?             // 120
        if (self.filters) {
          // 121
          self.filters(self.options.filter); // 122
        } // 123
        // 124
        // Save the collection reference (we want it without the 'cfs.' prefix and '.filerecord' suffix)                     // 125
        FS._collections[name] = this; // 126
        // 127
        // Set up observers                                                                                                  // 128
        Meteor.isServer && FS.FileWorker && FS.FileWorker.observe(this); // 129
        // 130
        // Emit "removed" event on collection                                                                                // 131
        self.files.find().observe({ // 132
          removed: function (fileObj) {
            // 133
            self.emit('removed', fileObj); // 134
          } // 135
        }); // 136
        // 137
        // Emit events based on TempStore events                                                                             // 138
        if (FS.TempStore) {
          // 139
          FS.TempStore.on('stored', function (fileObj, result) {
            // 140
            // When a file is successfully stored into the temp store, we emit an "uploaded" event on the FS.Collection only if the file belongs to this collection
            if (fileObj.collectionName === name) {
              // 142
              var emitted = self.emit('uploaded', fileObj); // 143
              if (FS.debug && !emitted) {
                // 144
                console.log(fileObj.name() + ' was successfully uploaded. You are seeing this informational message because you enabled debugging and you have not defined any listeners for the "uploaded" event on the ' + name + ' collection.');
              } // 146
            } // 147
          }); // 148
          // 149
          FS.TempStore.on('error', function (error, fileObj) {
            // 150
            // When a file has an error while being stored into the temp store, we emit an "error" event on the FS.Collection only if the file belongs to this collection
            if (fileObj.collectionName === name) {
              // 152
              self.emit('error', new Error('Error storing uploaded file to TempStore: ' + error.message), fileObj); // 153
            } // 154
          }); // 155
        } else if (Meteor.isServer) {
          // 156
          throw new Error("FS.Collection constructor: FS.TempStore must be defined before constructing any FS.Collections."); // 157
        } // 158
        // 159
      }; // 160
      // 161
      // An FS.Collection can emit events                                                                                    // 162
      FS.Collection.prototype = new EventEmitter(); // 163
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    (function () {

      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                     //
      // packages/cfs:collection/api.common.js                                                                               //
      //                                                                                                                     //
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /** @method FS.Collection.prototype.insert Insert `File` or `FS.File` or remote URL into collection                    // 1
       * @public                                                                                                             // 2
       * @param {File|Blob|Buffer|ArrayBuffer|Uint8Array|String} fileRef File, FS.File, or other data to insert              // 3
       * @param {function} [callback] Callback `function(error, fileObj)`                                                    // 4
       * @returns {FS.File|undefined} The `file object`                                                                      // 5
       * [Meteor docs](http://docs.meteor.com/#insert)                                                                       // 6
       */ // 7
      FS.Collection.prototype.insert = function (fileRef, callback) {
        // 8
        var self = this; // 9
        // 10
        if (Meteor.isClient && !callback) {
          // 11
          callback = FS.Utility.defaultCallback; // 12
        } // 13
        // 14
        // XXX:                                                                                                              // 15
        // We should out factor beginStorage to FS.File.beginStorage                                                         // 16
        // the client side storage adapters should be the one providing                                                      // 17
        // the upload either via http/ddp or direct upload                                                                   // 18
        // Could be cool to have a streaming api on the client side                                                          // 19
        // having a createReadStream etc. on the client too...                                                               // 20
        function beginStorage(fileObj) {
          // 21
          // 22
          // If on client, begin uploading the data                                                                          // 23
          if (Meteor.isClient) {
            // 24
            self.options.uploader && self.options.uploader(fileObj); // 25
          } // 26
          // 27
          // If on the server, save the binary to a single chunk temp file,                                                  // 28
          // so that it is available when FileWorker calls saveCopies.                                                       // 29
          // This will also trigger file handling from collection observes.                                                  // 30
          else if (Meteor.isServer) {
              // 31
              fileObj.createReadStream().pipe(FS.TempStore.createWriteStream(fileObj)); // 32
            } // 33
        } // 34
        // 35
        // XXX: would be great if this function could be simplyfied - if even possible?                                      // 36
        function checkAndInsert(fileObj) {
          // 37
          // Check filters. This is called in deny functions, too, but we call here to catch                                 // 38
          // server inserts and to catch client inserts early, allowing us to call `onInvalid` on                            // 39
          // the client and save a trip to the server.                                                                       // 40
          if (!self.allowsFile(fileObj)) {
            // 41
            return FS.Utility.handleError(callback, 'FS.Collection insert: file does not pass collection filters'); // 42
          } // 43
          // 44
          // Set collection name                                                                                             // 45
          fileObj.collectionName = self.name; // 46
          // 47
          // Insert the file into db                                                                                         // 48
          // We call cloneFileRecord as an easy way of extracting the properties                                             // 49
          // that need saving.                                                                                               // 50
          if (callback) {
            // 51
            fileObj._id = self.files.insert(FS.Utility.cloneFileRecord(fileObj), function (err, id) {
              // 52
              if (err) {
                // 53
                if (fileObj._id) {
                  // 54
                  delete fileObj._id; // 55
                } // 56
              } else {
                // 57
                // Set _id, just to be safe, since this could be before or after the insert method returns                   // 58
                fileObj._id = id; // 59
                // Pass to uploader or stream data to the temp store                                                         // 60
                beginStorage(fileObj); // 61
              } // 62
              callback(err, err ? void 0 : fileObj); // 63
            }); // 64
          } else {
            // 65
            fileObj._id = self.files.insert(FS.Utility.cloneFileRecord(fileObj)); // 66
            // Pass to uploader or stream data to the temp store                                                             // 67
            beginStorage(fileObj); // 68
          } // 69
          return fileObj; // 70
        } // 71
        // 72
        // Parse, adjust fileRef                                                                                             // 73
        if (fileRef instanceof FS.File) {
          // 74
          return checkAndInsert(fileRef); // 75
        } else {
          // 76
          // For convenience, allow File, Blob, Buffer, data URI, filepath, URL, etc. to be passed as first arg,             // 77
          // and we will attach that to a new fileobj for them                                                               // 78
          var fileObj = new FS.File(fileRef); // 79
          if (callback) {
            // 80
            fileObj.attachData(fileRef, function attachDataCallback(error) {
              // 81
              if (error) {
                // 82
                callback(error); // 83
              } else {
                // 84
                checkAndInsert(fileObj); // 85
              } // 86
            }); // 87
          } else {
            // 88
            // We ensure there's a callback on the client, so if there isn't one at this point,                              // 89
            // we must be on the server expecting synchronous behavior.                                                      // 90
            fileObj.attachData(fileRef); // 91
            checkAndInsert(fileObj); // 92
          } // 93
          return fileObj; // 94
        } // 95
      }; // 96
      // 97
      /** @method FS.Collection.prototype.update Update the file record                                                      // 98
       * @public                                                                                                             // 99
       * @param {FS.File|object} selector                                                                                    // 100
       * @param {object} modifier                                                                                            // 101
       * @param {object} [options]                                                                                           // 102
       * @param {function} [callback]                                                                                        // 103
       * [Meteor docs](http://docs.meteor.com/#update)                                                                       // 104
       */ // 105
      FS.Collection.prototype.update = function (selector, modifier, options, callback) {
        // 106
        var self = this; // 107
        if (selector instanceof FS.File) {
          // 108
          // Make sure the file belongs to this FS.Collection                                                                // 109
          if (selector.collectionName === self.files._name) {
            // 110
            return selector.update(modifier, options, callback); // 111
          } else {
            // 112
            // Tried to save a file in the wrong FS.Collection                                                               // 113
            throw new Error('FS.Collection cannot update file belongs to: "' + selector.collectionName + '" not: "' + self.files._name + '"');
          } // 115
        } // 116
        // 117
        return self.files.update(selector, modifier, options, callback); // 118
      }; // 119
      // 120
      /** @method FS.Collection.prototype.remove Remove the file from the collection                                         // 121
       * @public                                                                                                             // 122
       * @param {FS.File|object} selector                                                                                    // 123
       * @param {Function} [callback]                                                                                        // 124
       * [Meteor docs](http://docs.meteor.com/#remove)                                                                       // 125
       */ // 126
      FS.Collection.prototype.remove = function (selector, callback) {
        // 127
        var self = this; // 128
        if (selector instanceof FS.File) {
          // 129
          // 130
          // Make sure the file belongs to this FS.Collection                                                                // 131
          if (selector.collectionName === self.files._name) {
            // 132
            return selector.remove(callback); // 133
          } else {
            // 134
            // Tried to remove a file from the wrong FS.Collection                                                           // 135
            throw new Error('FS.Collection cannot remove file belongs to: "' + selector.collectionName + '" not: "' + self.files._name + '"');
          } // 137
        } // 138
        // 139
        //doesn't work correctly on the client without a callback                                                            // 140
        callback = callback || FS.Utility.defaultCallback; // 141
        return self.files.remove(selector, callback); // 142
      }; // 143
      // 144
      /** @method FS.Collection.prototype.findOne                                                                            // 145
       * @public                                                                                                             // 146
       * @param {[selector](http://docs.meteor.com/#selectors)} selector                                                     // 147
       * [Meteor docs](http://docs.meteor.com/#findone)                                                                      // 148
       * Example:                                                                                                            // 149
       ```js                                                                                                                 // 150
       var images = new FS.Collection( ... );                                                                                // 151
       // Get the file object                                                                                                // 152
       var fo = images.findOne({ _id: 'NpnskCt6ippN6CgD8' });                                                                // 153
       ```                                                                                                                   // 154
       */ // 155
      // Call findOne on files collection                                                                                    // 156
      FS.Collection.prototype.findOne = function (selector) {
        // 157
        var self = this; // 158
        return self.files.findOne.apply(self.files, arguments); // 159
      }; // 160
      // 161
      /** @method FS.Collection.prototype.find                                                                               // 162
       * @public                                                                                                             // 163
       * @param {[selector](http://docs.meteor.com/#selectors)} selector                                                     // 164
       * [Meteor docs](http://docs.meteor.com/#find)                                                                         // 165
       * Example:                                                                                                            // 166
       ```js                                                                                                                 // 167
       var images = new FS.Collection( ... );                                                                                // 168
       // Get the all file objects                                                                                           // 169
       var files = images.find({ _id: 'NpnskCt6ippN6CgD8' }).fetch();                                                        // 170
       ```                                                                                                                   // 171
       */ // 172
      FS.Collection.prototype.find = function (selector) {
        // 173
        var self = this; // 174
        return self.files.find.apply(self.files, arguments); // 175
      }; // 176
      // 177
      /** @method FS.Collection.prototype.allow                                                                              // 178
       * @public                                                                                                             // 179
       * @param {object} options                                                                                             // 180
       * @param {function} options.download Function that checks if the file contents may be downloaded                      // 181
       * @param {function} options.insert                                                                                    // 182
       * @param {function} options.update                                                                                    // 183
       * @param {function} options.remove Functions that look at a proposed modification to the database and return true if it should be allowed
       * @param {[string]} [options.fetch] Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your update and remove functions
       * [Meteor docs](http://docs.meteor.com/#allow)                                                                        // 186
       * Example:                                                                                                            // 187
       ```js                                                                                                                 // 188
       var images = new FS.Collection( ... );                                                                                // 189
       // Get the all file objects                                                                                           // 190
       var files = images.allow({                                                                                            // 191
       insert: function(userId, doc) { return true; },                                                                       // 192
       update: function(userId, doc, fields, modifier) { return true; },                                                     // 193
       remove: function(userId, doc) { return true; },                                                                       // 194
       download: function(userId, fileObj) { return true; },                                                                 // 195
       });                                                                                                                   // 196
       ```                                                                                                                   // 197
       */ // 198
      FS.Collection.prototype.allow = function (options) {
        // 199
        var self = this; // 200
        // 201
        // Pull out the custom "download" functions                                                                          // 202
        if (options.download) {
          // 203
          if (!(options.download instanceof Function)) {
            // 204
            throw new Error("allow: Value for `download` must be a function"); // 205
          } // 206
          self._validators.download.allow.push(options.download); // 207
          delete options.download; // 208
        } // 209
        // 210
        return self.files.allow.call(self.files, options); // 211
      }; // 212
      // 213
      /** @method FS.Collection.prototype.deny                                                                               // 214
       * @public                                                                                                             // 215
       * @param {object} options                                                                                             // 216
       * @param {function} options.download Function that checks if the file contents may be downloaded                      // 217
       * @param {function} options.insert                                                                                    // 218
       * @param {function} options.update                                                                                    // 219
       * @param {function} options.remove Functions that look at a proposed modification to the database and return true if it should be denyed
       * @param {[string]} [options.fetch] Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your update and remove functions
       * [Meteor docs](http://docs.meteor.com/#deny)                                                                         // 222
       * Example:                                                                                                            // 223
       ```js                                                                                                                 // 224
       var images = new FS.Collection( ... );                                                                                // 225
       // Get the all file objects                                                                                           // 226
       var files = images.deny({                                                                                             // 227
       insert: function(userId, doc) { return true; },                                                                       // 228
       update: function(userId, doc, fields, modifier) { return true; },                                                     // 229
       remove: function(userId, doc) { return true; },                                                                       // 230
       download: function(userId, fileObj) { return true; },                                                                 // 231
       });                                                                                                                   // 232
       ```                                                                                                                   // 233
       */ // 234
      FS.Collection.prototype.deny = function (options) {
        // 235
        var self = this; // 236
        // 237
        // Pull out the custom "download" functions                                                                          // 238
        if (options.download) {
          // 239
          if (!(options.download instanceof Function)) {
            // 240
            throw new Error("deny: Value for `download` must be a function"); // 241
          } // 242
          self._validators.download.deny.push(options.download); // 243
          delete options.download; // 244
        } // 245
        // 246
        return self.files.deny.call(self.files, options); // 247
      }; // 248
      // 249
      // TODO: Upsert?                                                                                                       // 250
      // 251
      /**                                                                                                                    // 252
       * We provide a default implementation that doesn't do anything.                                                       // 253
       * Can be changed by user or packages, such as the default cfs-collection-filters pkg.                                 // 254
       * @param  {FS.File} fileObj File object                                                                               // 255
       * @return {Boolean} Should we allow insertion of this file?                                                           // 256
       */ // 257
      FS.Collection.prototype.allowsFile = function fsColAllowsFile(fileObj) {
        // 258
        return true; // 259
      }; // 260
      // 261
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    ///////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:collection");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var FS = Package['cfs:base-package'].FS;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/cfs_collection-filters/packages/cfs_collection-filters.js                                                  //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    (function () {

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //                                                                                                                  //
      // packages/cfs:collection-filters/filters.js                                                                       //
      //                                                                                                                  //
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      /**                                                                                                                 // 1
       * @method FS.Collection.prototype.filters                                                                          // 2
       * @public                                                                                                          // 3
       * @param {Object} filters - File filters for this collection.                                                      // 4
       * @returns {undefined}                                                                                             // 5
       */ // 6
      FS.Collection.prototype.filters = function fsColFilters(filters) {
        // 7
        var self = this; // 8
        // 9
        // Check filter option values and normalize them for quicker checking later                                       // 10
        if (filters) {
          // 11
          // check/adjust allow/deny                                                                                      // 12
          FS.Utility.each(['allow', 'deny'], function (type) {
            // 13
            if (!filters[type]) {
              // 14
              filters[type] = {}; // 15
            } else if (typeof filters[type] !== "object") {
              // 16
              throw new Error(type + ' filter must be an object'); // 17
            } // 18
          }); // 19
          // 20
          // check/adjust maxSize                                                                                         // 21
          if (typeof filters.maxSize === "undefined") {
            // 22
            filters.maxSize = null; // 23
          } else if (filters.maxSize && typeof filters.maxSize !== "number") {
            // 24
            throw new Error('maxSize filter must be an number'); // 25
          } // 26
          // 27
          // check/adjust extensions                                                                                      // 28
          FS.Utility.each(['allow', 'deny'], function (type) {
            // 29
            if (!filters[type].extensions) {
              // 30
              filters[type].extensions = []; // 31
            } else if (!FS.Utility.isArray(filters[type].extensions)) {
              // 32
              throw new Error(type + '.extensions filter must be an array of extensions'); // 33
            } else {
              // 34
              //convert all to lowercase                                                                                  // 35
              for (var i = 0, ln = filters[type].extensions.length; i < ln; i++) {
                // 36
                filters[type].extensions[i] = filters[type].extensions[i].toLowerCase(); // 37
              } // 38
            } // 39
          }); // 40
          // 41
          // check/adjust content types                                                                                   // 42
          FS.Utility.each(['allow', 'deny'], function (type) {
            // 43
            if (!filters[type].contentTypes) {
              // 44
              filters[type].contentTypes = []; // 45
            } else if (!FS.Utility.isArray(filters[type].contentTypes)) {
              // 46
              throw new Error(type + '.contentTypes filter must be an array of content types'); // 47
            } // 48
          }); // 49
          // 50
          self.options.filter = filters; // 51
        } // 52
        // 53
        // Define deny functions to enforce file filters on the server                                                    // 54
        // for inserts and updates that initiate from untrusted code.                                                     // 55
        self.files.deny({ // 56
          insert: function (userId, fsFile) {
            // 57
            return !self.allowsFile(fsFile); // 58
          }, // 59
          update: function (userId, fsFile, fields, modifier) {
            // 60
            // TODO will need some kind of additional security here:                                                      // 61
            // Don't allow them to change the type, size, name, and                                                       // 62
            // anything else that would be security or data integrity issue.                                              // 63
            // Such security should probably be added by cfs-collection package, not here.                                // 64
            return !self.allowsFile(fsFile); // 65
          }, // 66
          fetch: [] // 67
        }); // 68
        // 69
        // If insecure package is in use, we need to add allow rules that return                                          // 70
        // true. Otherwise, it would seemingly turn off insecure mode.                                                    // 71
        if (Package && Package.insecure) {
          // 72
          self.allow({ // 73
            insert: function () {
              // 74
              return true; // 75
            }, // 76
            update: function () {
              // 77
              return true; // 78
            }, // 79
            remove: function () {
              // 80
              return true; // 81
            }, // 82
            download: function () {
              // 83
              return true; // 84
            }, // 85
            fetch: [], // 86
            transform: null // 87
          }); // 88
        } // 89
        // If insecure package is NOT in use, then adding the deny function                                               // 90
        // does not have any effect on the main app's security paradigm. The                                              // 91
        // user will still be required to add at least one allow function of her                                          // 92
        // own for each operation for this collection. And the user may still add                                         // 93
        // additional deny functions, but does not have to.                                                               // 94
      }; // 95
      // 96
      /**                                                                                                                 // 97
       * @method FS.Collection.prototype.allowsFile Does the collection allow the specified file?                         // 98
       * @public                                                                                                          // 99
       * @returns {boolean} True if the collection allows this file.                                                      // 100
       *                                                                                                                  // 101
       * Checks based on any filters defined on the collection. If the                                                    // 102
       * file is not valid according to the filters, this method returns false                                            // 103
       * and also calls the filter `onInvalid` method defined for the                                                     // 104
       * collection, passing it an English error string that explains why it                                              // 105
       * failed.                                                                                                          // 106
       */ // 107
      FS.Collection.prototype.allowsFile = function fsColAllowsFile(fileObj) {
        // 108
        var self = this; // 109
        // 110
        // Get filters                                                                                                    // 111
        var filter = self.options.filter; // 112
        if (!filter) {
          // 113
          return true; // 114
        } // 115
        var saveAllFileExtensions = filter.allow.extensions.length === 0; // 116
        var saveAllContentTypes = filter.allow.contentTypes.length === 0; // 117
        // 118
        // Get info about the file                                                                                        // 119
        var filename = fileObj.name(); // 120
        var contentType = fileObj.type(); // 121
        if (!saveAllContentTypes && !contentType) {
          // 122
          filter.onInvalid && filter.onInvalid(filename + " has an unknown content type"); // 123
          return false; // 124
        } // 125
        var fileSize = fileObj.size(); // 126
        if (!fileSize || isNaN(fileSize)) {
          // 127
          filter.onInvalid && filter.onInvalid(filename + " has an unknown file size"); // 128
          return false; // 129
        } // 130
        // 131
        // Do extension checks only if we have a filename                                                                 // 132
        if (filename) {
          // 133
          var ext = fileObj.getExtension(); // 134
          if (!((saveAllFileExtensions || // 135
          FS.Utility.indexOf(filter.allow.extensions, ext) !== -1) && // 136
          FS.Utility.indexOf(filter.deny.extensions, ext) === -1)) {
            // 137
            filter.onInvalid && filter.onInvalid(filename + ' has the extension "' + ext + '", which is not allowed'); // 138
            return false; // 139
          } // 140
        } // 141
        // 142
        // Do content type checks                                                                                         // 143
        if (!((saveAllContentTypes || // 144
        contentTypeInList(filter.allow.contentTypes, contentType)) && // 145
        !contentTypeInList(filter.deny.contentTypes, contentType))) {
          // 146
          filter.onInvalid && filter.onInvalid(filename + ' is of the type "' + contentType + '", which is not allowed'); // 147
          return false; // 148
        } // 149
        // 150
        // Do max size check                                                                                              // 151
        if (typeof filter.maxSize === "number" && fileSize > filter.maxSize) {
          // 152
          filter.onInvalid && filter.onInvalid(filename + " is too big"); // 153
          return false; // 154
        } // 155
        return true; // 156
      }; // 157
      // 158
      /**                                                                                                                 // 159
       * @method contentTypeInList Is the content type string in the list?                                                // 160
       * @private                                                                                                         // 161
       * @param {String[]} list - Array of content types                                                                  // 162
       * @param {String} contentType - The content type                                                                   // 163
       * @returns {Boolean}                                                                                               // 164
       *                                                                                                                  // 165
       * Returns true if the content type is in the list, or if it matches                                                // 166
       * one of the special types in the list, e.g., "image/*".                                                           // 167
       */ // 168
      function contentTypeInList(list, contentType) {
        // 169
        var listType,
            found = false; // 170
        for (var i = 0, ln = list.length; i < ln; i++) {
          // 171
          listType = list[i]; // 172
          if (listType === contentType) {
            // 173
            found = true; // 174
            break; // 175
          } // 176
          if (listType === "image/*" && contentType.indexOf("image/") === 0) {
            // 177
            found = true; // 178
            break; // 179
          } // 180
          if (listType === "audio/*" && contentType.indexOf("audio/") === 0) {
            // 181
            found = true; // 182
            break; // 183
          } // 184
          if (listType === "video/*" && contentType.indexOf("video/") === 0) {
            // 185
            found = true; // 186
            break; // 187
          } // 188
        } // 189
        return found; // 190
      } // 191
      // 192
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }).call(this);

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("cfs:collection-filters");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("cfs:worker");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Autoupdate;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "autoupdate": { "autoupdate_client.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                            //
            // packages/autoupdate/autoupdate_client.js                                                                   //
            //                                                                                                            //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Autoupdate: () => Autoupdate
            });
            // Subscribe to the `meteor_autoupdate_clientVersions` collection,
            // which contains the set of acceptable client versions.
            //
            // A "hard code push" occurs when the running client version is not in
            // the set of acceptable client versions (or the server updates the
            // collection, there is a published client version marked `current` and
            // the running client version is no longer in the set).
            //
            // When the `reload` package is loaded, a hard code push causes
            // the browser to reload, so that it will load the latest client
            // version from the server.
            //
            // A "soft code push" represents the situation when the running client
            // version is in the set of acceptable versions, but there is a newer
            // version available on the server.
            //
            // `Autoupdate.newClientAvailable` is a reactive data source which
            // becomes `true` if there is a new version of the client is available on
            // the server.
            //
            // This package doesn't implement a soft code reload process itself,
            // but `newClientAvailable` could be used for example to display a
            // "click to reload" link to the user.
            // The client version of the client code currently running in the
            // browser.
            const clientArch = Meteor.isCordova ? "web.cordova" : Meteor.isModern ? "web.browser" : "web.browser.legacy";
            const autoupdateVersions = __meteor_runtime_config__.autoupdate.versions[clientArch] || {
              version: "unknown",
              versionRefreshable: "unknown",
              versionNonRefreshable: "unknown",
              assets: []
            };
            const Autoupdate = {};
            // The collection of acceptable client versions.
            const ClientVersions = Autoupdate._ClientVersions = // Used by a self-test.
            new Mongo.Collection("meteor_autoupdate_clientVersions");

            Autoupdate.newClientAvailable = function () {
              return !!(ClientVersions.findOne({
                _id: clientArch,
                versionNonRefreshable: {
                  $ne: autoupdateVersions.versionNonRefreshable
                }
              }) || ClientVersions.findOne({
                _id: clientArch,
                versionRefreshable: {
                  $ne: autoupdateVersions.versionRefreshable
                }
              }));
            }; // Set to true if the link.onload callback ever fires for any <link> node.


            let knownToSupportCssOnLoad = false;
            const retry = new Retry({
              // Unlike the stream reconnect use of Retry, which we want to be instant
              // in normal operation, this is a wacky failure. We don't want to retry
              // right away, we can start slowly.
              //
              // A better way than timeconstants here might be to use the knowledge
              // of when we reconnect to help trigger these retries. Typically, the
              // server fixing code will result in a restart and reconnect, but
              // potentially the subscription could have a transient error.
              minCount: 0,
              // don't do any immediate retries
              baseTimeout: 30 * 1000 // start with 30s

            });
            let failures = 0;

            Autoupdate._retrySubscription = () => {
              Meteor.subscribe("meteor_autoupdate_clientVersions", {
                onError(error) {
                  Meteor._debug("autoupdate subscription failed", error);

                  failures++;
                  retry.retryLater(failures, function () {
                    // Just retry making the subscription, don't reload the whole
                    // page. While reloading would catch more cases (for example,
                    // the server went back a version and is now doing old-style hot
                    // code push), it would also be more prone to reload loops,
                    // which look really bad to the user. Just retrying the
                    // subscription over DDP means it is at least possible to fix by
                    // updating the server.
                    Autoupdate._retrySubscription();
                  });
                },

                onReady() {
                  // Call checkNewVersionDocument with a slight delay, so that the
                  // const handle declaration is guaranteed to be initialized, even if
                  // the added or changed callbacks are called synchronously.
                  const resolved = Promise.resolve();

                  function check(doc) {
                    resolved.then(() => checkNewVersionDocument(doc));
                  }

                  const handle = ClientVersions.find().observe({
                    added: check,
                    changed: check
                  });

                  function checkNewVersionDocument(doc) {
                    if (doc._id !== clientArch) {
                      return;
                    }

                    if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {
                      // Non-refreshable assets have changed, so we have to reload the
                      // whole page rather than just replacing <link> tags.
                      if (handle) handle.stop();

                      if (Package.reload) {
                        // The reload package should be provided by ddp-client, which
                        // is provided by the ddp package that autoupdate depends on.
                        Package.reload.Reload._reload();
                      }

                      return;
                    }

                    if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {
                      autoupdateVersions.versionRefreshable = doc.versionRefreshable; // Switch out old css links for the new css links. Inspired by:
                      // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710

                      var newCss = doc.assets || [];
                      var oldLinks = [];
                      Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {
                        if (link.className === '__meteor-css__') {
                          oldLinks.push(link);
                        }
                      });

                      function waitUntilCssLoads(link, callback) {
                        var called;

                        link.onload = function () {
                          knownToSupportCssOnLoad = true;

                          if (!called) {
                            called = true;
                            callback();
                          }
                        };

                        if (!knownToSupportCssOnLoad) {
                          var id = Meteor.setInterval(function () {
                            if (link.sheet) {
                              if (!called) {
                                called = true;
                                callback();
                              }

                              Meteor.clearInterval(id);
                            }
                          }, 50);
                        }
                      }

                      let newLinksLeftToLoad = newCss.length;

                      function removeOldLinks() {
                        if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {
                          oldLinks.splice(0).forEach(link => {
                            link.parentNode.removeChild(link);
                          });
                        }
                      }

                      if (newCss.length > 0) {
                        newCss.forEach(css => {
                          const newLink = document.createElement("link");
                          newLink.setAttribute("rel", "stylesheet");
                          newLink.setAttribute("type", "text/css");
                          newLink.setAttribute("class", "__meteor-css__");
                          newLink.setAttribute("href", css.url);
                          waitUntilCssLoads(newLink, function () {
                            Meteor.setTimeout(removeOldLinks, 200);
                          });
                          const head = document.getElementsByTagName("head").item(0);
                          head.appendChild(newLink);
                        });
                      } else {
                        removeOldLinks();
                      }
                    }
                  }
                }

              });
            };

            Autoupdate._retrySubscription();
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/autoupdate/autoupdate_client.js");

  /* Exports */
  Package._define("autoupdate", _exports2, {
    Autoupdate: Autoupdate
  });
})();/* Imports for global scope */

Mongo = Package.mongo.Mongo;
ReactMeteorData = Package['react-meteor-data'].ReactMeteorData;
Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
WebApp = Package.webapp.WebApp;
DDP = Package['ddp-client'].DDP;
FS = Package['cfs:base-package'].FS;
Autoupdate = Package.autoupdate.Autoupdate;
Reload = Package.reload.Reload;// Disable hot-code-push
if (Package.reload) {
  Package.reload.Reload._onMigrate(function () {
    return [false];
  });
}